// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_gc_referee_message.proto
// Protobuf C++ Version: 5.27.1

#include "ssl_gc_referee_message.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Referee_TeamInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        yellow_card_times_{},
        _yellow_card_times_cached_byte_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        score_{0u},
        red_cards_{0u},
        yellow_cards_{0u},
        timeouts_{0u},
        timeout_time_{0u},
        goalkeeper_{0u},
        foul_counter_{0u},
        ball_placement_failures_{0u},
        max_allowed_bots_{0u},
        can_place_ball_{false},
        bot_substitution_intent_{false},
        ball_placement_failures_reached_{false},
        bot_substitution_allowed_{false},
        bot_substitutions_left_{0u},
        bot_substitution_time_left_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Referee_TeamInfo::Referee_TeamInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Referee_TeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Referee_TeamInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Referee_TeamInfoDefaultTypeInternal() {}
  union {
    Referee_TeamInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Referee_TeamInfoDefaultTypeInternal _Referee_TeamInfo_default_instance_;

inline constexpr Referee_Point::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Referee_Point::Referee_Point(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Referee_PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Referee_PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Referee_PointDefaultTypeInternal() {}
  union {
    Referee_Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Referee_PointDefaultTypeInternal _Referee_Point_default_instance_;

inline constexpr GameEventProposalGroup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        game_events_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        accepted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GameEventProposalGroup::GameEventProposalGroup(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GameEventProposalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEventProposalGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEventProposalGroupDefaultTypeInternal() {}
  union {
    GameEventProposalGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEventProposalGroupDefaultTypeInternal _GameEventProposalGroup_default_instance_;

inline constexpr Referee::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        game_events_{},
        game_event_proposals_{},
        source_identifier_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        yellow_{nullptr},
        blue_{nullptr},
        designated_position_{nullptr},
        packet_timestamp_{::uint64_t{0u}},
        stage_time_left_{::int64_t{0}},
        stage_{static_cast< ::Referee_Stage >(0)},
        command_{static_cast< ::Referee_Command >(0)},
        command_timestamp_{::uint64_t{0u}},
        command_counter_{0u},
        blue_team_on_positive_half_{false},
        current_action_time_remaining_{::int64_t{0}},
        next_command_{static_cast< ::Referee_Command >(0)},
        match_type_{static_cast< ::MatchType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Referee::Referee(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RefereeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefereeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefereeDefaultTypeInternal() {}
  union {
    Referee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefereeDefaultTypeInternal _Referee_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto = nullptr;
const ::uint32_t
    TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.score_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.red_cards_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.yellow_card_times_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.yellow_cards_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.timeouts_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.timeout_time_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.goalkeeper_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.foul_counter_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.ball_placement_failures_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.can_place_ball_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.max_allowed_bots_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.bot_substitution_intent_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.ball_placement_failures_reached_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.bot_substitution_allowed_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.bot_substitutions_left_),
        PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.bot_substitution_time_left_),
        0,
        1,
        2,
        ~0u,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        9,
        11,
        12,
        13,
        14,
        15,
        PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Referee_Point, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_.y_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Referee, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.source_identifier_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.match_type_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.packet_timestamp_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.stage_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.stage_time_left_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_counter_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_timestamp_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.yellow_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.blue_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.designated_position_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.blue_team_on_positive_half_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.next_command_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.game_events_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.game_event_proposals_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.current_action_time_remaining_),
        PROTOBUF_FIELD_OFFSET(::Referee, _impl_.status_message_),
        0,
        14,
        5,
        7,
        6,
        8,
        10,
        9,
        2,
        3,
        4,
        11,
        13,
        ~0u,
        ~0u,
        12,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_.game_events_),
        PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_.accepted_),
        0,
        ~0u,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 25, -1, sizeof(::Referee_TeamInfo)},
        {42, 52, -1, sizeof(::Referee_Point)},
        {54, 79, -1, sizeof(::Referee)},
        {96, 107, -1, sizeof(::GameEventProposalGroup)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Referee_TeamInfo_default_instance_._instance,
    &::_Referee_Point_default_instance_._instance,
    &::_Referee_default_instance_._instance,
    &::_GameEventProposalGroup_default_instance_._instance,
};
const char descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034ssl_gc_referee_message.proto\032\027ssl_gc_g"
    "ame_event.proto\"\265\016\n\007Referee\022\031\n\021source_id"
    "entifier\030\022 \001(\t\022-\n\nmatch_type\030\023 \001(\0162\n.Mat"
    "chType:\rUNKNOWN_MATCH\022\030\n\020packet_timestam"
    "p\030\001 \002(\004\022\035\n\005stage\030\002 \002(\0162\016.Referee.Stage\022\027"
    "\n\017stage_time_left\030\003 \001(\022\022!\n\007command\030\004 \002(\016"
    "2\020.Referee.Command\022\027\n\017command_counter\030\005 "
    "\002(\r\022\031\n\021command_timestamp\030\006 \002(\004\022!\n\006yellow"
    "\030\007 \002(\0132\021.Referee.TeamInfo\022\037\n\004blue\030\010 \002(\0132"
    "\021.Referee.TeamInfo\022+\n\023designated_positio"
    "n\030\t \001(\0132\016.Referee.Point\022\"\n\032blue_team_on_"
    "positive_half\030\n \001(\010\022&\n\014next_command\030\014 \001("
    "\0162\020.Referee.Command\022\037\n\013game_events\030\020 \003(\013"
    "2\n.GameEvent\0225\n\024game_event_proposals\030\021 \003"
    "(\0132\027.GameEventProposalGroup\022%\n\035current_a"
    "ction_time_remaining\030\017 \001(\003\022\026\n\016status_mes"
    "sage\030\024 \001(\t\032\304\003\n\010TeamInfo\022\014\n\004name\030\001 \002(\t\022\r\n"
    "\005score\030\002 \002(\r\022\021\n\tred_cards\030\003 \002(\r\022\035\n\021yello"
    "w_card_times\030\004 \003(\rB\002\020\001\022\024\n\014yellow_cards\030\005"
    " \002(\r\022\020\n\010timeouts\030\006 \002(\r\022\024\n\014timeout_time\030\007"
    " \002(\r\022\022\n\ngoalkeeper\030\010 \002(\r\022\024\n\014foul_counter"
    "\030\t \001(\r\022\037\n\027ball_placement_failures\030\n \001(\r\022"
    "\026\n\016can_place_ball\030\014 \001(\010\022\030\n\020max_allowed_b"
    "ots\030\r \001(\r\022\037\n\027bot_substitution_intent\030\016 \001"
    "(\010\022\'\n\037ball_placement_failures_reached\030\017 "
    "\001(\010\022 \n\030bot_substitution_allowed\030\020 \001(\010\022\036\n"
    "\026bot_substitutions_left\030\021 \001(\r\022\"\n\032bot_sub"
    "stitution_time_left\030\022 \001(\r\032\035\n\005Point\022\t\n\001x\030"
    "\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL_FIR"
    "ST_HALF_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024\n\020"
    "NORMAL_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HALF"
    "_PRE\020\003\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTRA_"
    "TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006\022\024"
    "\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIME\020"
    "\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_SE"
    "COND_HALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020\013\022"
    "\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\226\003\n"
    "\007Command\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL_S"
    "TART\020\002\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KICKO"
    "FF_YELLOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022\032\n"
    "\026PREPARE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_PEN"
    "ALTY_BLUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n\020D"
    "IRECT_FREE_BLUE\020\t\022\034\n\024INDIRECT_FREE_YELLO"
    "W\020\n\032\002\010\001\022\032\n\022INDIRECT_FREE_BLUE\020\013\032\002\010\001\022\022\n\016T"
    "IMEOUT_YELLOW\020\014\022\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOA"
    "L_YELLOW\020\016\032\002\010\001\022\021\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BAL"
    "L_PLACEMENT_YELLOW\020\020\022\027\n\023BALL_PLACEMENT_B"
    "LUE\020\021J\004\010\013\020\014J\004\010\r\020\016J\004\010\016\020\017\"W\n\026GameEventProp"
    "osalGroup\022\n\n\002id\030\003 \001(\t\022\037\n\013game_events\030\001 \003"
    "(\0132\n.GameEvent\022\020\n\010accepted\030\002 \001(\010*T\n\tMatc"
    "hType\022\021\n\rUNKNOWN_MATCH\020\000\022\017\n\013GROUP_PHASE\020"
    "\001\022\025\n\021ELIMINATION_PHASE\020\002\022\014\n\010FRIENDLY\020\003B\?"
    "Z=github.com/RoboCup-SSL/ssl-game-contro"
    "ller/internal/app/state"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps[1] =
    {
        &::descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
};
static ::absl::once_flag descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto = {
    false,
    false,
    2143,
    descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto,
    "ssl_gc_referee_message.proto",
    &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once,
    descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets,
    file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto,
    file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto,
};
const ::google::protobuf::EnumDescriptor* Referee_Stage_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Referee_Stage_internal_data_[] = {
    917504u, 0u, };
bool Referee_Stage_IsValid(int value) {
  return 0 <= value && value <= 13;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Referee_Stage Referee::NORMAL_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_FIRST_HALF;
constexpr Referee_Stage Referee::NORMAL_HALF_TIME;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF;
constexpr Referee_Stage Referee::EXTRA_TIME_BREAK;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF;
constexpr Referee_Stage Referee::EXTRA_HALF_TIME;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT_BREAK;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT;
constexpr Referee_Stage Referee::POST_GAME;
constexpr Referee_Stage Referee::Stage_MIN;
constexpr Referee_Stage Referee::Stage_MAX;
constexpr int Referee::Stage_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Referee_Command_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Referee_Command_internal_data_[] = {
    1179648u, 0u, };
bool Referee_Command_IsValid(int value) {
  return 0 <= value && value <= 17;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Referee_Command Referee::HALT;
constexpr Referee_Command Referee::STOP;
constexpr Referee_Command Referee::NORMAL_START;
constexpr Referee_Command Referee::FORCE_START;
constexpr Referee_Command Referee::PREPARE_KICKOFF_YELLOW;
constexpr Referee_Command Referee::PREPARE_KICKOFF_BLUE;
constexpr Referee_Command Referee::PREPARE_PENALTY_YELLOW;
constexpr Referee_Command Referee::PREPARE_PENALTY_BLUE;
constexpr Referee_Command Referee::DIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::DIRECT_FREE_BLUE;
constexpr Referee_Command Referee::INDIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::INDIRECT_FREE_BLUE;
constexpr Referee_Command Referee::TIMEOUT_YELLOW;
constexpr Referee_Command Referee::TIMEOUT_BLUE;
constexpr Referee_Command Referee::GOAL_YELLOW;
constexpr Referee_Command Referee::GOAL_BLUE;
constexpr Referee_Command Referee::BALL_PLACEMENT_YELLOW;
constexpr Referee_Command Referee::BALL_PLACEMENT_BLUE;
constexpr Referee_Command Referee::Command_MIN;
constexpr Referee_Command Referee::Command_MAX;
constexpr int Referee::Command_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t MatchType_internal_data_[] = {
    262144u, 0u, };
bool MatchType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class Referee_TeamInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Referee_TeamInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Referee_TeamInfo::Referee_TeamInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee.TeamInfo)
}
inline PROTOBUF_NDEBUG_INLINE Referee_TeamInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Referee_TeamInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        yellow_card_times_{visibility, arena, from.yellow_card_times_},
        _yellow_card_times_cached_byte_size_{0},
        name_(arena, from.name_) {}

Referee_TeamInfo::Referee_TeamInfo(
    ::google::protobuf::Arena* arena,
    const Referee_TeamInfo& from)
    : ::google::protobuf::Message(arena) {
  Referee_TeamInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, score_),
           offsetof(Impl_, bot_substitution_time_left_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::bot_substitution_time_left_));

  // @@protoc_insertion_point(copy_constructor:Referee.TeamInfo)
}
inline PROTOBUF_NDEBUG_INLINE Referee_TeamInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        yellow_card_times_{visibility, arena},
        _yellow_card_times_cached_byte_size_{0},
        name_(arena) {}

inline void Referee_TeamInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           0,
           offsetof(Impl_, bot_substitution_time_left_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::bot_substitution_time_left_));
}
Referee_TeamInfo::~Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:Referee.TeamInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Referee_TeamInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Referee_TeamInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              Referee_TeamInfo::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_._cached_size_),
              false,
          },
          &Referee_TeamInfo::MergeImpl,
          &Referee_TeamInfo::kDescriptorMethods,
          &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 0, 45, 2> Referee_TeamInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294706176,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Referee_TeamInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Referee_TeamInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.name_)}},
    // required uint32 score = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.score_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.score_)}},
    // required uint32 red_cards = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.red_cards_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.red_cards_)}},
    // repeated uint32 yellow_card_times = 4 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.yellow_card_times_)}},
    // required uint32 yellow_cards = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.yellow_cards_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.yellow_cards_)}},
    // required uint32 timeouts = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.timeouts_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.timeouts_)}},
    // required uint32 timeout_time = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.timeout_time_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.timeout_time_)}},
    // required uint32 goalkeeper = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.goalkeeper_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.goalkeeper_)}},
    // optional uint32 foul_counter = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.foul_counter_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.foul_counter_)}},
    // optional uint32 ball_placement_failures = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.ball_placement_failures_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.ball_placement_failures_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool can_place_ball = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Referee_TeamInfo, _impl_.can_place_ball_), 10>(),
     {96, 10, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.can_place_ball_)}},
    // optional uint32 max_allowed_bots = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee_TeamInfo, _impl_.max_allowed_bots_), 9>(),
     {104, 9, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.max_allowed_bots_)}},
    // optional bool bot_substitution_intent = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Referee_TeamInfo, _impl_.bot_substitution_intent_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_intent_)}},
    // optional bool ball_placement_failures_reached = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Referee_TeamInfo, _impl_.ball_placement_failures_reached_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.ball_placement_failures_reached_)}},
    // optional bool bot_substitution_allowed = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 13, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_allowed_)}},
    // optional uint32 bot_substitutions_left = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 14, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitutions_left_)}},
    // optional uint32 bot_substitution_time_left = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 15, 0, PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_time_left_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required string name = 1;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required uint32 score = 2;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.score_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 red_cards = 3;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.red_cards_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 yellow_card_times = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.yellow_card_times_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // required uint32 yellow_cards = 5;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.yellow_cards_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 timeouts = 6;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.timeouts_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 timeout_time = 7;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.timeout_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 goalkeeper = 8;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.goalkeeper_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 foul_counter = 9;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.foul_counter_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ball_placement_failures = 10;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.ball_placement_failures_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool can_place_ball = 12;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.can_place_ball_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 max_allowed_bots = 13;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.max_allowed_bots_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool bot_substitution_intent = 14;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_intent_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ball_placement_failures_reached = 15;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.ball_placement_failures_reached_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool bot_substitution_allowed = 16;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_allowed_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 bot_substitutions_left = 17;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitutions_left_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 bot_substitution_time_left = 18;
    {PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_time_left_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\20\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "Referee.TeamInfo"
    "name"
  }},
};

PROTOBUF_NOINLINE void Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.TeamInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yellow_card_times_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.score_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.foul_counter_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.foul_counter_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.ball_placement_failures_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bot_substitution_time_left_) -
        reinterpret_cast<char*>(&_impl_.ball_placement_failures_)) + sizeof(_impl_.bot_substitution_time_left_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Referee_TeamInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.TeamInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "Referee.TeamInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    int byte_size = _impl_._yellow_card_times_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_yellow_card_times(), byte_size, target);
    }
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_timeout_time(), target);
  }

  // required uint32 goalkeeper = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_goalkeeper(), target);
  }

  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_foul_counter(), target);
  }

  // optional uint32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_can_place_ball(), target);
  }

  // optional uint32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_max_allowed_bots(), target);
  }

  // optional bool bot_substitution_intent = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_bot_substitution_intent(), target);
  }

  // optional bool ball_placement_failures_reached = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_ball_placement_failures_reached(), target);
  }

  // optional bool bot_substitution_allowed = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_bot_substitution_allowed(), target);
  }

  // optional uint32 bot_substitutions_left = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this->_internal_bot_substitutions_left(), target);
  }

  // optional uint32 bot_substitution_time_left = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_bot_substitution_time_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.TeamInfo)
  return target;
}

::size_t Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.TeamInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_yellow_card_times())
    ;
    _impl_._yellow_card_times_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // required string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // required uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_score());
    }

    // required uint32 red_cards = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_red_cards());
    }

    // required uint32 yellow_cards = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_yellow_cards());
    }

    // required uint32 timeouts = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timeouts());
    }

    // required uint32 timeout_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timeout_time());
    }

    // required uint32 goalkeeper = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_goalkeeper());
    }

  }
  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_foul_counter());
  }

  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 ball_placement_failures = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ball_placement_failures());
    }

    // optional uint32 max_allowed_bots = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_max_allowed_bots());
    }

    // optional bool can_place_ball = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool bot_substitution_intent = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool ball_placement_failures_reached = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool bot_substitution_allowed = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3;
    }

    // optional uint32 bot_substitutions_left = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_bot_substitutions_left());
    }

    // optional uint32 bot_substitution_time_left = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_bot_substitution_time_left());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Referee_TeamInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Referee_TeamInfo*>(&to_msg);
  auto& from = static_cast<const Referee_TeamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee.TeamInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_yellow_card_times()->MergeFrom(from._internal_yellow_card_times());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.red_cards_ = from._impl_.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.yellow_cards_ = from._impl_.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timeouts_ = from._impl_.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timeout_time_ = from._impl_.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.goalkeeper_ = from._impl_.goalkeeper_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.foul_counter_ = from._impl_.foul_counter_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ball_placement_failures_ = from._impl_.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_allowed_bots_ = from._impl_.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.can_place_ball_ = from._impl_.can_place_ball_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bot_substitution_intent_ = from._impl_.bot_substitution_intent_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ball_placement_failures_reached_ = from._impl_.ball_placement_failures_reached_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bot_substitution_allowed_ = from._impl_.bot_substitution_allowed_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.bot_substitutions_left_ = from._impl_.bot_substitutions_left_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bot_substitution_time_left_ = from._impl_.bot_substitution_time_left_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Referee_TeamInfo::CopyFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Referee_TeamInfo::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Referee_TeamInfo&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Referee_TeamInfo::InternalSwap(Referee_TeamInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.yellow_card_times_.InternalSwap(&other->_impl_.yellow_card_times_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.bot_substitution_time_left_)
      + sizeof(Referee_TeamInfo::_impl_.bot_substitution_time_left_)
      - PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::google::protobuf::Metadata Referee_TeamInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Referee_Point::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Referee_Point>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Referee_Point::Referee_Point(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee.Point)
}
Referee_Point::Referee_Point(
    ::google::protobuf::Arena* arena, const Referee_Point& from)
    : Referee_Point(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Referee_Point::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Referee_Point::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Referee_Point::~Referee_Point() {
  // @@protoc_insertion_point(destructor:Referee.Point)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Referee_Point::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Referee_Point::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              Referee_Point::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_._cached_size_),
              false,
          },
          &Referee_Point::MergeImpl,
          &Referee_Point::kDescriptorMethods,
          &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Referee_Point::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Referee_Point_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Referee_Point>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.y_)}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.Point)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Referee_Point::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.Point)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.Point)
  return target;
}

::size_t Referee_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.Point)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // required float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 5;
    }

    // required float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Referee_Point::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Referee_Point*>(&to_msg);
  auto& from = static_cast<const Referee_Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Referee_Point::CopyFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Referee_Point::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Referee_Point&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Referee_Point::InternalSwap(Referee_Point* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.y_)
      + sizeof(Referee_Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Referee_Point::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Referee::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Referee>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Referee, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ac) ^ 0x000007ac) != 0;
  }
};

void Referee::clear_game_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_events_.Clear();
}
Referee::Referee(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Referee)
}
inline PROTOBUF_NDEBUG_INLINE Referee::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Referee& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        game_events_{visibility, arena, from.game_events_},
        game_event_proposals_{visibility, arena, from.game_event_proposals_},
        source_identifier_(arena, from.source_identifier_),
        status_message_(arena, from.status_message_) {}

Referee::Referee(
    ::google::protobuf::Arena* arena,
    const Referee& from)
    : ::google::protobuf::Message(arena) {
  Referee* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.yellow_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Referee_TeamInfo>(
                              arena, *from._impl_.yellow_)
                        : nullptr;
  _impl_.blue_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::Referee_TeamInfo>(
                              arena, *from._impl_.blue_)
                        : nullptr;
  _impl_.designated_position_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::Referee_Point>(
                              arena, *from._impl_.designated_position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packet_timestamp_),
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, packet_timestamp_) +
               sizeof(Impl_::match_type_));

  // @@protoc_insertion_point(copy_constructor:Referee)
}
inline PROTOBUF_NDEBUG_INLINE Referee::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        game_events_{visibility, arena},
        game_event_proposals_{visibility, arena},
        source_identifier_(arena),
        status_message_(arena) {}

inline void Referee::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, yellow_),
           0,
           offsetof(Impl_, match_type_) -
               offsetof(Impl_, yellow_) +
               sizeof(Impl_::match_type_));
}
Referee::~Referee() {
  // @@protoc_insertion_point(destructor:Referee)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Referee::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_identifier_.Destroy();
  _impl_.status_message_.Destroy();
  delete _impl_.yellow_;
  delete _impl_.blue_;
  delete _impl_.designated_position_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Referee::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              Referee::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(Referee, _impl_._cached_size_),
              false,
          },
          &Referee::MergeImpl,
          &Referee::kDescriptorMethods,
          &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 9, 63, 2> Referee::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Referee, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293932032,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Referee_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Referee>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint64 packet_timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Referee, _impl_.packet_timestamp_), 5>(),
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.packet_timestamp_)}},
    // required .Referee.Stage stage = 2;
    {::_pbi::TcParser::FastEr0S1,
     {16, 7, 13, PROTOBUF_FIELD_OFFSET(Referee, _impl_.stage_)}},
    // optional sint64 stage_time_left = 3;
    {::_pbi::TcParser::FastZ64S1,
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.stage_time_left_)}},
    // required .Referee.Command command = 4;
    {::_pbi::TcParser::FastEr0S1,
     {32, 8, 17, PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_)}},
    // required uint32 command_counter = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Referee, _impl_.command_counter_), 10>(),
     {40, 10, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_counter_)}},
    // required uint64 command_timestamp = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Referee, _impl_.command_timestamp_), 9>(),
     {48, 9, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_timestamp_)}},
    // required .Referee.TeamInfo yellow = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.yellow_)}},
    // required .Referee.TeamInfo blue = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 1, PROTOBUF_FIELD_OFFSET(Referee, _impl_.blue_)}},
    // optional .Referee.Point designated_position = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 2, PROTOBUF_FIELD_OFFSET(Referee, _impl_.designated_position_)}},
    // optional bool blue_team_on_positive_half = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Referee, _impl_.blue_team_on_positive_half_), 11>(),
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.blue_team_on_positive_half_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .Referee.Command next_command = 12;
    {::_pbi::TcParser::FastEr0S1,
     {96, 13, 17, PROTOBUF_FIELD_OFFSET(Referee, _impl_.next_command_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int64 current_action_time_remaining = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Referee, _impl_.current_action_time_remaining_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.current_action_time_remaining_)}},
    // repeated .GameEvent game_events = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 3, PROTOBUF_FIELD_OFFSET(Referee, _impl_.game_events_)}},
    // repeated .GameEventProposalGroup game_event_proposals = 17;
    {::_pbi::TcParser::FastMtR2,
     {394, 63, 4, PROTOBUF_FIELD_OFFSET(Referee, _impl_.game_event_proposals_)}},
    // optional string source_identifier = 18;
    {::_pbi::TcParser::FastSS2,
     {402, 0, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.source_identifier_)}},
    // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
    {::_pbi::TcParser::FastEr0S2,
     {408, 14, 3, PROTOBUF_FIELD_OFFSET(Referee, _impl_.match_type_)}},
    // optional string status_message = 20;
    {::_pbi::TcParser::FastSS2,
     {418, 1, 0, PROTOBUF_FIELD_OFFSET(Referee, _impl_.status_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint64 packet_timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.packet_timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required .Referee.Stage stage = 2;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.stage_), _Internal::kHasBitsOffset + 7, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional sint64 stage_time_left = 3;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.stage_time_left_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kSInt64)},
    // required .Referee.Command command = 4;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_), _Internal::kHasBitsOffset + 8, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required uint32 command_counter = 5;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_counter_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint64 command_timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.command_timestamp_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // required .Referee.TeamInfo yellow = 7;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.yellow_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required .Referee.TeamInfo blue = 8;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.blue_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Referee.Point designated_position = 9;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.designated_position_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool blue_team_on_positive_half = 10;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.blue_team_on_positive_half_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .Referee.Command next_command = 12;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.next_command_), _Internal::kHasBitsOffset + 13, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int64 current_action_time_remaining = 15;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.current_action_time_remaining_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // repeated .GameEvent game_events = 16;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.game_events_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .GameEventProposalGroup game_event_proposals = 17;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.game_event_proposals_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string source_identifier = 18;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.source_identifier_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.match_type_), _Internal::kHasBitsOffset + 14, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string status_message = 20;
    {PROTOBUF_FIELD_OFFSET(Referee, _impl_.status_message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Referee_TeamInfo>()},
    {::_pbi::TcParser::GetTable<::Referee_TeamInfo>()},
    {::_pbi::TcParser::GetTable<::Referee_Point>()},
    {::_pbi::TcParser::GetTable<::GameEvent>()},
    {::_pbi::TcParser::GetTable<::GameEventProposalGroup>()},
    {0, 14},
    {0, 18},
    {0, 18},
    {0, 4},
  }}, {{
    "\7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0\16\0\0\0\0\0\0"
    "Referee"
    "source_identifier"
    "status_message"
  }},
};

PROTOBUF_NOINLINE void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_events_.Clear();
  _impl_.game_event_proposals_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.status_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.yellow_ != nullptr);
      _impl_.yellow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.blue_ != nullptr);
      _impl_.blue_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.designated_position_ != nullptr);
      _impl_.designated_position_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.packet_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.stage_) -
        reinterpret_cast<char*>(&_impl_.packet_timestamp_)) + sizeof(_impl_.stage_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.command_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.match_type_) -
        reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.match_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Referee::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_packet_timestamp(), target);
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_stage(), target);
  }

  // optional sint64 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_stage_time_left(), target);
  }

  // required .Referee.Command command = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_command_timestamp(), target);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *_impl_.yellow_, _impl_.yellow_->GetCachedSize(), target, stream);
  }

  // required .Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *_impl_.blue_, _impl_.blue_->GetCachedSize(), target, stream);
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *_impl_.designated_position_, _impl_.designated_position_->GetCachedSize(), target, stream);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_blue_team_on_positive_half(), target);
  }

  // optional .Referee.Command next_command = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        12, this->_internal_next_command(), target);
  }

  // optional int64 current_action_time_remaining = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<15>(
            stream, this->_internal_current_action_time_remaining(), target);
  }

  // repeated .GameEvent game_events = 16;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_game_events_size());
       i < n; i++) {
    const auto& repfield = this->_internal_game_events().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            16, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_game_event_proposals_size());
       i < n; i++) {
    const auto& repfield = this->_internal_game_event_proposals().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            17, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional string source_identifier = 18;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_source_identifier();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "Referee.source_identifier");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        19, this->_internal_match_type(), target);
  }

  // optional string status_message = 20;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_status_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "Referee.status_message");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee)
  return target;
}

::size_t Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .GameEvent game_events = 16;
  total_size += 2UL * this->_internal_game_events_size();
  for (const auto& msg : this->_internal_game_events()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .GameEventProposalGroup game_event_proposals = 17;
  total_size += 2UL * this->_internal_game_event_proposals_size();
  for (const auto& msg : this->_internal_game_event_proposals()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_identifier = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_source_identifier());
    }

    // optional string status_message = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_status_message());
    }

  }
  if (cached_has_bits & 0x0000000cu) {
    // required .Referee.TeamInfo yellow = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.yellow_);
    }

    // required .Referee.TeamInfo blue = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.blue_);
    }

  }
  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.designated_position_);
  }

  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_packet_timestamp());
  }

  // optional sint64 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_stage_time_left());
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (cached_has_bits & 0x00000700u) {
    // required .Referee.Command command = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
    }

    // required uint64 command_timestamp = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_command_timestamp());
    }

    // required uint32 command_counter = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_command_counter());
    }

  }
  if (cached_has_bits & 0x00007800u) {
    // optional bool blue_team_on_positive_half = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional int64 current_action_time_remaining = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_current_action_time_remaining());
    }

    // optional .Referee.Command next_command = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_next_command());
    }

    // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Referee::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Referee*>(&to_msg);
  auto& from = static_cast<const Referee&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_game_events()->MergeFrom(
      from._internal_game_events());
  _this->_internal_mutable_game_event_proposals()->MergeFrom(
      from._internal_game_event_proposals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_identifier(from._internal_source_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_status_message(from._internal_status_message());
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.yellow_ != nullptr);
      if (_this->_impl_.yellow_ == nullptr) {
        _this->_impl_.yellow_ =
            ::google::protobuf::Message::CopyConstruct<::Referee_TeamInfo>(arena, *from._impl_.yellow_);
      } else {
        _this->_impl_.yellow_->MergeFrom(*from._impl_.yellow_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.blue_ != nullptr);
      if (_this->_impl_.blue_ == nullptr) {
        _this->_impl_.blue_ =
            ::google::protobuf::Message::CopyConstruct<::Referee_TeamInfo>(arena, *from._impl_.blue_);
      } else {
        _this->_impl_.blue_->MergeFrom(*from._impl_.blue_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.designated_position_ != nullptr);
      if (_this->_impl_.designated_position_ == nullptr) {
        _this->_impl_.designated_position_ =
            ::google::protobuf::Message::CopyConstruct<::Referee_Point>(arena, *from._impl_.designated_position_);
      } else {
        _this->_impl_.designated_position_->MergeFrom(*from._impl_.designated_position_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packet_timestamp_ = from._impl_.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.stage_time_left_ = from._impl_.stage_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.stage_ = from._impl_.stage_;
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.command_timestamp_ = from._impl_.command_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.command_counter_ = from._impl_.command_counter_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.blue_team_on_positive_half_ = from._impl_.blue_team_on_positive_half_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.current_action_time_remaining_ = from._impl_.current_action_time_remaining_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.next_command_ = from._impl_.next_command_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Referee::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Referee&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_game_events()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_game_event_proposals()))
    return false;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._impl_.yellow_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._impl_.blue_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._impl_.designated_position_->IsInitialized()) return false;
  }
  return true;
}

void Referee::InternalSwap(Referee* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_events_.InternalSwap(&other->_impl_.game_events_);
  _impl_.game_event_proposals_.InternalSwap(&other->_impl_.game_event_proposals_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_identifier_, &other->_impl_.source_identifier_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_message_, &other->_impl_.status_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee, _impl_.match_type_)
      + sizeof(Referee::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(Referee, _impl_.yellow_)>(
          reinterpret_cast<char*>(&_impl_.yellow_),
          reinterpret_cast<char*>(&other->_impl_.yellow_));
}

::google::protobuf::Metadata Referee::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEventProposalGroup::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEventProposalGroup>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_._has_bits_);
};

void GameEventProposalGroup::clear_game_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_events_.Clear();
}
GameEventProposalGroup::GameEventProposalGroup(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEventProposalGroup)
}
inline PROTOBUF_NDEBUG_INLINE GameEventProposalGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEventProposalGroup& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        game_events_{visibility, arena, from.game_events_},
        id_(arena, from.id_) {}

GameEventProposalGroup::GameEventProposalGroup(
    ::google::protobuf::Arena* arena,
    const GameEventProposalGroup& from)
    : ::google::protobuf::Message(arena) {
  GameEventProposalGroup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.accepted_ = from._impl_.accepted_;

  // @@protoc_insertion_point(copy_constructor:GameEventProposalGroup)
}
inline PROTOBUF_NDEBUG_INLINE GameEventProposalGroup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        game_events_{visibility, arena},
        id_(arena) {}

inline void GameEventProposalGroup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.accepted_ = {};
}
GameEventProposalGroup::~GameEventProposalGroup() {
  // @@protoc_insertion_point(destructor:GameEventProposalGroup)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEventProposalGroup::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
GameEventProposalGroup::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              GameEventProposalGroup::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_._cached_size_),
              false,
          },
          &GameEventProposalGroup::MergeImpl,
          &GameEventProposalGroup::kDescriptorMethods,
          &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 33, 2> GameEventProposalGroup::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameEventProposalGroup_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEventProposalGroup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .GameEvent game_events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.game_events_)}},
    // optional bool accepted = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameEventProposalGroup, _impl_.accepted_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.accepted_)}},
    // optional string id = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .GameEvent game_events = 1;
    {PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.game_events_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool accepted = 2;
    {PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.accepted_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string id = 3;
    {PROTOBUF_FIELD_OFFSET(GameEventProposalGroup, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::GameEvent>()},
  }}, {{
    "\26\0\0\2\0\0\0\0"
    "GameEventProposalGroup"
    "id"
  }},
};

PROTOBUF_NOINLINE void GameEventProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEventProposalGroup)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.accepted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* GameEventProposalGroup::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEventProposalGroup)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .GameEvent game_events = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_game_events_size());
       i < n; i++) {
    const auto& repfield = this->_internal_game_events().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_accepted(), target);
  }

  // optional string id = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "GameEventProposalGroup.id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEventProposalGroup)
  return target;
}

::size_t GameEventProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEventProposalGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .GameEvent game_events = 1;
  total_size += 1UL * this->_internal_game_events_size();
  for (const auto& msg : this->_internal_game_events()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_id());
    }

    // optional bool accepted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void GameEventProposalGroup::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEventProposalGroup*>(&to_msg);
  auto& from = static_cast<const GameEventProposalGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEventProposalGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_game_events()->MergeFrom(
      from._internal_game_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accepted_ = from._impl_.accepted_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEventProposalGroup::CopyFrom(const GameEventProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEventProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEventProposalGroup::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEventProposalGroup&>(msg);
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_game_events()))
    return false;
  return true;
}

void GameEventProposalGroup::InternalSwap(GameEventProposalGroup* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_events_.InternalSwap(&other->_impl_.game_events_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
        swap(_impl_.accepted_, other->_impl_.accepted_);
}

::google::protobuf::Metadata GameEventProposalGroup::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
