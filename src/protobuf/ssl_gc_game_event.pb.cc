// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_gc_game_event.proto
// Protobuf C++ Version: 5.29.0-dev

#include "ssl_gc_game_event.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr GameEvent_UnsportingBehaviorMinor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_UnsportingBehaviorMinorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMinorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_UnsportingBehaviorMinorDefaultTypeInternal() {}
  union {
    GameEvent_UnsportingBehaviorMinor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_UnsportingBehaviorMinorDefaultTypeInternal _GameEvent_UnsportingBehaviorMinor_default_instance_;

inline constexpr GameEvent_UnsportingBehaviorMajor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_UnsportingBehaviorMajorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMajorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_UnsportingBehaviorMajorDefaultTypeInternal() {}
  union {
    GameEvent_UnsportingBehaviorMajor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_UnsportingBehaviorMajorDefaultTypeInternal _GameEvent_UnsportingBehaviorMajor_default_instance_;

inline constexpr GameEvent_Prepared::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_taken_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_Prepared::GameEvent_Prepared(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_PreparedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PreparedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PreparedDefaultTypeInternal() {}
  union {
    GameEvent_Prepared _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PreparedDefaultTypeInternal _GameEvent_Prepared_default_instance_;

inline constexpr GameEvent_PlacementSucceeded::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)},
        time_taken_{0},
        precision_{0},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_PlacementSucceededDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PlacementSucceededDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PlacementSucceededDefaultTypeInternal() {}
  union {
    GameEvent_PlacementSucceeded _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PlacementSucceededDefaultTypeInternal _GameEvent_PlacementSucceeded_default_instance_;

inline constexpr GameEvent_PlacementFailed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)},
        remaining_distance_{0},
        nearest_own_bot_distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_PlacementFailed::GameEvent_PlacementFailed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_PlacementFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PlacementFailedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PlacementFailedDefaultTypeInternal() {}
  union {
    GameEvent_PlacementFailed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PlacementFailedDefaultTypeInternal _GameEvent_PlacementFailed_default_instance_;

inline constexpr GameEvent_MultiplePlacementFailures::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_MultiplePlacementFailuresDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultiplePlacementFailuresDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultiplePlacementFailuresDefaultTypeInternal() {}
  union {
    GameEvent_MultiplePlacementFailures _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultiplePlacementFailuresDefaultTypeInternal _GameEvent_MultiplePlacementFailures_default_instance_;

inline constexpr GameEvent_MultipleCards::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_MultipleCards::GameEvent_MultipleCards(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_MultipleCardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultipleCardsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultipleCardsDefaultTypeInternal() {}
  union {
    GameEvent_MultipleCards _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultipleCardsDefaultTypeInternal _GameEvent_MultipleCards_default_instance_;

inline constexpr GameEvent_ExcessiveBotSubstitution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_ExcessiveBotSubstitution::GameEvent_ExcessiveBotSubstitution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal() {}
  union {
    GameEvent_ExcessiveBotSubstitution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal _GameEvent_ExcessiveBotSubstitution_default_instance_;

inline constexpr GameEvent_EmergencyStop::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_EmergencyStop::GameEvent_EmergencyStop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_EmergencyStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_EmergencyStopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_EmergencyStopDefaultTypeInternal() {}
  union {
    GameEvent_EmergencyStop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_EmergencyStopDefaultTypeInternal _GameEvent_EmergencyStop_default_instance_;

inline constexpr GameEvent_ChallengeFlagHandled::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)},
        accepted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_ChallengeFlagHandled::GameEvent_ChallengeFlagHandled(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_ChallengeFlagHandledDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ChallengeFlagHandledDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ChallengeFlagHandledDefaultTypeInternal() {}
  union {
    GameEvent_ChallengeFlagHandled _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ChallengeFlagHandledDefaultTypeInternal _GameEvent_ChallengeFlagHandled_default_instance_;

inline constexpr GameEvent_ChallengeFlag::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_ChallengeFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ChallengeFlagDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ChallengeFlagDefaultTypeInternal() {}
  union {
    GameEvent_ChallengeFlag _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ChallengeFlagDefaultTypeInternal _GameEvent_ChallengeFlag_default_instance_;

inline constexpr GameEvent_BotSubstitution::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotSubstitution::GameEvent_BotSubstitution(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotSubstitutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotSubstitutionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotSubstitutionDefaultTypeInternal() {}
  union {
    GameEvent_BotSubstitution _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotSubstitutionDefaultTypeInternal _GameEvent_BotSubstitution_default_instance_;

inline constexpr GameEvent_TooManyRobots::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ball_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        num_robots_allowed_{0},
        num_robots_on_field_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_TooManyRobots::GameEvent_TooManyRobots(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_TooManyRobotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_TooManyRobotsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_TooManyRobotsDefaultTypeInternal() {}
  union {
    GameEvent_TooManyRobots _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_TooManyRobotsDefaultTypeInternal _GameEvent_TooManyRobots_default_instance_;

inline constexpr GameEvent_PenaltyKickFailed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_PenaltyKickFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PenaltyKickFailedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PenaltyKickFailedDefaultTypeInternal() {}
  union {
    GameEvent_PenaltyKickFailed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PenaltyKickFailedDefaultTypeInternal _GameEvent_PenaltyKickFailed_default_instance_;

inline constexpr GameEvent_NoProgressInGame::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_NoProgressInGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_NoProgressInGameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_NoProgressInGameDefaultTypeInternal() {}
  union {
    GameEvent_NoProgressInGame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_NoProgressInGameDefaultTypeInternal _GameEvent_NoProgressInGame_default_instance_;

inline constexpr GameEvent_KickTimeout::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_KickTimeout::GameEvent_KickTimeout(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_KickTimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_KickTimeoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_KickTimeoutDefaultTypeInternal() {}
  union {
    GameEvent_KickTimeout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_KickTimeoutDefaultTypeInternal _GameEvent_KickTimeout_default_instance_;

inline constexpr GameEvent_KeeperHeldBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        duration_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_KeeperHeldBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_KeeperHeldBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_KeeperHeldBallDefaultTypeInternal() {}
  union {
    GameEvent_KeeperHeldBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_KeeperHeldBallDefaultTypeInternal _GameEvent_KeeperHeldBall_default_instance_;

inline constexpr GameEvent_IndirectGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        kick_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_IndirectGoal::GameEvent_IndirectGoal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_IndirectGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_IndirectGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_IndirectGoalDefaultTypeInternal() {}
  union {
    GameEvent_IndirectGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_IndirectGoalDefaultTypeInternal _GameEvent_IndirectGoal_default_instance_;

inline constexpr GameEvent_Goal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_{nullptr},
        kick_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        kicking_bot_{0u},
        max_ball_height_{0},
        kicking_team_{static_cast< ::Team >(0)},
        last_touch_by_team_{::uint64_t{0u}},
        num_robots_by_team_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_Goal::GameEvent_Goal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_GoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_GoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_GoalDefaultTypeInternal() {}
  union {
    GameEvent_Goal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_GoalDefaultTypeInternal _GameEvent_Goal_default_instance_;

inline constexpr GameEvent_DefenderTooCloseToKickPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal() {}
  union {
    GameEvent_DefenderTooCloseToKickPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal _GameEvent_DefenderTooCloseToKickPoint_default_instance_;

inline constexpr GameEvent_DefenderInDefenseAreaPartially::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        ball_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal() {}
  union {
    GameEvent_DefenderInDefenseAreaPartially _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal _GameEvent_DefenderInDefenseAreaPartially_default_instance_;

inline constexpr GameEvent_DefenderInDefenseArea::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_DefenderInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_DefenderInDefenseArea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderInDefenseAreaDefaultTypeInternal _GameEvent_DefenderInDefenseArea_default_instance_;

inline constexpr GameEvent_ChippedGoal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        kick_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        max_ball_height_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_ChippedGoal::GameEvent_ChippedGoal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_ChippedGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ChippedGoalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ChippedGoalDefaultTypeInternal() {}
  union {
    GameEvent_ChippedGoal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ChippedGoalDefaultTypeInternal _GameEvent_ChippedGoal_default_instance_;

inline constexpr GameEvent_BoundaryCrossing::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BoundaryCrossingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BoundaryCrossingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BoundaryCrossingDefaultTypeInternal() {}
  union {
    GameEvent_BoundaryCrossing _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BoundaryCrossingDefaultTypeInternal _GameEvent_BoundaryCrossing_default_instance_;

inline constexpr GameEvent_BotTooFastInStop::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        speed_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotTooFastInStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotTooFastInStopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotTooFastInStopDefaultTypeInternal() {}
  union {
    GameEvent_BotTooFastInStop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotTooFastInStopDefaultTypeInternal _GameEvent_BotTooFastInStop_default_instance_;

inline constexpr GameEvent_BotTippedOver::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        ball_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotTippedOver::GameEvent_BotTippedOver(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotTippedOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotTippedOverDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotTippedOverDefaultTypeInternal() {}
  union {
    GameEvent_BotTippedOver _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotTippedOverDefaultTypeInternal _GameEvent_BotTippedOver_default_instance_;

inline constexpr GameEvent_BotPushedBot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        violator_{0u},
        victim_{0u},
        pushed_distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotPushedBot::GameEvent_BotPushedBot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotPushedBotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotPushedBotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotPushedBotDefaultTypeInternal() {}
  union {
    GameEvent_BotPushedBot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotPushedBotDefaultTypeInternal _GameEvent_BotPushedBot_default_instance_;

inline constexpr GameEvent_BotKickedBallTooFast::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        initial_ball_speed_{0},
        chipped_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotKickedBallTooFastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotKickedBallTooFastDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotKickedBallTooFastDefaultTypeInternal() {}
  union {
    GameEvent_BotKickedBallTooFast _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotKickedBallTooFastDefaultTypeInternal _GameEvent_BotKickedBallTooFast_default_instance_;

inline constexpr GameEvent_BotInterferedPlacement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotInterferedPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotInterferedPlacementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotInterferedPlacementDefaultTypeInternal() {}
  union {
    GameEvent_BotInterferedPlacement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotInterferedPlacementDefaultTypeInternal _GameEvent_BotInterferedPlacement_default_instance_;

inline constexpr GameEvent_BotHeldBallDeliberately::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        duration_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal() {}
  union {
    GameEvent_BotHeldBallDeliberately _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal _GameEvent_BotHeldBallDeliberately_default_instance_;

inline constexpr GameEvent_BotDroppedParts::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        ball_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotDroppedParts::GameEvent_BotDroppedParts(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotDroppedPartsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotDroppedPartsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotDroppedPartsDefaultTypeInternal() {}
  union {
    GameEvent_BotDroppedParts _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotDroppedPartsDefaultTypeInternal _GameEvent_BotDroppedParts_default_instance_;

inline constexpr GameEvent_BotDribbledBallTooFar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_{nullptr},
        end_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotDribbledBallTooFarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotDribbledBallTooFarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotDribbledBallTooFarDefaultTypeInternal() {}
  union {
    GameEvent_BotDribbledBallTooFar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotDribbledBallTooFarDefaultTypeInternal _GameEvent_BotDribbledBallTooFar_default_instance_;

inline constexpr GameEvent_BotCrashUnique::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        violator_{0u},
        victim_{0u},
        crash_speed_{0},
        speed_diff_{0},
        crash_angle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotCrashUniqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotCrashUniqueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotCrashUniqueDefaultTypeInternal() {}
  union {
    GameEvent_BotCrashUnique _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotCrashUniqueDefaultTypeInternal _GameEvent_BotCrashUnique_default_instance_;

inline constexpr GameEvent_BotCrashDrawn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        bot_yellow_{0u},
        bot_blue_{0u},
        crash_speed_{0},
        speed_diff_{0},
        crash_angle_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BotCrashDrawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotCrashDrawnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotCrashDrawnDefaultTypeInternal() {}
  union {
    GameEvent_BotCrashDrawn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotCrashDrawnDefaultTypeInternal _GameEvent_BotCrashDrawn_default_instance_;

inline constexpr GameEvent_BallLeftField::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_BallLeftField::GameEvent_BallLeftField(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_BallLeftFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BallLeftFieldDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BallLeftFieldDefaultTypeInternal() {}
  union {
    GameEvent_BallLeftField _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BallLeftFieldDefaultTypeInternal _GameEvent_BallLeftField_default_instance_;

inline constexpr GameEvent_AttackerTouchedOpponentInDefenseArea::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        victim_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTouchedOpponentInDefenseArea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;

inline constexpr GameEvent_AttackerTouchedBallInDefenseArea::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTouchedBallInDefenseArea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;

inline constexpr GameEvent_AttackerTooCloseToDefenseArea::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        ball_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u},
        distance_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTooCloseToDefenseArea _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;

inline constexpr GameEvent_AttackerDoubleTouchedBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal() {}
  union {
    GameEvent_AttackerDoubleTouchedBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal _GameEvent_AttackerDoubleTouchedBall_default_instance_;

inline constexpr GameEvent_AimlessKick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        location_{nullptr},
        kick_location_{nullptr},
        by_team_{static_cast< ::Team >(0)},
        by_bot_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_AimlessKick::GameEvent_AimlessKick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_AimlessKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AimlessKickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AimlessKickDefaultTypeInternal() {}
  union {
    GameEvent_AimlessKick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AimlessKickDefaultTypeInternal _GameEvent_AimlessKick_default_instance_;

inline constexpr GameEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        origin_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_timestamp_{::uint64_t{0u}},
        type_{static_cast< ::GameEvent_Type >(0)},
        event_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent::GameEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEventDefaultTypeInternal() {}
  union {
    GameEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEventDefaultTypeInternal _GameEvent_default_instance_;

inline constexpr GameEvent_MultipleFouls::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        caused_game_events_{},
        by_team_{static_cast< ::Team >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent_MultipleFouls::GameEvent_MultipleFouls(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEvent_MultipleFoulsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultipleFoulsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultipleFoulsDefaultTypeInternal() {}
  union {
    GameEvent_MultipleFouls _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultipleFoulsDefaultTypeInternal _GameEvent_MultipleFouls_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto = nullptr;
const ::uint32_t
    TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.location_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.kick_location_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kicking_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kicking_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kick_location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.max_ball_height_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.num_robots_by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.last_touch_by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.message_),
        3,
        6,
        4,
        1,
        2,
        5,
        8,
        7,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.kick_location_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.kick_location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.max_ball_height_),
        2,
        3,
        0,
        1,
        4,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.speed_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.bot_yellow_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.bot_blue_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.crash_speed_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.speed_diff_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.crash_angle_),
        1,
        2,
        0,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.violator_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.victim_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.crash_speed_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.speed_diff_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.crash_angle_),
        1,
        2,
        3,
        0,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.violator_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.victim_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.pushed_distance_),
        1,
        2,
        3,
        0,
        4,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.ball_location_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDroppedParts, _impl_.ball_location_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.distance_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.ball_location_),
        2,
        3,
        0,
        4,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.initial_ball_speed_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.chipped_),
        1,
        2,
        0,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.start_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.end_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_),
        1,
        2,
        3,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.location_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.ball_location_),
        2,
        3,
        0,
        4,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.duration_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.by_bot_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.location_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_.caused_game_events_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.time_),
        1,
        0,
        2,
        PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_.time_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_.remaining_distance_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_.nearest_own_bot_distance_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_.reason_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_.reason_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.duration_),
        1,
        0,
        2,
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.time_taken_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.precision_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.distance_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _impl_.time_taken_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_ExcessiveBotSubstitution, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlagHandled, _impl_.accepted_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _impl_.by_team_),
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.num_robots_allowed_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.num_robots_on_field_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.ball_location_),
        1,
        2,
        3,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_.location_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_.by_team_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_.location_),
        PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_.reason_),
        2,
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::GameEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.origin_),
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.created_timestamp_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.event_),
        0,
        2,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::GameEvent_BallLeftField)},
        {14, 26, -1, sizeof(::GameEvent_AimlessKick)},
        {30, 47, -1, sizeof(::GameEvent_Goal)},
        {56, 68, -1, sizeof(::GameEvent_IndirectGoal)},
        {72, 85, -1, sizeof(::GameEvent_ChippedGoal)},
        {90, 102, -1, sizeof(::GameEvent_BotTooFastInStop)},
        {106, 118, -1, sizeof(::GameEvent_DefenderTooCloseToKickPoint)},
        {122, 136, -1, sizeof(::GameEvent_BotCrashDrawn)},
        {142, 157, -1, sizeof(::GameEvent_BotCrashUnique)},
        {164, 177, -1, sizeof(::GameEvent_BotPushedBot)},
        {182, 194, -1, sizeof(::GameEvent_BotTippedOver)},
        {198, 210, -1, sizeof(::GameEvent_BotDroppedParts)},
        {214, 226, -1, sizeof(::GameEvent_DefenderInDefenseArea)},
        {230, 243, -1, sizeof(::GameEvent_DefenderInDefenseAreaPartially)},
        {248, 260, -1, sizeof(::GameEvent_AttackerTouchedBallInDefenseArea)},
        {264, 277, -1, sizeof(::GameEvent_BotKickedBallTooFast)},
        {282, 294, -1, sizeof(::GameEvent_BotDribbledBallTooFar)},
        {298, 310, -1, sizeof(::GameEvent_AttackerTouchedOpponentInDefenseArea)},
        {314, 325, -1, sizeof(::GameEvent_AttackerDoubleTouchedBall)},
        {328, 341, -1, sizeof(::GameEvent_AttackerTooCloseToDefenseArea)},
        {346, 358, -1, sizeof(::GameEvent_BotHeldBallDeliberately)},
        {362, 373, -1, sizeof(::GameEvent_BotInterferedPlacement)},
        {376, 385, -1, sizeof(::GameEvent_MultipleCards)},
        {386, 396, -1, sizeof(::GameEvent_MultipleFouls)},
        {398, 407, -1, sizeof(::GameEvent_MultiplePlacementFailures)},
        {408, 419, -1, sizeof(::GameEvent_KickTimeout)},
        {422, 432, -1, sizeof(::GameEvent_NoProgressInGame)},
        {434, 445, -1, sizeof(::GameEvent_PlacementFailed)},
        {448, 458, -1, sizeof(::GameEvent_UnsportingBehaviorMinor)},
        {460, 470, -1, sizeof(::GameEvent_UnsportingBehaviorMajor)},
        {472, 483, -1, sizeof(::GameEvent_KeeperHeldBall)},
        {486, 498, -1, sizeof(::GameEvent_PlacementSucceeded)},
        {502, 511, -1, sizeof(::GameEvent_Prepared)},
        {512, 521, -1, sizeof(::GameEvent_BotSubstitution)},
        {522, 531, -1, sizeof(::GameEvent_ExcessiveBotSubstitution)},
        {532, 541, -1, sizeof(::GameEvent_ChallengeFlag)},
        {542, 552, -1, sizeof(::GameEvent_ChallengeFlagHandled)},
        {554, 563, -1, sizeof(::GameEvent_EmergencyStop)},
        {564, 576, -1, sizeof(::GameEvent_TooManyRobots)},
        {580, 590, -1, sizeof(::GameEvent_BoundaryCrossing)},
        {592, 603, -1, sizeof(::GameEvent_PenaltyKickFailed)},
        {606, 666, -1, sizeof(::GameEvent)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_GameEvent_BallLeftField_default_instance_._instance,
    &::_GameEvent_AimlessKick_default_instance_._instance,
    &::_GameEvent_Goal_default_instance_._instance,
    &::_GameEvent_IndirectGoal_default_instance_._instance,
    &::_GameEvent_ChippedGoal_default_instance_._instance,
    &::_GameEvent_BotTooFastInStop_default_instance_._instance,
    &::_GameEvent_DefenderTooCloseToKickPoint_default_instance_._instance,
    &::_GameEvent_BotCrashDrawn_default_instance_._instance,
    &::_GameEvent_BotCrashUnique_default_instance_._instance,
    &::_GameEvent_BotPushedBot_default_instance_._instance,
    &::_GameEvent_BotTippedOver_default_instance_._instance,
    &::_GameEvent_BotDroppedParts_default_instance_._instance,
    &::_GameEvent_DefenderInDefenseArea_default_instance_._instance,
    &::_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance,
    &::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_._instance,
    &::_GameEvent_BotKickedBallTooFast_default_instance_._instance,
    &::_GameEvent_BotDribbledBallTooFar_default_instance_._instance,
    &::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_._instance,
    &::_GameEvent_AttackerDoubleTouchedBall_default_instance_._instance,
    &::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance,
    &::_GameEvent_BotHeldBallDeliberately_default_instance_._instance,
    &::_GameEvent_BotInterferedPlacement_default_instance_._instance,
    &::_GameEvent_MultipleCards_default_instance_._instance,
    &::_GameEvent_MultipleFouls_default_instance_._instance,
    &::_GameEvent_MultiplePlacementFailures_default_instance_._instance,
    &::_GameEvent_KickTimeout_default_instance_._instance,
    &::_GameEvent_NoProgressInGame_default_instance_._instance,
    &::_GameEvent_PlacementFailed_default_instance_._instance,
    &::_GameEvent_UnsportingBehaviorMinor_default_instance_._instance,
    &::_GameEvent_UnsportingBehaviorMajor_default_instance_._instance,
    &::_GameEvent_KeeperHeldBall_default_instance_._instance,
    &::_GameEvent_PlacementSucceeded_default_instance_._instance,
    &::_GameEvent_Prepared_default_instance_._instance,
    &::_GameEvent_BotSubstitution_default_instance_._instance,
    &::_GameEvent_ExcessiveBotSubstitution_default_instance_._instance,
    &::_GameEvent_ChallengeFlag_default_instance_._instance,
    &::_GameEvent_ChallengeFlagHandled_default_instance_._instance,
    &::_GameEvent_EmergencyStop_default_instance_._instance,
    &::_GameEvent_TooManyRobots_default_instance_._instance,
    &::_GameEvent_BoundaryCrossing_default_instance_._instance,
    &::_GameEvent_PenaltyKickFailed_default_instance_._instance,
    &::_GameEvent_default_instance_._instance,
};
const char descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\027ssl_gc_game_event.proto\032\023ssl_gc_common"
    ".proto\032\025ssl_gc_geometry.proto\"\205C\n\tGameEv"
    "ent\022\n\n\002id\0302 \001(\t\022\035\n\004type\030( \001(\0162\017.GameEven"
    "t.Type\022\016\n\006origin\030) \003(\t\022\031\n\021created_timest"
    "amp\0301 \001(\004\022>\n\032ball_left_field_touch_line\030"
    "\006 \001(\0132\030.GameEvent.BallLeftFieldH\000\022=\n\031bal"
    "l_left_field_goal_line\030\007 \001(\0132\030.GameEvent"
    ".BallLeftFieldH\000\022.\n\014aimless_kick\030\013 \001(\0132\026"
    ".GameEvent.AimlessKickH\000\022V\n\"attacker_too"
    "_close_to_defense_area\030\023 \001(\0132(.GameEvent"
    ".AttackerTooCloseToDefenseAreaH\000\022D\n\030defe"
    "nder_in_defense_area\030\037 \001(\0132 .GameEvent.D"
    "efenderInDefenseAreaH\000\0228\n\021boundary_cross"
    "ing\030+ \001(\0132\033.GameEvent.BoundaryCrossingH\000"
    "\0225\n\020keeper_held_ball\030\r \001(\0132\031.GameEvent.K"
    "eeperHeldBallH\000\022E\n\031bot_dribbled_ball_too"
    "_far\030\021 \001(\0132 .GameEvent.BotDribbledBallTo"
    "oFarH\000\0221\n\016bot_pushed_bot\030\030 \001(\0132\027.GameEve"
    "nt.BotPushedBotH\000\022H\n\032bot_held_ball_delib"
    "erately\030\032 \001(\0132\".GameEvent.BotHeldBallDel"
    "iberatelyH\000\0223\n\017bot_tipped_over\030\033 \001(\0132\030.G"
    "ameEvent.BotTippedOverH\000\0227\n\021bot_dropped_"
    "parts\0303 \001(\0132\032.GameEvent.BotDroppedPartsH"
    "\000\022\\\n%attacker_touched_ball_in_defense_ar"
    "ea\030\017 \001(\0132+.GameEvent.AttackerTouchedBall"
    "InDefenseAreaH\000\022C\n\030bot_kicked_ball_too_f"
    "ast\030\022 \001(\0132\037.GameEvent.BotKickedBallTooFa"
    "stH\000\0225\n\020bot_crash_unique\030\026 \001(\0132\031.GameEve"
    "nt.BotCrashUniqueH\000\0223\n\017bot_crash_drawn\030\025"
    " \001(\0132\030.GameEvent.BotCrashDrawnH\000\022R\n defe"
    "nder_too_close_to_kick_point\030\035 \001(\0132&.Gam"
    "eEvent.DefenderTooCloseToKickPointH\000\022;\n\024"
    "bot_too_fast_in_stop\030\034 \001(\0132\033.GameEvent.B"
    "otTooFastInStopH\000\022E\n\030bot_interfered_plac"
    "ement\030\024 \001(\0132!.GameEvent.BotInterferedPla"
    "cementH\000\022(\n\rpossible_goal\030\' \001(\0132\017.GameEv"
    "ent.GoalH\000\022\037\n\004goal\030\010 \001(\0132\017.GameEvent.Goa"
    "lH\000\022\'\n\014invalid_goal\030, \001(\0132\017.GameEvent.Go"
    "alH\000\022L\n\034attacker_double_touched_ball\030\016 \001"
    "(\0132$.GameEvent.AttackerDoubleTouchedBall"
    "H\000\022<\n\023placement_succeeded\030\005 \001(\0132\035.GameEv"
    "ent.PlacementSucceededH\000\022;\n\023penalty_kick"
    "_failed\030- \001(\0132\034.GameEvent.PenaltyKickFai"
    "ledH\000\022:\n\023no_progress_in_game\030\002 \001(\0132\033.Gam"
    "eEvent.NoProgressInGameH\000\0226\n\020placement_f"
    "ailed\030\003 \001(\0132\032.GameEvent.PlacementFailedH"
    "\000\0222\n\016multiple_cards\030  \001(\0132\030.GameEvent.Mu"
    "ltipleCardsH\000\0222\n\016multiple_fouls\030\" \001(\0132\030."
    "GameEvent.MultipleFoulsH\000\0226\n\020bot_substit"
    "ution\030% \001(\0132\032.GameEvent.BotSubstitutionH"
    "\000\022I\n\032excessive_bot_substitution\0304 \001(\0132#."
    "GameEvent.ExcessiveBotSubstitutionH\000\0223\n\017"
    "too_many_robots\030& \001(\0132\030.GameEvent.TooMan"
    "yRobotsH\000\0222\n\016challenge_flag\030. \001(\0132\030.Game"
    "Event.ChallengeFlagH\000\022A\n\026challenge_flag_"
    "handled\0300 \001(\0132\037.GameEvent.ChallengeFlagH"
    "andledH\000\0222\n\016emergency_stop\030/ \001(\0132\030.GameE"
    "vent.EmergencyStopH\000\022G\n\031unsporting_behav"
    "ior_minor\030# \001(\0132\".GameEvent.UnsportingBe"
    "haviorMinorH\000\022G\n\031unsporting_behavior_maj"
    "or\030$ \001(\0132\".GameEvent.UnsportingBehaviorM"
    "ajorH\000\022+\n\010prepared\030\001 \001(\0132\023.GameEvent.Pre"
    "paredB\002\030\001H\000\0224\n\rindirect_goal\030\t \001(\0132\027.Gam"
    "eEvent.IndirectGoalB\002\030\001H\000\0222\n\014chipped_goa"
    "l\030\n \001(\0132\026.GameEvent.ChippedGoalB\002\030\001H\000\0222\n"
    "\014kick_timeout\030\014 \001(\0132\026.GameEvent.KickTime"
    "outB\002\030\001H\000\022h\n)attacker_touched_opponent_i"
    "n_defense_area\030\020 \001(\0132/.GameEvent.Attacke"
    "rTouchedOpponentInDefenseAreaB\002\030\001H\000\022p\n1a"
    "ttacker_touched_opponent_in_defense_area"
    "_skipped\030* \001(\0132/.GameEvent.AttackerTouch"
    "edOpponentInDefenseAreaB\002\030\001H\000\022A\n\030bot_cra"
    "sh_unique_skipped\030\027 \001(\0132\031.GameEvent.BotC"
    "rashUniqueB\002\030\001H\000\022=\n\026bot_pushed_bot_skipp"
    "ed\030\031 \001(\0132\027.GameEvent.BotPushedBotB\002\030\001H\000\022"
    "[\n\"defender_in_defense_area_partially\030\036 "
    "\001(\0132).GameEvent.DefenderInDefenseAreaPar"
    "tiallyB\002\030\001H\000\022O\n\033multiple_placement_failu"
    "res\030! \001(\0132$.GameEvent.MultiplePlacementF"
    "ailuresB\002\030\001H\000\032S\n\rBallLeftField\022\026\n\007by_tea"
    "m\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010locati"
    "on\030\003 \001(\0132\010.Vector2\032r\n\013AimlessKick\022\026\n\007by_"
    "team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loc"
    "ation\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004"
    " \001(\0132\010.Vector2\032\357\001\n\004Goal\022\026\n\007by_team\030\001 \002(\016"
    "2\005.Team\022\033\n\014kicking_team\030\006 \001(\0162\005.Team\022\023\n\013"
    "kicking_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Ve"
    "ctor2\022\037\n\rkick_location\030\004 \001(\0132\010.Vector2\022\027"
    "\n\017max_ball_height\030\005 \001(\002\022\032\n\022num_robots_by"
    "_team\030\007 \001(\r\022\032\n\022last_touch_by_team\030\010 \001(\004\022"
    "\017\n\007message\030\t \001(\t\032s\n\014IndirectGoal\022\026\n\007by_t"
    "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
    "tion\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004 "
    "\001(\0132\010.Vector2\032\213\001\n\013ChippedGoal\022\026\n\007by_team"
    "\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010locatio"
    "n\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004 \001(\013"
    "2\010.Vector2\022\027\n\017max_ball_height\030\005 \001(\002\032e\n\020B"
    "otTooFastInStop\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
    "\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vect"
    "or2\022\r\n\005speed\030\004 \001(\002\032s\n\033DefenderTooCloseTo"
    "KickPoint\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_"
    "bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n"
    "\010distance\030\004 \001(\002\032\217\001\n\rBotCrashDrawn\022\022\n\nbot"
    "_yellow\030\001 \001(\r\022\020\n\010bot_blue\030\002 \001(\r\022\032\n\010locat"
    "ion\030\003 \001(\0132\010.Vector2\022\023\n\013crash_speed\030\004 \001(\002"
    "\022\022\n\nspeed_diff\030\005 \001(\002\022\023\n\013crash_angle\030\006 \001("
    "\002\032\244\001\n\016BotCrashUnique\022\026\n\007by_team\030\001 \002(\0162\005."
    "Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001(\r\022\032"
    "\n\010location\030\004 \001(\0132\010.Vector2\022\023\n\013crash_spee"
    "d\030\005 \001(\002\022\022\n\nspeed_diff\030\006 \001(\002\022\023\n\013crash_ang"
    "le\030\007 \001(\002\032}\n\014BotPushedBot\022\026\n\007by_team\030\001 \002("
    "\0162\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001"
    "(\r\022\032\n\010location\030\004 \001(\0132\010.Vector2\022\027\n\017pushed"
    "_distance\030\005 \001(\002\032t\n\rBotTippedOver\022\026\n\007by_t"
    "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
    "tion\030\003 \001(\0132\010.Vector2\022\037\n\rball_location\030\004 "
    "\001(\0132\010.Vector2\032v\n\017BotDroppedParts\022\026\n\007by_t"
    "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
    "tion\030\003 \001(\0132\010.Vector2\022\037\n\rball_location\030\004 "
    "\001(\0132\010.Vector2\032m\n\025DefenderInDefenseArea\022\026"
    "\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032"
    "\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004"
    " \001(\002\032\227\001\n\036DefenderInDefenseAreaPartially\022"
    "\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022"
    "\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030"
    "\004 \001(\002\022\037\n\rball_location\030\005 \001(\0132\010.Vector2\032x"
    "\n AttackerTouchedBallInDefenseArea\022\026\n\007by"
    "_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010lo"
    "cation\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001(\002"
    "\032\207\001\n\024BotKickedBallTooFast\022\026\n\007by_team\030\001 \002"
    "(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 "
    "\001(\0132\010.Vector2\022\032\n\022initial_ball_speed\030\004 \001("
    "\002\022\017\n\007chipped\030\005 \001(\010\032o\n\025BotDribbledBallToo"
    "Far\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 "
    "\001(\r\022\027\n\005start\030\003 \001(\0132\010.Vector2\022\025\n\003end\030\004 \001("
    "\0132\010.Vector2\032z\n$AttackerTouchedOpponentIn"
    "DefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006b"
    "y_bot\030\002 \001(\r\022\016\n\006victim\030\004 \001(\r\022\032\n\010location\030"
    "\003 \001(\0132\010.Vector2\032_\n\031AttackerDoubleTouched"
    "Ball\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002"
    " \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\226\001\n\035Att"
    "ackerTooCloseToDefenseArea\022\026\n\007by_team\030\001 "
    "\002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003"
    " \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001(\002\022\037\n\rball"
    "_location\030\005 \001(\0132\010.Vector2\032o\n\027BotHeldBall"
    "Deliberately\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006"
    "by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2"
    "\022\020\n\010duration\030\004 \001(\002\032\\\n\026BotInterferedPlace"
    "ment\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002"
    " \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\'\n\rMult"
    "ipleCards\022\026\n\007by_team\030\001 \002(\0162\005.Team\032O\n\rMul"
    "tipleFouls\022\026\n\007by_team\030\001 \002(\0162\005.Team\022&\n\022ca"
    "used_game_events\030\002 \003(\0132\n.GameEvent\0323\n\031Mu"
    "ltiplePlacementFailures\022\026\n\007by_team\030\001 \002(\016"
    "2\005.Team\032O\n\013KickTimeout\022\026\n\007by_team\030\001 \002(\0162"
    "\005.Team\022\032\n\010location\030\002 \001(\0132\010.Vector2\022\014\n\004ti"
    "me\030\003 \001(\002\032<\n\020NoProgressInGame\022\032\n\010location"
    "\030\001 \001(\0132\010.Vector2\022\014\n\004time\030\002 \001(\002\032g\n\017Placem"
    "entFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022rem"
    "aining_distance\030\002 \001(\002\022 \n\030nearest_own_bot"
    "_distance\030\003 \001(\002\032A\n\027UnsportingBehaviorMin"
    "or\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002"
    "(\t\032A\n\027UnsportingBehaviorMajor\022\026\n\007by_team"
    "\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002(\t\032V\n\016KeeperH"
    "eldBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010locat"
    "ion\030\002 \001(\0132\010.Vector2\022\020\n\010duration\030\003 \001(\002\032e\n"
    "\022PlacementSucceeded\022\026\n\007by_team\030\001 \002(\0162\005.T"
    "eam\022\022\n\ntime_taken\030\002 \001(\002\022\021\n\tprecision\030\003 \001"
    "(\002\022\020\n\010distance\030\004 \001(\002\032\036\n\010Prepared\022\022\n\ntime"
    "_taken\030\001 \001(\002\032)\n\017BotSubstitution\022\026\n\007by_te"
    "am\030\001 \002(\0162\005.Team\0322\n\030ExcessiveBotSubstitut"
    "ion\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rChallenge"
    "Flag\022\026\n\007by_team\030\001 \002(\0162\005.Team\032@\n\024Challeng"
    "eFlagHandled\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\020\n\010"
    "accepted\030\002 \002(\010\032\'\n\rEmergencyStop\022\026\n\007by_te"
    "am\030\001 \002(\0162\005.Team\032\201\001\n\rTooManyRobots\022\026\n\007by_"
    "team\030\001 \002(\0162\005.Team\022\032\n\022num_robots_allowed\030"
    "\002 \001(\005\022\033\n\023num_robots_on_field\030\003 \001(\005\022\037\n\rba"
    "ll_location\030\004 \001(\0132\010.Vector2\032F\n\020BoundaryC"
    "rossing\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010locat"
    "ion\030\002 \001(\0132\010.Vector2\032W\n\021PenaltyKickFailed"
    "\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010location\030\002 \001"
    "(\0132\010.Vector2\022\016\n\006reason\030\003 \001(\t\"\265\n\n\004Type\022\033\n"
    "\027UNKNOWN_GAME_EVENT_TYPE\020\000\022\036\n\032BALL_LEFT_"
    "FIELD_TOUCH_LINE\020\006\022\035\n\031BALL_LEFT_FIELD_GO"
    "AL_LINE\020\007\022\020\n\014AIMLESS_KICK\020\013\022&\n\"ATTACKER_"
    "TOO_CLOSE_TO_DEFENSE_AREA\020\023\022\034\n\030DEFENDER_"
    "IN_DEFENSE_AREA\020\037\022\025\n\021BOUNDARY_CROSSING\020)"
    "\022\024\n\020KEEPER_HELD_BALL\020\r\022\035\n\031BOT_DRIBBLED_B"
    "ALL_TOO_FAR\020\021\022\022\n\016BOT_PUSHED_BOT\020\030\022\036\n\032BOT"
    "_HELD_BALL_DELIBERATELY\020\032\022\023\n\017BOT_TIPPED_"
    "OVER\020\033\022\025\n\021BOT_DROPPED_PARTS\020/\022)\n%ATTACKE"
    "R_TOUCHED_BALL_IN_DEFENSE_AREA\020\017\022\034\n\030BOT_"
    "KICKED_BALL_TOO_FAST\020\022\022\024\n\020BOT_CRASH_UNIQ"
    "UE\020\026\022\023\n\017BOT_CRASH_DRAWN\020\025\022$\n DEFENDER_TO"
    "O_CLOSE_TO_KICK_POINT\020\035\022\030\n\024BOT_TOO_FAST_"
    "IN_STOP\020\034\022\034\n\030BOT_INTERFERED_PLACEMENT\020\024\022"
    "\036\n\032EXCESSIVE_BOT_SUBSTITUTION\0200\022\021\n\rPOSSI"
    "BLE_GOAL\020\'\022\010\n\004GOAL\020\010\022\020\n\014INVALID_GOAL\020*\022 "
    "\n\034ATTACKER_DOUBLE_TOUCHED_BALL\020\016\022\027\n\023PLAC"
    "EMENT_SUCCEEDED\020\005\022\027\n\023PENALTY_KICK_FAILED"
    "\020+\022\027\n\023NO_PROGRESS_IN_GAME\020\002\022\024\n\020PLACEMENT"
    "_FAILED\020\003\022\022\n\016MULTIPLE_CARDS\020 \022\022\n\016MULTIPL"
    "E_FOULS\020\"\022\024\n\020BOT_SUBSTITUTION\020%\022\023\n\017TOO_M"
    "ANY_ROBOTS\020&\022\022\n\016CHALLENGE_FLAG\020,\022\032\n\026CHAL"
    "LENGE_FLAG_HANDLED\020.\022\022\n\016EMERGENCY_STOP\020-"
    "\022\035\n\031UNSPORTING_BEHAVIOR_MINOR\020#\022\035\n\031UNSPO"
    "RTING_BEHAVIOR_MAJOR\020$\022\020\n\010PREPARED\020\001\032\002\010\001"
    "\022\025\n\rINDIRECT_GOAL\020\t\032\002\010\001\022\024\n\014CHIPPED_GOAL\020"
    "\n\032\002\010\001\022\024\n\014KICK_TIMEOUT\020\014\032\002\010\001\0221\n)ATTACKER_"
    "TOUCHED_OPPONENT_IN_DEFENSE_AREA\020\020\032\002\010\001\0229"
    "\n1ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_A"
    "REA_SKIPPED\020(\032\002\010\001\022 \n\030BOT_CRASH_UNIQUE_SK"
    "IPPED\020\027\032\002\010\001\022\036\n\026BOT_PUSHED_BOT_SKIPPED\020\031\032"
    "\002\010\001\022*\n\"DEFENDER_IN_DEFENSE_AREA_PARTIALL"
    "Y\020\036\032\002\010\001\022#\n\033MULTIPLE_PLACEMENT_FAILURES\020!"
    "\032\002\010\001B\007\n\005eventB\?Z=github.com/RoboCup-SSL/"
    "ssl-game-controller/internal/app/state"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps[2] =
    {
        &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
        &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::absl::once_flag descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto = {
    false,
    false,
    8718,
    descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto,
    "ssl_gc_game_event.proto",
    &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
    descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps,
    2,
    42,
    schemas,
    file_default_instances,
    TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets,
    file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto,
    file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto,
};
const ::google::protobuf::EnumDescriptor* GameEvent_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GameEvent_Type_internal_data_[] = {
    262144u, 64u, 4294967294u, 8191u, };
bool GameEvent_Type_IsValid(int value) {
  return 0 <= value && value <= 48 && ((562949953421295u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GameEvent_Type GameEvent::UNKNOWN_GAME_EVENT_TYPE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_TOUCH_LINE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_GOAL_LINE;
constexpr GameEvent_Type GameEvent::AIMLESS_KICK;
constexpr GameEvent_Type GameEvent::ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOUNDARY_CROSSING;
constexpr GameEvent_Type GameEvent::KEEPER_HELD_BALL;
constexpr GameEvent_Type GameEvent::BOT_DRIBBLED_BALL_TOO_FAR;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT;
constexpr GameEvent_Type GameEvent::BOT_HELD_BALL_DELIBERATELY;
constexpr GameEvent_Type GameEvent::BOT_TIPPED_OVER;
constexpr GameEvent_Type GameEvent::BOT_DROPPED_PARTS;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOT_KICKED_BALL_TOO_FAST;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE;
constexpr GameEvent_Type GameEvent::BOT_CRASH_DRAWN;
constexpr GameEvent_Type GameEvent::DEFENDER_TOO_CLOSE_TO_KICK_POINT;
constexpr GameEvent_Type GameEvent::BOT_TOO_FAST_IN_STOP;
constexpr GameEvent_Type GameEvent::BOT_INTERFERED_PLACEMENT;
constexpr GameEvent_Type GameEvent::EXCESSIVE_BOT_SUBSTITUTION;
constexpr GameEvent_Type GameEvent::POSSIBLE_GOAL;
constexpr GameEvent_Type GameEvent::GOAL;
constexpr GameEvent_Type GameEvent::INVALID_GOAL;
constexpr GameEvent_Type GameEvent::ATTACKER_DOUBLE_TOUCHED_BALL;
constexpr GameEvent_Type GameEvent::PLACEMENT_SUCCEEDED;
constexpr GameEvent_Type GameEvent::PENALTY_KICK_FAILED;
constexpr GameEvent_Type GameEvent::NO_PROGRESS_IN_GAME;
constexpr GameEvent_Type GameEvent::PLACEMENT_FAILED;
constexpr GameEvent_Type GameEvent::MULTIPLE_CARDS;
constexpr GameEvent_Type GameEvent::MULTIPLE_FOULS;
constexpr GameEvent_Type GameEvent::BOT_SUBSTITUTION;
constexpr GameEvent_Type GameEvent::TOO_MANY_ROBOTS;
constexpr GameEvent_Type GameEvent::CHALLENGE_FLAG;
constexpr GameEvent_Type GameEvent::CHALLENGE_FLAG_HANDLED;
constexpr GameEvent_Type GameEvent::EMERGENCY_STOP;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MINOR;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MAJOR;
constexpr GameEvent_Type GameEvent::PREPARED;
constexpr GameEvent_Type GameEvent::INDIRECT_GOAL;
constexpr GameEvent_Type GameEvent::CHIPPED_GOAL;
constexpr GameEvent_Type GameEvent::KICK_TIMEOUT;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT_SKIPPED;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA_PARTIALLY;
constexpr GameEvent_Type GameEvent::MULTIPLE_PLACEMENT_FAILURES;
constexpr GameEvent_Type GameEvent::Type_MIN;
constexpr GameEvent_Type GameEvent::Type_MAX;
constexpr int GameEvent::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class GameEvent_BallLeftField::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BallLeftField>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BallLeftField::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BallLeftField::GameEvent_BallLeftField(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BallLeftField)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BallLeftField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BallLeftField& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BallLeftField::GameEvent_BallLeftField(
    ::google::protobuf::Arena* arena,
    const GameEvent_BallLeftField& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BallLeftField* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BallLeftField)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BallLeftField::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BallLeftField::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_BallLeftField::~GameEvent_BallLeftField() {
  // @@protoc_insertion_point(destructor:GameEvent.BallLeftField)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BallLeftField::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BallLeftField::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BallLeftField_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BallLeftField::IsInitializedImpl,
            &GameEvent_BallLeftField::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BallLeftField>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BallLeftField>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BallLeftField>(), &GameEvent_BallLeftField::ByteSizeLong,
                &GameEvent_BallLeftField::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_._cached_size_),
            false,
        },
        &GameEvent_BallLeftField::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BallLeftField::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> GameEvent_BallLeftField::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BallLeftField>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BallLeftField, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BallLeftField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BallLeftField)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BallLeftField::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BallLeftField& this_ = static_cast<const GameEvent_BallLeftField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BallLeftField::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BallLeftField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BallLeftField)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BallLeftField)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BallLeftField::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BallLeftField& this_ = static_cast<const GameEvent_BallLeftField&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BallLeftField::ByteSizeLong() const {
          const GameEvent_BallLeftField& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BallLeftField)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BallLeftField::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BallLeftField*>(&to_msg);
  auto& from = static_cast<const GameEvent_BallLeftField&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BallLeftField)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BallLeftField::CopyFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BallLeftField::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BallLeftField&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BallLeftField::InternalSwap(GameEvent_BallLeftField* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_bot_)
      + sizeof(GameEvent_BallLeftField::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BallLeftField::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_AimlessKick::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_AimlessKick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_AimlessKick::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AimlessKick::clear_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_AimlessKick::GameEvent_AimlessKick(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AimlessKick)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AimlessKick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_AimlessKick& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_AimlessKick::GameEvent_AimlessKick(
    ::google::protobuf::Arena* arena,
    const GameEvent_AimlessKick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_AimlessKick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.kick_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.kick_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.AimlessKick)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AimlessKick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_AimlessKick::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_AimlessKick::~GameEvent_AimlessKick() {
  // @@protoc_insertion_point(destructor:GameEvent.AimlessKick)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_AimlessKick::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.kick_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_AimlessKick::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_AimlessKick_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_AimlessKick::IsInitializedImpl,
            &GameEvent_AimlessKick::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_AimlessKick>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_AimlessKick>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_AimlessKick>(), &GameEvent_AimlessKick::ByteSizeLong,
                &GameEvent_AimlessKick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_._cached_size_),
            false,
        },
        &GameEvent_AimlessKick::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_AimlessKick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> GameEvent_AimlessKick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_AimlessKick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 kick_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.kick_location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AimlessKick, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 kick_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.kick_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_AimlessKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AimlessKick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_AimlessKick::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_AimlessKick& this_ = static_cast<const GameEvent_AimlessKick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_AimlessKick::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_AimlessKick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AimlessKick)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 kick_location = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.kick_location_, this_._impl_.kick_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AimlessKick)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_AimlessKick::ByteSizeLong(const MessageLite& base) {
          const GameEvent_AimlessKick& this_ = static_cast<const GameEvent_AimlessKick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_AimlessKick::ByteSizeLong() const {
          const GameEvent_AimlessKick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.AimlessKick)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 kick_location = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kick_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_AimlessKick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_AimlessKick*>(&to_msg);
  auto& from = static_cast<const GameEvent_AimlessKick&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AimlessKick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kick_location_ != nullptr);
      if (_this->_impl_.kick_location_ == nullptr) {
        _this->_impl_.kick_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.kick_location_);
      } else {
        _this->_impl_.kick_location_->MergeFrom(*from._impl_.kick_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AimlessKick::CopyFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_AimlessKick::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_AimlessKick&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AimlessKick::InternalSwap(GameEvent_AimlessKick* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_bot_)
      + sizeof(GameEvent_AimlessKick::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_AimlessKick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_Goal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_Goal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

void GameEvent_Goal::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GameEvent_Goal::clear_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GameEvent_Goal::GameEvent_Goal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Goal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_Goal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_Goal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

GameEvent_Goal::GameEvent_Goal(
    ::google::protobuf::Arena* arena,
    const GameEvent_Goal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_Goal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.kick_location_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.kick_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, num_robots_by_team_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::num_robots_by_team_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.Goal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_Goal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void GameEvent_Goal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, num_robots_by_team_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::num_robots_by_team_));
}
GameEvent_Goal::~GameEvent_Goal() {
  // @@protoc_insertion_point(destructor:GameEvent.Goal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_Goal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  delete _impl_.location_;
  delete _impl_.kick_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_Goal::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_Goal_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_Goal::IsInitializedImpl,
            &GameEvent_Goal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_Goal>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_Goal>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_Goal>(), &GameEvent_Goal::ByteSizeLong,
                &GameEvent_Goal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_._cached_size_),
            false,
        },
        &GameEvent_Goal::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_Goal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 4, 38, 2> GameEvent_Goal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_Goal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 3, 2, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.by_team_)}},
    // optional uint32 kicking_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_Goal, _impl_.kicking_bot_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kicking_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.location_)}},
    // optional .Vector2 kick_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 1, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kick_location_)}},
    // optional float max_ball_height = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.max_ball_height_)}},
    // optional .Team kicking_team = 6;
    {::_pbi::TcParser::FastEr0S1,
     {48, 6, 2, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kicking_team_)}},
    // optional uint32 num_robots_by_team = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_Goal, _impl_.num_robots_by_team_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.num_robots_by_team_)}},
    // optional uint64 last_touch_by_team = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GameEvent_Goal, _impl_.last_touch_by_team_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.last_touch_by_team_)}},
    // optional string message = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.by_team_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 kicking_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kicking_bot_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.location_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 kick_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kick_location_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float max_ball_height = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.max_ball_height_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .Team kicking_team = 6;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.kicking_team_), _Internal::kHasBitsOffset + 6, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 num_robots_by_team = 7;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.num_robots_by_team_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 last_touch_by_team = 8;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.last_touch_by_team_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string message = 9;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
    {0, 3},
  }}, {{
    "\16\0\0\0\0\0\0\0\0\7\0\0\0\0\0\0"
    "GameEvent.Goal"
    "message"
  }},
};

PROTOBUF_NOINLINE void GameEvent_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Goal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_touch_by_team_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.last_touch_by_team_));
  }
  _impl_.num_robots_by_team_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_Goal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_Goal& this_ = static_cast<const GameEvent_Goal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_Goal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_Goal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Goal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 kicking_bot = 2;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_kicking_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 kick_location = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.kick_location_, this_._impl_.kick_location_->GetCachedSize(), target,
                stream);
          }

          // optional float max_ball_height = 5;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_max_ball_height(), target);
          }

          // optional .Team kicking_team = 6;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_kicking_team(), target);
          }

          // optional uint32 num_robots_by_team = 7;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_num_robots_by_team(), target);
          }

          // optional uint64 last_touch_by_team = 8;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                8, this_._internal_last_touch_by_team(), target);
          }

          // optional string message = 9;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.Goal.message");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Goal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_Goal::ByteSizeLong(const MessageLite& base) {
          const GameEvent_Goal& this_ = static_cast<const GameEvent_Goal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_Goal::ByteSizeLong() const {
          const GameEvent_Goal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.Goal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional string message = 9;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 kick_location = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kick_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x000000f0u) {
            // optional uint32 kicking_bot = 2;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_kicking_bot());
            }
            // optional float max_ball_height = 5;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
            // optional .Team kicking_team = 6;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_kicking_team());
            }
            // optional uint64 last_touch_by_team = 8;
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_last_touch_by_team());
            }
          }
           {
            // optional uint32 num_robots_by_team = 7;
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_num_robots_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_Goal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_Goal*>(&to_msg);
  auto& from = static_cast<const GameEvent_Goal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Goal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.kick_location_ != nullptr);
      if (_this->_impl_.kick_location_ == nullptr) {
        _this->_impl_.kick_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.kick_location_);
      } else {
        _this->_impl_.kick_location_->MergeFrom(*from._impl_.kick_location_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kicking_bot_ = from._impl_.kicking_bot_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_ball_height_ = from._impl_.max_ball_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.kicking_team_ = from._impl_.kicking_team_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_touch_by_team_ = from._impl_.last_touch_by_team_;
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_impl_.num_robots_by_team_ = from._impl_.num_robots_by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_Goal::CopyFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_Goal::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_Goal&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_Goal::InternalSwap(GameEvent_Goal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.num_robots_by_team_)
      + sizeof(GameEvent_Goal::_impl_.num_robots_by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_Goal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_IndirectGoal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_IndirectGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_IndirectGoal::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_IndirectGoal::clear_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.IndirectGoal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_IndirectGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_IndirectGoal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_IndirectGoal::GameEvent_IndirectGoal(
    ::google::protobuf::Arena* arena,
    const GameEvent_IndirectGoal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_IndirectGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.kick_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.kick_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.IndirectGoal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_IndirectGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_IndirectGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_IndirectGoal::~GameEvent_IndirectGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.IndirectGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_IndirectGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.kick_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_IndirectGoal::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_IndirectGoal_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_IndirectGoal::IsInitializedImpl,
            &GameEvent_IndirectGoal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_IndirectGoal>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_IndirectGoal>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_IndirectGoal>(), &GameEvent_IndirectGoal::ByteSizeLong,
                &GameEvent_IndirectGoal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_._cached_size_),
            false,
        },
        &GameEvent_IndirectGoal::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_IndirectGoal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> GameEvent_IndirectGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_IndirectGoal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 kick_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.kick_location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_IndirectGoal, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 kick_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.kick_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_IndirectGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.IndirectGoal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_IndirectGoal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_IndirectGoal& this_ = static_cast<const GameEvent_IndirectGoal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_IndirectGoal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_IndirectGoal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.IndirectGoal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 kick_location = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.kick_location_, this_._impl_.kick_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.IndirectGoal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_IndirectGoal::ByteSizeLong(const MessageLite& base) {
          const GameEvent_IndirectGoal& this_ = static_cast<const GameEvent_IndirectGoal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_IndirectGoal::ByteSizeLong() const {
          const GameEvent_IndirectGoal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.IndirectGoal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 kick_location = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kick_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_IndirectGoal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_IndirectGoal*>(&to_msg);
  auto& from = static_cast<const GameEvent_IndirectGoal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.IndirectGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kick_location_ != nullptr);
      if (_this->_impl_.kick_location_ == nullptr) {
        _this->_impl_.kick_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.kick_location_);
      } else {
        _this->_impl_.kick_location_->MergeFrom(*from._impl_.kick_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_IndirectGoal::CopyFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_IndirectGoal::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_IndirectGoal&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_IndirectGoal::InternalSwap(GameEvent_IndirectGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_bot_)
      + sizeof(GameEvent_IndirectGoal::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_IndirectGoal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_ChippedGoal::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_ChippedGoal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_ChippedGoal::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_ChippedGoal::clear_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChippedGoal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_ChippedGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_ChippedGoal& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_ChippedGoal::GameEvent_ChippedGoal(
    ::google::protobuf::Arena* arena,
    const GameEvent_ChippedGoal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_ChippedGoal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.kick_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.kick_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, max_ball_height_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::max_ball_height_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.ChippedGoal)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_ChippedGoal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_ChippedGoal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, max_ball_height_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::max_ball_height_));
}
GameEvent_ChippedGoal::~GameEvent_ChippedGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.ChippedGoal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_ChippedGoal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.kick_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_ChippedGoal::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_ChippedGoal_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_ChippedGoal::IsInitializedImpl,
            &GameEvent_ChippedGoal::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_ChippedGoal>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_ChippedGoal>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_ChippedGoal>(), &GameEvent_ChippedGoal::ByteSizeLong,
                &GameEvent_ChippedGoal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_._cached_size_),
            false,
        },
        &GameEvent_ChippedGoal::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_ChippedGoal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> GameEvent_ChippedGoal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_ChippedGoal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_ChippedGoal, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.location_)}},
    // optional .Vector2 kick_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.kick_location_)}},
    // optional float max_ball_height = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.max_ball_height_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 kick_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.kick_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float max_ball_height = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.max_ball_height_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_ChippedGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChippedGoal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_ball_height_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.max_ball_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_ChippedGoal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_ChippedGoal& this_ = static_cast<const GameEvent_ChippedGoal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_ChippedGoal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_ChippedGoal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChippedGoal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 kick_location = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.kick_location_, this_._impl_.kick_location_->GetCachedSize(), target,
                stream);
          }

          // optional float max_ball_height = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_max_ball_height(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChippedGoal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_ChippedGoal::ByteSizeLong(const MessageLite& base) {
          const GameEvent_ChippedGoal& this_ = static_cast<const GameEvent_ChippedGoal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_ChippedGoal::ByteSizeLong() const {
          const GameEvent_ChippedGoal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.ChippedGoal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 kick_location = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kick_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x00000018u) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float max_ball_height = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_ChippedGoal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_ChippedGoal*>(&to_msg);
  auto& from = static_cast<const GameEvent_ChippedGoal&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChippedGoal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kick_location_ != nullptr);
      if (_this->_impl_.kick_location_ == nullptr) {
        _this->_impl_.kick_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.kick_location_);
      } else {
        _this->_impl_.kick_location_->MergeFrom(*from._impl_.kick_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_ball_height_ = from._impl_.max_ball_height_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ChippedGoal::CopyFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_ChippedGoal::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_ChippedGoal&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_ChippedGoal::InternalSwap(GameEvent_ChippedGoal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.max_ball_height_)
      + sizeof(GameEvent_ChippedGoal::_impl_.max_ball_height_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_ChippedGoal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotTooFastInStop::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotTooFastInStop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotTooFastInStop::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTooFastInStop)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotTooFastInStop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotTooFastInStop& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotTooFastInStop& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotTooFastInStop* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, speed_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::speed_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTooFastInStop)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotTooFastInStop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotTooFastInStop::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, speed_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::speed_));
}
GameEvent_BotTooFastInStop::~GameEvent_BotTooFastInStop() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTooFastInStop)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotTooFastInStop::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotTooFastInStop::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotTooFastInStop_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotTooFastInStop::IsInitializedImpl,
            &GameEvent_BotTooFastInStop::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotTooFastInStop>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotTooFastInStop>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotTooFastInStop>(), &GameEvent_BotTooFastInStop::ByteSizeLong,
                &GameEvent_BotTooFastInStop::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotTooFastInStop::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotTooFastInStop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_BotTooFastInStop::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotTooFastInStop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float speed = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.speed_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotTooFastInStop, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float speed = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.speed_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotTooFastInStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTooFastInStop)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotTooFastInStop::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotTooFastInStop& this_ = static_cast<const GameEvent_BotTooFastInStop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotTooFastInStop::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotTooFastInStop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTooFastInStop)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float speed = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_speed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTooFastInStop)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotTooFastInStop::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotTooFastInStop& this_ = static_cast<const GameEvent_BotTooFastInStop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotTooFastInStop::ByteSizeLong() const {
          const GameEvent_BotTooFastInStop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTooFastInStop)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float speed = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotTooFastInStop::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotTooFastInStop*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotTooFastInStop&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTooFastInStop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotTooFastInStop::CopyFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotTooFastInStop::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotTooFastInStop&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTooFastInStop::InternalSwap(GameEvent_BotTooFastInStop* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.speed_)
      + sizeof(GameEvent_BotTooFastInStop::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotTooFastInStop::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_DefenderTooCloseToKickPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_DefenderTooCloseToKickPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_DefenderTooCloseToKickPoint::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderTooCloseToKickPoint)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderTooCloseToKickPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_DefenderTooCloseToKickPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(
    ::google::protobuf::Arena* arena,
    const GameEvent_DefenderTooCloseToKickPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_DefenderTooCloseToKickPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderTooCloseToKickPoint)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderTooCloseToKickPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_DefenderTooCloseToKickPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::distance_));
}
GameEvent_DefenderTooCloseToKickPoint::~GameEvent_DefenderTooCloseToKickPoint() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderTooCloseToKickPoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_DefenderTooCloseToKickPoint::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_DefenderTooCloseToKickPoint::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_DefenderTooCloseToKickPoint_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_DefenderTooCloseToKickPoint::IsInitializedImpl,
            &GameEvent_DefenderTooCloseToKickPoint::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_DefenderTooCloseToKickPoint>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_DefenderTooCloseToKickPoint>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_DefenderTooCloseToKickPoint>(), &GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong,
                &GameEvent_DefenderTooCloseToKickPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_._cached_size_),
            false,
        },
        &GameEvent_DefenderTooCloseToKickPoint::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_DefenderTooCloseToKickPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_DefenderTooCloseToKickPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_DefenderTooCloseToKickPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_DefenderTooCloseToKickPoint, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_DefenderTooCloseToKickPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderTooCloseToKickPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_DefenderTooCloseToKickPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_DefenderTooCloseToKickPoint& this_ = static_cast<const GameEvent_DefenderTooCloseToKickPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_DefenderTooCloseToKickPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_DefenderTooCloseToKickPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderTooCloseToKickPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderTooCloseToKickPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong(const MessageLite& base) {
          const GameEvent_DefenderTooCloseToKickPoint& this_ = static_cast<const GameEvent_DefenderTooCloseToKickPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong() const {
          const GameEvent_DefenderTooCloseToKickPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderTooCloseToKickPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_DefenderTooCloseToKickPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderTooCloseToKickPoint*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderTooCloseToKickPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_DefenderTooCloseToKickPoint::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_DefenderTooCloseToKickPoint&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderTooCloseToKickPoint::InternalSwap(GameEvent_DefenderTooCloseToKickPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_)
      + sizeof(GameEvent_DefenderTooCloseToKickPoint::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_DefenderTooCloseToKickPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotCrashDrawn::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotCrashDrawn>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_._has_bits_);
};

void GameEvent_BotCrashDrawn::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashDrawn)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotCrashDrawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotCrashDrawn& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotCrashDrawn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotCrashDrawn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bot_yellow_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, bot_yellow_),
           offsetof(Impl_, crash_angle_) -
               offsetof(Impl_, bot_yellow_) +
               sizeof(Impl_::crash_angle_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashDrawn)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotCrashDrawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotCrashDrawn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, crash_angle_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::crash_angle_));
}
GameEvent_BotCrashDrawn::~GameEvent_BotCrashDrawn() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashDrawn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotCrashDrawn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotCrashDrawn::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotCrashDrawn_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotCrashDrawn::IsInitializedImpl,
            &GameEvent_BotCrashDrawn::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotCrashDrawn>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotCrashDrawn>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotCrashDrawn>(), &GameEvent_BotCrashDrawn::ByteSizeLong,
                &GameEvent_BotCrashDrawn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotCrashDrawn::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotCrashDrawn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> GameEvent_BotCrashDrawn::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotCrashDrawn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 bot_yellow = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotCrashDrawn, _impl_.bot_yellow_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.bot_yellow_)}},
    // optional uint32 bot_blue = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotCrashDrawn, _impl_.bot_blue_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.bot_blue_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.location_)}},
    // optional float crash_speed = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_speed_)}},
    // optional float speed_diff = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.speed_diff_)}},
    // optional float crash_angle = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_angle_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 bot_yellow = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.bot_yellow_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 bot_blue = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.bot_blue_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float crash_speed = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_speed_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float speed_diff = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.speed_diff_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float crash_angle = 6;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_angle_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotCrashDrawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashDrawn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.bot_yellow_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.crash_angle_) -
        reinterpret_cast<char*>(&_impl_.bot_yellow_)) + sizeof(_impl_.crash_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotCrashDrawn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotCrashDrawn& this_ = static_cast<const GameEvent_BotCrashDrawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotCrashDrawn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotCrashDrawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashDrawn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint32 bot_yellow = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_bot_yellow(), target);
          }

          // optional uint32 bot_blue = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_bot_blue(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float crash_speed = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_crash_speed(), target);
          }

          // optional float speed_diff = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_speed_diff(), target);
          }

          // optional float crash_angle = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_crash_angle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashDrawn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotCrashDrawn::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotCrashDrawn& this_ = static_cast<const GameEvent_BotCrashDrawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotCrashDrawn::ByteSizeLong() const {
          const GameEvent_BotCrashDrawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashDrawn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional uint32 bot_yellow = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_bot_yellow());
            }
            // optional uint32 bot_blue = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_bot_blue());
            }
            // optional float crash_speed = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // optional float speed_diff = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // optional float crash_angle = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotCrashDrawn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotCrashDrawn*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotCrashDrawn&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashDrawn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bot_yellow_ = from._impl_.bot_yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bot_blue_ = from._impl_.bot_blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.crash_speed_ = from._impl_.crash_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.speed_diff_ = from._impl_.speed_diff_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.crash_angle_ = from._impl_.crash_angle_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotCrashDrawn::CopyFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotCrashDrawn::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotCrashDrawn&>(msg);
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashDrawn::InternalSwap(GameEvent_BotCrashDrawn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_angle_)
      + sizeof(GameEvent_BotCrashDrawn::_impl_.crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotCrashDrawn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotCrashUnique::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotCrashUnique>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotCrashUnique::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashUnique)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotCrashUnique::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotCrashUnique& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotCrashUnique& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotCrashUnique* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, crash_angle_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::crash_angle_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashUnique)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotCrashUnique::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotCrashUnique::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, crash_angle_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::crash_angle_));
}
GameEvent_BotCrashUnique::~GameEvent_BotCrashUnique() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashUnique)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotCrashUnique::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotCrashUnique::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotCrashUnique_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotCrashUnique::IsInitializedImpl,
            &GameEvent_BotCrashUnique::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotCrashUnique>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotCrashUnique>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotCrashUnique>(), &GameEvent_BotCrashUnique::ByteSizeLong,
                &GameEvent_BotCrashUnique::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotCrashUnique::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotCrashUnique::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> GameEvent_BotCrashUnique::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotCrashUnique>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.by_team_)}},
    // optional uint32 violator = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotCrashUnique, _impl_.violator_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.violator_)}},
    // optional uint32 victim = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotCrashUnique, _impl_.victim_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.victim_)}},
    // optional .Vector2 location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.location_)}},
    // optional float crash_speed = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_speed_)}},
    // optional float speed_diff = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.speed_diff_)}},
    // optional float crash_angle = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_angle_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 violator = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.violator_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 victim = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.victim_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float crash_speed = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_speed_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float speed_diff = 6;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.speed_diff_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float crash_angle = 7;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_angle_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotCrashUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashUnique)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.crash_angle_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.crash_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotCrashUnique::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotCrashUnique& this_ = static_cast<const GameEvent_BotCrashUnique&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotCrashUnique::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotCrashUnique& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashUnique)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 violator = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_violator(), target);
          }

          // optional uint32 victim = 3;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_victim(), target);
          }

          // optional .Vector2 location = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float crash_speed = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_crash_speed(), target);
          }

          // optional float speed_diff = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_speed_diff(), target);
          }

          // optional float crash_angle = 7;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_crash_angle(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashUnique)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotCrashUnique::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotCrashUnique& this_ = static_cast<const GameEvent_BotCrashUnique&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotCrashUnique::ByteSizeLong() const {
          const GameEvent_BotCrashUnique& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashUnique)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000007cu) {
            // optional uint32 violator = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_violator());
            }
            // optional uint32 victim = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_victim());
            }
            // optional float crash_speed = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // optional float speed_diff = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
            // optional float crash_angle = 7;
            if (cached_has_bits & 0x00000040u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotCrashUnique::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotCrashUnique*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotCrashUnique&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashUnique)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.violator_ = from._impl_.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crash_speed_ = from._impl_.crash_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.speed_diff_ = from._impl_.speed_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.crash_angle_ = from._impl_.crash_angle_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotCrashUnique::CopyFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotCrashUnique::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotCrashUnique&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashUnique::InternalSwap(GameEvent_BotCrashUnique* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_angle_)
      + sizeof(GameEvent_BotCrashUnique::_impl_.crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotCrashUnique::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotPushedBot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotPushedBot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotPushedBot::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotPushedBot)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotPushedBot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotPushedBot& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotPushedBot::GameEvent_BotPushedBot(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotPushedBot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotPushedBot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, pushed_distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::pushed_distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotPushedBot)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotPushedBot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotPushedBot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, pushed_distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::pushed_distance_));
}
GameEvent_BotPushedBot::~GameEvent_BotPushedBot() {
  // @@protoc_insertion_point(destructor:GameEvent.BotPushedBot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotPushedBot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotPushedBot::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotPushedBot_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotPushedBot::IsInitializedImpl,
            &GameEvent_BotPushedBot::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotPushedBot>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotPushedBot>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotPushedBot>(), &GameEvent_BotPushedBot::ByteSizeLong,
                &GameEvent_BotPushedBot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotPushedBot::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotPushedBot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> GameEvent_BotPushedBot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotPushedBot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.by_team_)}},
    // optional uint32 violator = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotPushedBot, _impl_.violator_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.violator_)}},
    // optional uint32 victim = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotPushedBot, _impl_.victim_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.victim_)}},
    // optional .Vector2 location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.location_)}},
    // optional float pushed_distance = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.pushed_distance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 violator = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.violator_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 victim = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.victim_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float pushed_distance = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.pushed_distance_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotPushedBot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotPushedBot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pushed_distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.pushed_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotPushedBot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotPushedBot& this_ = static_cast<const GameEvent_BotPushedBot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotPushedBot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotPushedBot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotPushedBot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 violator = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_violator(), target);
          }

          // optional uint32 victim = 3;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_victim(), target);
          }

          // optional .Vector2 location = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float pushed_distance = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_pushed_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotPushedBot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotPushedBot::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotPushedBot& this_ = static_cast<const GameEvent_BotPushedBot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotPushedBot::ByteSizeLong() const {
          const GameEvent_BotPushedBot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotPushedBot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000001cu) {
            // optional uint32 violator = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_violator());
            }
            // optional uint32 victim = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_victim());
            }
            // optional float pushed_distance = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotPushedBot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotPushedBot*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotPushedBot&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotPushedBot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.violator_ = from._impl_.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pushed_distance_ = from._impl_.pushed_distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotPushedBot::CopyFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotPushedBot::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotPushedBot&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotPushedBot::InternalSwap(GameEvent_BotPushedBot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.pushed_distance_)
      + sizeof(GameEvent_BotPushedBot::_impl_.pushed_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotPushedBot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotTippedOver::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotTippedOver>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_BotTippedOver::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotTippedOver::clear_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTippedOver)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotTippedOver::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotTippedOver& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotTippedOver::GameEvent_BotTippedOver(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotTippedOver& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotTippedOver* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.ball_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.ball_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTippedOver)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotTippedOver::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotTippedOver::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_BotTippedOver::~GameEvent_BotTippedOver() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTippedOver)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotTippedOver::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.ball_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotTippedOver::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotTippedOver_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotTippedOver::IsInitializedImpl,
            &GameEvent_BotTippedOver::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotTippedOver>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotTippedOver>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotTippedOver>(), &GameEvent_BotTippedOver::ByteSizeLong,
                &GameEvent_BotTippedOver::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotTippedOver::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotTippedOver::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> GameEvent_BotTippedOver::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotTippedOver>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 ball_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.ball_location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotTippedOver, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 ball_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.ball_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotTippedOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTippedOver)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotTippedOver::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotTippedOver& this_ = static_cast<const GameEvent_BotTippedOver&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotTippedOver::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotTippedOver& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTippedOver)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 ball_location = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ball_location_, this_._impl_.ball_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTippedOver)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotTippedOver::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotTippedOver& this_ = static_cast<const GameEvent_BotTippedOver&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotTippedOver::ByteSizeLong() const {
          const GameEvent_BotTippedOver& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTippedOver)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 ball_location = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotTippedOver::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotTippedOver*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotTippedOver&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTippedOver)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_location_ != nullptr);
      if (_this->_impl_.ball_location_ == nullptr) {
        _this->_impl_.ball_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.ball_location_);
      } else {
        _this->_impl_.ball_location_->MergeFrom(*from._impl_.ball_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotTippedOver::CopyFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotTippedOver::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotTippedOver&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTippedOver::InternalSwap(GameEvent_BotTippedOver* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_bot_)
      + sizeof(GameEvent_BotTippedOver::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotTippedOver::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotDroppedParts::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotDroppedParts>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_BotDroppedParts::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDroppedParts::clear_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotDroppedParts::GameEvent_BotDroppedParts(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotDroppedParts)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotDroppedParts::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotDroppedParts& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotDroppedParts::GameEvent_BotDroppedParts(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotDroppedParts& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotDroppedParts* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.ball_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.ball_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDroppedParts)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotDroppedParts::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotDroppedParts::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_BotDroppedParts::~GameEvent_BotDroppedParts() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDroppedParts)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotDroppedParts::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.ball_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotDroppedParts::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotDroppedParts_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotDroppedParts::IsInitializedImpl,
            &GameEvent_BotDroppedParts::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotDroppedParts>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotDroppedParts>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotDroppedParts>(), &GameEvent_BotDroppedParts::ByteSizeLong,
                &GameEvent_BotDroppedParts::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotDroppedParts::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotDroppedParts::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> GameEvent_BotDroppedParts::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotDroppedParts>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 ball_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.ball_location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotDroppedParts, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 ball_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.ball_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotDroppedParts::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDroppedParts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotDroppedParts::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotDroppedParts& this_ = static_cast<const GameEvent_BotDroppedParts&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotDroppedParts::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotDroppedParts& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDroppedParts)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 ball_location = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ball_location_, this_._impl_.ball_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDroppedParts)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotDroppedParts::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotDroppedParts& this_ = static_cast<const GameEvent_BotDroppedParts&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotDroppedParts::ByteSizeLong() const {
          const GameEvent_BotDroppedParts& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDroppedParts)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 ball_location = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotDroppedParts::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotDroppedParts*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotDroppedParts&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDroppedParts)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_location_ != nullptr);
      if (_this->_impl_.ball_location_ == nullptr) {
        _this->_impl_.ball_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.ball_location_);
      } else {
        _this->_impl_.ball_location_->MergeFrom(*from._impl_.ball_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotDroppedParts::CopyFrom(const GameEvent_BotDroppedParts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDroppedParts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotDroppedParts::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotDroppedParts&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDroppedParts::InternalSwap(GameEvent_BotDroppedParts* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.by_bot_)
      + sizeof(GameEvent_BotDroppedParts::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotDroppedParts, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotDroppedParts::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_DefenderInDefenseArea::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_DefenderInDefenseArea>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_DefenderInDefenseArea::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_DefenderInDefenseArea& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(
    ::google::protobuf::Arena* arena,
    const GameEvent_DefenderInDefenseArea& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_DefenderInDefenseArea* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_DefenderInDefenseArea::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::distance_));
}
GameEvent_DefenderInDefenseArea::~GameEvent_DefenderInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseArea)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_DefenderInDefenseArea::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_DefenderInDefenseArea::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_DefenderInDefenseArea_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_DefenderInDefenseArea::IsInitializedImpl,
            &GameEvent_DefenderInDefenseArea::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_DefenderInDefenseArea>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_DefenderInDefenseArea>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_DefenderInDefenseArea>(), &GameEvent_DefenderInDefenseArea::ByteSizeLong,
                &GameEvent_DefenderInDefenseArea::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_._cached_size_),
            false,
        },
        &GameEvent_DefenderInDefenseArea::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_DefenderInDefenseArea::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_DefenderInDefenseArea::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_DefenderInDefenseArea>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.distance_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_DefenderInDefenseArea, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.distance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_DefenderInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseArea)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_DefenderInDefenseArea::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_DefenderInDefenseArea& this_ = static_cast<const GameEvent_DefenderInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_DefenderInDefenseArea::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_DefenderInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseArea)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseArea)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_DefenderInDefenseArea::ByteSizeLong(const MessageLite& base) {
          const GameEvent_DefenderInDefenseArea& this_ = static_cast<const GameEvent_DefenderInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_DefenderInDefenseArea::ByteSizeLong() const {
          const GameEvent_DefenderInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseArea)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_DefenderInDefenseArea::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderInDefenseArea&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseArea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_DefenderInDefenseArea::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_DefenderInDefenseArea&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseArea::InternalSwap(GameEvent_DefenderInDefenseArea* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_DefenderInDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseArea::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_DefenderInDefenseAreaPartially::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_DefenderInDefenseAreaPartially>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_DefenderInDefenseAreaPartially::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseAreaPartially)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderInDefenseAreaPartially::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_DefenderInDefenseAreaPartially& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(
    ::google::protobuf::Arena* arena,
    const GameEvent_DefenderInDefenseAreaPartially& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_DefenderInDefenseAreaPartially* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.ball_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.ball_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseAreaPartially)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_DefenderInDefenseAreaPartially::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_DefenderInDefenseAreaPartially::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::distance_));
}
GameEvent_DefenderInDefenseAreaPartially::~GameEvent_DefenderInDefenseAreaPartially() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseAreaPartially)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_DefenderInDefenseAreaPartially::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.ball_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_DefenderInDefenseAreaPartially::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_DefenderInDefenseAreaPartially::IsInitializedImpl,
            &GameEvent_DefenderInDefenseAreaPartially::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_DefenderInDefenseAreaPartially>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_DefenderInDefenseAreaPartially>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_DefenderInDefenseAreaPartially>(), &GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong,
                &GameEvent_DefenderInDefenseAreaPartially::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_._cached_size_),
            false,
        },
        &GameEvent_DefenderInDefenseAreaPartially::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_DefenderInDefenseAreaPartially::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> GameEvent_DefenderInDefenseAreaPartially::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_DefenderInDefenseAreaPartially>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_DefenderInDefenseAreaPartially, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.location_)}},
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_)}},
    // optional .Vector2 ball_location = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.ball_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .Vector2 ball_location = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.ball_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_DefenderInDefenseAreaPartially::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseAreaPartially)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_DefenderInDefenseAreaPartially::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_DefenderInDefenseAreaPartially& this_ = static_cast<const GameEvent_DefenderInDefenseAreaPartially&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_DefenderInDefenseAreaPartially::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_DefenderInDefenseAreaPartially& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseAreaPartially)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          // optional .Vector2 ball_location = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.ball_location_, this_._impl_.ball_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseAreaPartially)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong(const MessageLite& base) {
          const GameEvent_DefenderInDefenseAreaPartially& this_ = static_cast<const GameEvent_DefenderInDefenseAreaPartially&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong() const {
          const GameEvent_DefenderInDefenseAreaPartially& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseAreaPartially)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 ball_location = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x00000018u) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_DefenderInDefenseAreaPartially::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderInDefenseAreaPartially*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderInDefenseAreaPartially&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_location_ != nullptr);
      if (_this->_impl_.ball_location_ == nullptr) {
        _this->_impl_.ball_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.ball_location_);
      } else {
        _this->_impl_.ball_location_->MergeFrom(*from._impl_.ball_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_DefenderInDefenseAreaPartially::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_DefenderInDefenseAreaPartially&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseAreaPartially::InternalSwap(GameEvent_DefenderInDefenseAreaPartially* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_)
      + sizeof(GameEvent_DefenderInDefenseAreaPartially::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_DefenderInDefenseAreaPartially::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_AttackerTouchedBallInDefenseArea::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_AttackerTouchedBallInDefenseArea>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_AttackerTouchedBallInDefenseArea::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTouchedBallInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_AttackerTouchedBallInDefenseArea& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(
    ::google::protobuf::Arena* arena,
    const GameEvent_AttackerTouchedBallInDefenseArea& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_AttackerTouchedBallInDefenseArea* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTouchedBallInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_AttackerTouchedBallInDefenseArea::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::distance_));
}
GameEvent_AttackerTouchedBallInDefenseArea::~GameEvent_AttackerTouchedBallInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedBallInDefenseArea)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_AttackerTouchedBallInDefenseArea::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_AttackerTouchedBallInDefenseArea::IsInitializedImpl,
            &GameEvent_AttackerTouchedBallInDefenseArea::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_AttackerTouchedBallInDefenseArea>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_AttackerTouchedBallInDefenseArea>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_AttackerTouchedBallInDefenseArea>(), &GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong,
                &GameEvent_AttackerTouchedBallInDefenseArea::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_._cached_size_),
            false,
        },
        &GameEvent_AttackerTouchedBallInDefenseArea::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_AttackerTouchedBallInDefenseArea::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_AttackerTouchedBallInDefenseArea::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_AttackerTouchedBallInDefenseArea>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_AttackerTouchedBallInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_AttackerTouchedBallInDefenseArea::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_AttackerTouchedBallInDefenseArea& this_ = static_cast<const GameEvent_AttackerTouchedBallInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_AttackerTouchedBallInDefenseArea::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_AttackerTouchedBallInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedBallInDefenseArea)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedBallInDefenseArea)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong(const MessageLite& base) {
          const GameEvent_AttackerTouchedBallInDefenseArea& this_ = static_cast<const GameEvent_AttackerTouchedBallInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong() const {
          const GameEvent_AttackerTouchedBallInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedBallInDefenseArea)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_AttackerTouchedBallInDefenseArea::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTouchedBallInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTouchedBallInDefenseArea&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_AttackerTouchedBallInDefenseArea::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_AttackerTouchedBallInDefenseArea&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedBallInDefenseArea::InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_AttackerTouchedBallInDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_AttackerTouchedBallInDefenseArea::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotKickedBallTooFast::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotKickedBallTooFast>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotKickedBallTooFast::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotKickedBallTooFast)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotKickedBallTooFast::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotKickedBallTooFast& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotKickedBallTooFast& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotKickedBallTooFast* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, chipped_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::chipped_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotKickedBallTooFast)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotKickedBallTooFast::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotKickedBallTooFast::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, chipped_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::chipped_));
}
GameEvent_BotKickedBallTooFast::~GameEvent_BotKickedBallTooFast() {
  // @@protoc_insertion_point(destructor:GameEvent.BotKickedBallTooFast)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotKickedBallTooFast::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotKickedBallTooFast::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotKickedBallTooFast_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotKickedBallTooFast::IsInitializedImpl,
            &GameEvent_BotKickedBallTooFast::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotKickedBallTooFast>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotKickedBallTooFast>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotKickedBallTooFast>(), &GameEvent_BotKickedBallTooFast::ByteSizeLong,
                &GameEvent_BotKickedBallTooFast::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotKickedBallTooFast::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotKickedBallTooFast::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> GameEvent_BotKickedBallTooFast::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotKickedBallTooFast>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotKickedBallTooFast, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.location_)}},
    // optional float initial_ball_speed = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.initial_ball_speed_)}},
    // optional bool chipped = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameEvent_BotKickedBallTooFast, _impl_.chipped_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.chipped_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float initial_ball_speed = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.initial_ball_speed_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool chipped = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.chipped_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotKickedBallTooFast::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotKickedBallTooFast)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.chipped_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.chipped_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotKickedBallTooFast::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotKickedBallTooFast& this_ = static_cast<const GameEvent_BotKickedBallTooFast&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotKickedBallTooFast::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotKickedBallTooFast& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotKickedBallTooFast)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float initial_ball_speed = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_initial_ball_speed(), target);
          }

          // optional bool chipped = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_chipped(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotKickedBallTooFast)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotKickedBallTooFast::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotKickedBallTooFast& this_ = static_cast<const GameEvent_BotKickedBallTooFast&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotKickedBallTooFast::ByteSizeLong() const {
          const GameEvent_BotKickedBallTooFast& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotKickedBallTooFast)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000001cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float initial_ball_speed = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // optional bool chipped = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotKickedBallTooFast::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotKickedBallTooFast*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotKickedBallTooFast&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotKickedBallTooFast)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.initial_ball_speed_ = from._impl_.initial_ball_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.chipped_ = from._impl_.chipped_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotKickedBallTooFast::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotKickedBallTooFast&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotKickedBallTooFast::InternalSwap(GameEvent_BotKickedBallTooFast* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.chipped_)
      + sizeof(GameEvent_BotKickedBallTooFast::_impl_.chipped_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotKickedBallTooFast::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotDribbledBallTooFar::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotDribbledBallTooFar>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_BotDribbledBallTooFar::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDribbledBallTooFar::clear_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotDribbledBallTooFar)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotDribbledBallTooFar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotDribbledBallTooFar& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotDribbledBallTooFar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotDribbledBallTooFar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.start_)
                        : nullptr;
  _impl_.end_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.end_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDribbledBallTooFar)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotDribbledBallTooFar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotDribbledBallTooFar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, start_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_BotDribbledBallTooFar::~GameEvent_BotDribbledBallTooFar() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDribbledBallTooFar)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotDribbledBallTooFar::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.start_;
  delete _impl_.end_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotDribbledBallTooFar::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotDribbledBallTooFar_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotDribbledBallTooFar::IsInitializedImpl,
            &GameEvent_BotDribbledBallTooFar::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotDribbledBallTooFar>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotDribbledBallTooFar>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotDribbledBallTooFar>(), &GameEvent_BotDribbledBallTooFar::ByteSizeLong,
                &GameEvent_BotDribbledBallTooFar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotDribbledBallTooFar::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotDribbledBallTooFar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> GameEvent_BotDribbledBallTooFar::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotDribbledBallTooFar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 end = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.end_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotDribbledBallTooFar, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_bot_)}},
    // optional .Vector2 start = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 start = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.start_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .Vector2 end = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.end_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotDribbledBallTooFar::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDribbledBallTooFar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotDribbledBallTooFar::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotDribbledBallTooFar& this_ = static_cast<const GameEvent_BotDribbledBallTooFar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotDribbledBallTooFar::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotDribbledBallTooFar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDribbledBallTooFar)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 start = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.start_, this_._impl_.start_->GetCachedSize(), target,
                stream);
          }

          // optional .Vector2 end = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.end_, this_._impl_.end_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDribbledBallTooFar)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotDribbledBallTooFar& this_ = static_cast<const GameEvent_BotDribbledBallTooFar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong() const {
          const GameEvent_BotDribbledBallTooFar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDribbledBallTooFar)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 start = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_);
            }
            // optional .Vector2 end = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotDribbledBallTooFar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotDribbledBallTooFar*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotDribbledBallTooFar&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDribbledBallTooFar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_ != nullptr);
      if (_this->_impl_.start_ == nullptr) {
        _this->_impl_.start_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.start_);
      } else {
        _this->_impl_.start_->MergeFrom(*from._impl_.start_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.end_ != nullptr);
      if (_this->_impl_.end_ == nullptr) {
        _this->_impl_.end_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.end_);
      } else {
        _this->_impl_.end_->MergeFrom(*from._impl_.end_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotDribbledBallTooFar::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotDribbledBallTooFar&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.start_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.end_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDribbledBallTooFar::InternalSwap(GameEvent_BotDribbledBallTooFar* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_bot_)
      + sizeof(GameEvent_BotDribbledBallTooFar::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::google::protobuf::Metadata GameEvent_BotDribbledBallTooFar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_AttackerTouchedOpponentInDefenseArea::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_AttackerTouchedOpponentInDefenseArea>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTouchedOpponentInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_AttackerTouchedOpponentInDefenseArea& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(
    ::google::protobuf::Arena* arena,
    const GameEvent_AttackerTouchedOpponentInDefenseArea& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_AttackerTouchedOpponentInDefenseArea* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, victim_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::victim_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTouchedOpponentInDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, victim_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::victim_));
}
GameEvent_AttackerTouchedOpponentInDefenseArea::~GameEvent_AttackerTouchedOpponentInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_AttackerTouchedOpponentInDefenseArea::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitializedImpl,
            &GameEvent_AttackerTouchedOpponentInDefenseArea::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_AttackerTouchedOpponentInDefenseArea>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_AttackerTouchedOpponentInDefenseArea>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_AttackerTouchedOpponentInDefenseArea>(), &GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong,
                &GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_._cached_size_),
            false,
        },
        &GameEvent_AttackerTouchedOpponentInDefenseArea::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_AttackerTouchedOpponentInDefenseArea::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_AttackerTouchedOpponentInDefenseArea::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_AttackerTouchedOpponentInDefenseArea>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 victim = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 victim = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_AttackerTouchedOpponentInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.victim_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.victim_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_AttackerTouchedOpponentInDefenseArea& this_ = static_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_AttackerTouchedOpponentInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional uint32 victim = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_victim(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong(const MessageLite& base) {
          const GameEvent_AttackerTouchedOpponentInDefenseArea& this_ = static_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong() const {
          const GameEvent_AttackerTouchedOpponentInDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional uint32 victim = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_victim());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTouchedOpponentInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_)
      + sizeof(GameEvent_AttackerTouchedOpponentInDefenseArea::_impl_.victim_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_AttackerTouchedOpponentInDefenseArea::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_AttackerDoubleTouchedBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_AttackerDoubleTouchedBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_AttackerDoubleTouchedBall::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerDoubleTouchedBall)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerDoubleTouchedBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_AttackerDoubleTouchedBall& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(
    ::google::protobuf::Arena* arena,
    const GameEvent_AttackerDoubleTouchedBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_AttackerDoubleTouchedBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerDoubleTouchedBall)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerDoubleTouchedBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_AttackerDoubleTouchedBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_AttackerDoubleTouchedBall::~GameEvent_AttackerDoubleTouchedBall() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerDoubleTouchedBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_AttackerDoubleTouchedBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_AttackerDoubleTouchedBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_AttackerDoubleTouchedBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_AttackerDoubleTouchedBall::IsInitializedImpl,
            &GameEvent_AttackerDoubleTouchedBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_AttackerDoubleTouchedBall>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_AttackerDoubleTouchedBall>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_AttackerDoubleTouchedBall>(), &GameEvent_AttackerDoubleTouchedBall::ByteSizeLong,
                &GameEvent_AttackerDoubleTouchedBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_._cached_size_),
            false,
        },
        &GameEvent_AttackerDoubleTouchedBall::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_AttackerDoubleTouchedBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> GameEvent_AttackerDoubleTouchedBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_AttackerDoubleTouchedBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_AttackerDoubleTouchedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerDoubleTouchedBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_AttackerDoubleTouchedBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_AttackerDoubleTouchedBall& this_ = static_cast<const GameEvent_AttackerDoubleTouchedBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_AttackerDoubleTouchedBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_AttackerDoubleTouchedBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerDoubleTouchedBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerDoubleTouchedBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong(const MessageLite& base) {
          const GameEvent_AttackerDoubleTouchedBall& this_ = static_cast<const GameEvent_AttackerDoubleTouchedBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong() const {
          const GameEvent_AttackerDoubleTouchedBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerDoubleTouchedBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_AttackerDoubleTouchedBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerDoubleTouchedBall*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerDoubleTouchedBall&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_AttackerDoubleTouchedBall::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_AttackerDoubleTouchedBall&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerDoubleTouchedBall::InternalSwap(GameEvent_AttackerDoubleTouchedBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_)
      + sizeof(GameEvent_AttackerDoubleTouchedBall::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_AttackerDoubleTouchedBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_AttackerTooCloseToDefenseArea::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_AttackerTooCloseToDefenseArea>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_AttackerTooCloseToDefenseArea::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTooCloseToDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_AttackerTooCloseToDefenseArea& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(
    ::google::protobuf::Arena* arena,
    const GameEvent_AttackerTooCloseToDefenseArea& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_AttackerTooCloseToDefenseArea* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.ball_location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.ball_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_AttackerTooCloseToDefenseArea::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_AttackerTooCloseToDefenseArea::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::distance_));
}
GameEvent_AttackerTooCloseToDefenseArea::~GameEvent_AttackerTooCloseToDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTooCloseToDefenseArea)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  delete _impl_.ball_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_AttackerTooCloseToDefenseArea::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_AttackerTooCloseToDefenseArea::IsInitializedImpl,
            &GameEvent_AttackerTooCloseToDefenseArea::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_AttackerTooCloseToDefenseArea>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_AttackerTooCloseToDefenseArea>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_AttackerTooCloseToDefenseArea>(), &GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong,
                &GameEvent_AttackerTooCloseToDefenseArea::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_._cached_size_),
            false,
        },
        &GameEvent_AttackerTooCloseToDefenseArea::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_AttackerTooCloseToDefenseArea::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> GameEvent_AttackerTooCloseToDefenseArea::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_AttackerTooCloseToDefenseArea>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_bot_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_)}},
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_)}},
    // optional .Vector2 ball_location = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.ball_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_bot_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .Vector2 ball_location = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.ball_location_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_AttackerTooCloseToDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTooCloseToDefenseArea)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_AttackerTooCloseToDefenseArea::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_AttackerTooCloseToDefenseArea& this_ = static_cast<const GameEvent_AttackerTooCloseToDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_AttackerTooCloseToDefenseArea::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_AttackerTooCloseToDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTooCloseToDefenseArea)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          // optional .Vector2 ball_location = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.ball_location_, this_._impl_.ball_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTooCloseToDefenseArea)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong(const MessageLite& base) {
          const GameEvent_AttackerTooCloseToDefenseArea& this_ = static_cast<const GameEvent_AttackerTooCloseToDefenseArea&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong() const {
          const GameEvent_AttackerTooCloseToDefenseArea& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTooCloseToDefenseArea)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional .Vector2 ball_location = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x00000018u) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_AttackerTooCloseToDefenseArea::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTooCloseToDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTooCloseToDefenseArea&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ball_location_ != nullptr);
      if (_this->_impl_.ball_location_ == nullptr) {
        _this->_impl_.ball_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.ball_location_);
      } else {
        _this->_impl_.ball_location_->MergeFrom(*from._impl_.ball_location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_AttackerTooCloseToDefenseArea::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_AttackerTooCloseToDefenseArea&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTooCloseToDefenseArea::InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_AttackerTooCloseToDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_AttackerTooCloseToDefenseArea::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotHeldBallDeliberately::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotHeldBallDeliberately>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotHeldBallDeliberately::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotHeldBallDeliberately)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotHeldBallDeliberately::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotHeldBallDeliberately& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotHeldBallDeliberately& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotHeldBallDeliberately* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, duration_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::duration_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotHeldBallDeliberately)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotHeldBallDeliberately::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotHeldBallDeliberately::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, duration_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::duration_));
}
GameEvent_BotHeldBallDeliberately::~GameEvent_BotHeldBallDeliberately() {
  // @@protoc_insertion_point(destructor:GameEvent.BotHeldBallDeliberately)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotHeldBallDeliberately::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotHeldBallDeliberately::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotHeldBallDeliberately_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotHeldBallDeliberately::IsInitializedImpl,
            &GameEvent_BotHeldBallDeliberately::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotHeldBallDeliberately>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotHeldBallDeliberately>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotHeldBallDeliberately>(), &GameEvent_BotHeldBallDeliberately::ByteSizeLong,
                &GameEvent_BotHeldBallDeliberately::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotHeldBallDeliberately::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotHeldBallDeliberately::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_BotHeldBallDeliberately::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotHeldBallDeliberately>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float duration = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.duration_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotHeldBallDeliberately, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float duration = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.duration_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotHeldBallDeliberately::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotHeldBallDeliberately)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotHeldBallDeliberately::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotHeldBallDeliberately& this_ = static_cast<const GameEvent_BotHeldBallDeliberately&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotHeldBallDeliberately::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotHeldBallDeliberately& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotHeldBallDeliberately)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float duration = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_duration(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotHeldBallDeliberately)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotHeldBallDeliberately& this_ = static_cast<const GameEvent_BotHeldBallDeliberately&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong() const {
          const GameEvent_BotHeldBallDeliberately& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotHeldBallDeliberately)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
            // optional float duration = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotHeldBallDeliberately::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotHeldBallDeliberately*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotHeldBallDeliberately&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotHeldBallDeliberately)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotHeldBallDeliberately::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotHeldBallDeliberately&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotHeldBallDeliberately::InternalSwap(GameEvent_BotHeldBallDeliberately* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.duration_)
      + sizeof(GameEvent_BotHeldBallDeliberately::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotHeldBallDeliberately::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotInterferedPlacement::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotInterferedPlacement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BotInterferedPlacement::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotInterferedPlacement)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotInterferedPlacement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BotInterferedPlacement& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(
    ::google::protobuf::Arena* arena,
    const GameEvent_BotInterferedPlacement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BotInterferedPlacement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::by_bot_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.BotInterferedPlacement)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotInterferedPlacement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotInterferedPlacement::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_bot_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_bot_));
}
GameEvent_BotInterferedPlacement::~GameEvent_BotInterferedPlacement() {
  // @@protoc_insertion_point(destructor:GameEvent.BotInterferedPlacement)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotInterferedPlacement::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotInterferedPlacement::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotInterferedPlacement_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotInterferedPlacement::IsInitializedImpl,
            &GameEvent_BotInterferedPlacement::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotInterferedPlacement>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotInterferedPlacement>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotInterferedPlacement>(), &GameEvent_BotInterferedPlacement::ByteSizeLong,
                &GameEvent_BotInterferedPlacement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotInterferedPlacement::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotInterferedPlacement::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> GameEvent_BotInterferedPlacement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotInterferedPlacement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_team_)}},
    // optional uint32 by_bot = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_BotInterferedPlacement, _impl_.by_bot_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_bot_)}},
    // optional .Vector2 location = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 by_bot = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_bot_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .Vector2 location = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotInterferedPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotInterferedPlacement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotInterferedPlacement::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotInterferedPlacement& this_ = static_cast<const GameEvent_BotInterferedPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotInterferedPlacement::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotInterferedPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotInterferedPlacement)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional uint32 by_bot = 2;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_by_bot(), target);
          }

          // optional .Vector2 location = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotInterferedPlacement)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotInterferedPlacement::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotInterferedPlacement& this_ = static_cast<const GameEvent_BotInterferedPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotInterferedPlacement::ByteSizeLong() const {
          const GameEvent_BotInterferedPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotInterferedPlacement)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional uint32 by_bot = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_by_bot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotInterferedPlacement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotInterferedPlacement*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotInterferedPlacement&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotInterferedPlacement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotInterferedPlacement::CopyFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotInterferedPlacement::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotInterferedPlacement&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotInterferedPlacement::InternalSwap(GameEvent_BotInterferedPlacement* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_bot_)
      + sizeof(GameEvent_BotInterferedPlacement::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BotInterferedPlacement::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_MultipleCards::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_MultipleCards>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_MultipleCards, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleCards::GameEvent_MultipleCards(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleCards)
}
GameEvent_MultipleCards::GameEvent_MultipleCards(
    ::google::protobuf::Arena* arena, const GameEvent_MultipleCards& from)
    : GameEvent_MultipleCards(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_MultipleCards::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_MultipleCards::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_MultipleCards::~GameEvent_MultipleCards() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleCards)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_MultipleCards::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_MultipleCards::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_MultipleCards_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_MultipleCards::IsInitializedImpl,
            &GameEvent_MultipleCards::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_MultipleCards>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_MultipleCards>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_MultipleCards>(), &GameEvent_MultipleCards::ByteSizeLong,
                &GameEvent_MultipleCards::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_MultipleCards, _impl_._cached_size_),
            false,
        },
        &GameEvent_MultipleCards::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_MultipleCards::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_MultipleCards::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_MultipleCards, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_MultipleCards>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_MultipleCards, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_MultipleCards, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_MultipleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleCards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_MultipleCards::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_MultipleCards& this_ = static_cast<const GameEvent_MultipleCards&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_MultipleCards::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_MultipleCards& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleCards)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleCards)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_MultipleCards::ByteSizeLong(const MessageLite& base) {
          const GameEvent_MultipleCards& this_ = static_cast<const GameEvent_MultipleCards&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_MultipleCards::ByteSizeLong() const {
          const GameEvent_MultipleCards& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleCards)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_MultipleCards::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_MultipleCards*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultipleCards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleCards)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultipleCards::CopyFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_MultipleCards::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_MultipleCards&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_MultipleCards::InternalSwap(GameEvent_MultipleCards* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_MultipleCards::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_MultipleFouls::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_MultipleFouls>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleFouls::GameEvent_MultipleFouls(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleFouls)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_MultipleFouls::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_MultipleFouls& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        caused_game_events_{visibility, arena, from.caused_game_events_} {}

GameEvent_MultipleFouls::GameEvent_MultipleFouls(
    ::google::protobuf::Arena* arena,
    const GameEvent_MultipleFouls& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_MultipleFouls* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.by_team_ = from._impl_.by_team_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleFouls)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_MultipleFouls::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        caused_game_events_{visibility, arena} {}

inline void GameEvent_MultipleFouls::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_MultipleFouls::~GameEvent_MultipleFouls() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleFouls)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_MultipleFouls::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_MultipleFouls::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_MultipleFouls_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_MultipleFouls::IsInitializedImpl,
            &GameEvent_MultipleFouls::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_MultipleFouls>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_MultipleFouls>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_MultipleFouls>(), &GameEvent_MultipleFouls::ByteSizeLong,
                &GameEvent_MultipleFouls::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_._cached_size_),
            false,
        },
        &GameEvent_MultipleFouls::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_MultipleFouls::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GameEvent_MultipleFouls::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_MultipleFouls>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .GameEvent caused_game_events = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_.caused_game_events_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // repeated .GameEvent caused_game_events = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_MultipleFouls, _impl_.caused_game_events_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::GameEvent>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_MultipleFouls::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleFouls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.caused_game_events_.Clear();
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_MultipleFouls::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_MultipleFouls& this_ = static_cast<const GameEvent_MultipleFouls&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_MultipleFouls::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_MultipleFouls& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleFouls)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // repeated .GameEvent caused_game_events = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_caused_game_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_caused_game_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleFouls)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_MultipleFouls::ByteSizeLong(const MessageLite& base) {
          const GameEvent_MultipleFouls& this_ = static_cast<const GameEvent_MultipleFouls&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_MultipleFouls::ByteSizeLong() const {
          const GameEvent_MultipleFouls& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleFouls)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .GameEvent caused_game_events = 2;
             {
              total_size += 1UL * this_._internal_caused_game_events_size();
              for (const auto& msg : this_._internal_caused_game_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_MultipleFouls::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_MultipleFouls*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultipleFouls&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleFouls)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_caused_game_events()->MergeFrom(
      from._internal_caused_game_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultipleFouls::CopyFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_MultipleFouls::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_MultipleFouls&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_caused_game_events()))
    return false;
  return true;
}

void GameEvent_MultipleFouls::InternalSwap(GameEvent_MultipleFouls* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.caused_game_events_.InternalSwap(&other->_impl_.caused_game_events_);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_MultipleFouls::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_MultiplePlacementFailures::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_MultiplePlacementFailures>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultiplePlacementFailures)
}
GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(
    ::google::protobuf::Arena* arena, const GameEvent_MultiplePlacementFailures& from)
    : GameEvent_MultiplePlacementFailures(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_MultiplePlacementFailures::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_MultiplePlacementFailures::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_MultiplePlacementFailures::~GameEvent_MultiplePlacementFailures() {
  // @@protoc_insertion_point(destructor:GameEvent.MultiplePlacementFailures)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_MultiplePlacementFailures::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_MultiplePlacementFailures::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_MultiplePlacementFailures_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_MultiplePlacementFailures::IsInitializedImpl,
            &GameEvent_MultiplePlacementFailures::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_MultiplePlacementFailures>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_MultiplePlacementFailures>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_MultiplePlacementFailures>(), &GameEvent_MultiplePlacementFailures::ByteSizeLong,
                &GameEvent_MultiplePlacementFailures::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _impl_._cached_size_),
            false,
        },
        &GameEvent_MultiplePlacementFailures::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_MultiplePlacementFailures::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_MultiplePlacementFailures::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_MultiplePlacementFailures>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_MultiplePlacementFailures, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_MultiplePlacementFailures::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultiplePlacementFailures)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_MultiplePlacementFailures::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_MultiplePlacementFailures& this_ = static_cast<const GameEvent_MultiplePlacementFailures&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_MultiplePlacementFailures::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_MultiplePlacementFailures& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultiplePlacementFailures)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultiplePlacementFailures)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_MultiplePlacementFailures::ByteSizeLong(const MessageLite& base) {
          const GameEvent_MultiplePlacementFailures& this_ = static_cast<const GameEvent_MultiplePlacementFailures&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_MultiplePlacementFailures::ByteSizeLong() const {
          const GameEvent_MultiplePlacementFailures& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.MultiplePlacementFailures)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_MultiplePlacementFailures::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_MultiplePlacementFailures*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultiplePlacementFailures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultiplePlacementFailures)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_MultiplePlacementFailures::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_MultiplePlacementFailures&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_MultiplePlacementFailures::InternalSwap(GameEvent_MultiplePlacementFailures* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_MultiplePlacementFailures::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_KickTimeout::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_KickTimeout>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_KickTimeout::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_KickTimeout::GameEvent_KickTimeout(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KickTimeout)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_KickTimeout::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_KickTimeout& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_KickTimeout::GameEvent_KickTimeout(
    ::google::protobuf::Arena* arena,
    const GameEvent_KickTimeout& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_KickTimeout* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, time_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::time_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.KickTimeout)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_KickTimeout::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_KickTimeout::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::time_));
}
GameEvent_KickTimeout::~GameEvent_KickTimeout() {
  // @@protoc_insertion_point(destructor:GameEvent.KickTimeout)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_KickTimeout::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_KickTimeout::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_KickTimeout_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_KickTimeout::IsInitializedImpl,
            &GameEvent_KickTimeout::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_KickTimeout>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_KickTimeout>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_KickTimeout>(), &GameEvent_KickTimeout::ByteSizeLong,
                &GameEvent_KickTimeout::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_._cached_size_),
            false,
        },
        &GameEvent_KickTimeout::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_KickTimeout::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> GameEvent_KickTimeout::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_KickTimeout>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.by_team_)}},
    // optional .Vector2 location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.location_)}},
    // optional float time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .Vector2 location = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float time = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.time_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_KickTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KickTimeout)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_KickTimeout::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_KickTimeout& this_ = static_cast<const GameEvent_KickTimeout&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_KickTimeout::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_KickTimeout& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KickTimeout)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional .Vector2 location = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float time = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_time(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KickTimeout)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_KickTimeout::ByteSizeLong(const MessageLite& base) {
          const GameEvent_KickTimeout& this_ = static_cast<const GameEvent_KickTimeout&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_KickTimeout::ByteSizeLong() const {
          const GameEvent_KickTimeout& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.KickTimeout)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional float time = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_KickTimeout::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_KickTimeout*>(&to_msg);
  auto& from = static_cast<const GameEvent_KickTimeout&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KickTimeout)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_KickTimeout::CopyFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_KickTimeout::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_KickTimeout&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KickTimeout::InternalSwap(GameEvent_KickTimeout* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.time_)
      + sizeof(GameEvent_KickTimeout::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_KickTimeout::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_NoProgressInGame::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_NoProgressInGame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_._has_bits_);
};

void GameEvent_NoProgressInGame::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.NoProgressInGame)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_NoProgressInGame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_NoProgressInGame& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(
    ::google::protobuf::Arena* arena,
    const GameEvent_NoProgressInGame& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_NoProgressInGame* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.NoProgressInGame)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_NoProgressInGame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_NoProgressInGame::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, time_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::time_));
}
GameEvent_NoProgressInGame::~GameEvent_NoProgressInGame() {
  // @@protoc_insertion_point(destructor:GameEvent.NoProgressInGame)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_NoProgressInGame::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_NoProgressInGame::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_NoProgressInGame_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_NoProgressInGame::IsInitializedImpl,
            &GameEvent_NoProgressInGame::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_NoProgressInGame>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_NoProgressInGame>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_NoProgressInGame>(), &GameEvent_NoProgressInGame::ByteSizeLong,
                &GameEvent_NoProgressInGame::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_._cached_size_),
            false,
        },
        &GameEvent_NoProgressInGame::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_NoProgressInGame::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> GameEvent_NoProgressInGame::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_NoProgressInGame>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.time_)}},
    // optional .Vector2 location = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.location_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .Vector2 location = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float time = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_NoProgressInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.NoProgressInGame)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_NoProgressInGame::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_NoProgressInGame& this_ = static_cast<const GameEvent_NoProgressInGame&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_NoProgressInGame::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_NoProgressInGame& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.NoProgressInGame)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .Vector2 location = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float time = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_time(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.NoProgressInGame)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_NoProgressInGame::ByteSizeLong(const MessageLite& base) {
          const GameEvent_NoProgressInGame& this_ = static_cast<const GameEvent_NoProgressInGame&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_NoProgressInGame::ByteSizeLong() const {
          const GameEvent_NoProgressInGame& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.NoProgressInGame)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .Vector2 location = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
            // optional float time = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_NoProgressInGame::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_NoProgressInGame*>(&to_msg);
  auto& from = static_cast<const GameEvent_NoProgressInGame&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.NoProgressInGame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_NoProgressInGame::CopyFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_NoProgressInGame::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_NoProgressInGame&>(msg);
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_NoProgressInGame::InternalSwap(GameEvent_NoProgressInGame* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.time_)
      + sizeof(GameEvent_NoProgressInGame::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_NoProgressInGame::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_PlacementFailed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_PlacementFailed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementFailed::GameEvent_PlacementFailed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementFailed)
}
GameEvent_PlacementFailed::GameEvent_PlacementFailed(
    ::google::protobuf::Arena* arena, const GameEvent_PlacementFailed& from)
    : GameEvent_PlacementFailed(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_PlacementFailed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_PlacementFailed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           0,
           offsetof(Impl_, nearest_own_bot_distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::nearest_own_bot_distance_));
}
GameEvent_PlacementFailed::~GameEvent_PlacementFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementFailed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_PlacementFailed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_PlacementFailed::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_PlacementFailed_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_PlacementFailed::IsInitializedImpl,
            &GameEvent_PlacementFailed::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_PlacementFailed>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_PlacementFailed>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_PlacementFailed>(), &GameEvent_PlacementFailed::ByteSizeLong,
                &GameEvent_PlacementFailed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_._cached_size_),
            false,
        },
        &GameEvent_PlacementFailed::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_PlacementFailed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> GameEvent_PlacementFailed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_PlacementFailed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.by_team_)}},
    // optional float remaining_distance = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.remaining_distance_)}},
    // optional float nearest_own_bot_distance = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.nearest_own_bot_distance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional float remaining_distance = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.remaining_distance_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float nearest_own_bot_distance = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.nearest_own_bot_distance_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_PlacementFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementFailed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nearest_own_bot_distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.nearest_own_bot_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_PlacementFailed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_PlacementFailed& this_ = static_cast<const GameEvent_PlacementFailed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_PlacementFailed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_PlacementFailed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementFailed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional float remaining_distance = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_remaining_distance(), target);
          }

          // optional float nearest_own_bot_distance = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_nearest_own_bot_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementFailed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_PlacementFailed::ByteSizeLong(const MessageLite& base) {
          const GameEvent_PlacementFailed& this_ = static_cast<const GameEvent_PlacementFailed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_PlacementFailed::ByteSizeLong() const {
          const GameEvent_PlacementFailed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementFailed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x00000006u) {
            // optional float remaining_distance = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // optional float nearest_own_bot_distance = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_PlacementFailed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_PlacementFailed*>(&to_msg);
  auto& from = static_cast<const GameEvent_PlacementFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementFailed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remaining_distance_ = from._impl_.remaining_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.nearest_own_bot_distance_ = from._impl_.nearest_own_bot_distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PlacementFailed::CopyFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_PlacementFailed::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_PlacementFailed&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_PlacementFailed::InternalSwap(GameEvent_PlacementFailed* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.nearest_own_bot_distance_)
      + sizeof(GameEvent_PlacementFailed::_impl_.nearest_own_bot_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.by_team_)>(
          reinterpret_cast<char*>(&_impl_.by_team_),
          reinterpret_cast<char*>(&other->_impl_.by_team_));
}

::google::protobuf::Metadata GameEvent_PlacementFailed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_UnsportingBehaviorMinor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_UnsportingBehaviorMinor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMinor)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_UnsportingBehaviorMinor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_UnsportingBehaviorMinor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reason_(arena, from.reason_) {}

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(
    ::google::protobuf::Arena* arena,
    const GameEvent_UnsportingBehaviorMinor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_UnsportingBehaviorMinor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.by_team_ = from._impl_.by_team_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMinor)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_UnsportingBehaviorMinor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reason_(arena) {}

inline void GameEvent_UnsportingBehaviorMinor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_UnsportingBehaviorMinor::~GameEvent_UnsportingBehaviorMinor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMinor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_UnsportingBehaviorMinor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_UnsportingBehaviorMinor::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_UnsportingBehaviorMinor_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_UnsportingBehaviorMinor::IsInitializedImpl,
            &GameEvent_UnsportingBehaviorMinor::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_UnsportingBehaviorMinor>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_UnsportingBehaviorMinor>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_UnsportingBehaviorMinor>(), &GameEvent_UnsportingBehaviorMinor::ByteSizeLong,
                &GameEvent_UnsportingBehaviorMinor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_._cached_size_),
            false,
        },
        &GameEvent_UnsportingBehaviorMinor::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_UnsportingBehaviorMinor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 48, 2> GameEvent_UnsportingBehaviorMinor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_UnsportingBehaviorMinor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required string reason = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_.reason_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required string reason = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMinor, _impl_.reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 3},
  }}, {{
    "\41\0\6\0\0\0\0\0"
    "GameEvent.UnsportingBehaviorMinor"
    "reason"
  }},
};

PROTOBUF_NOINLINE void GameEvent_UnsportingBehaviorMinor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMinor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_UnsportingBehaviorMinor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_UnsportingBehaviorMinor& this_ = static_cast<const GameEvent_UnsportingBehaviorMinor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_UnsportingBehaviorMinor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_UnsportingBehaviorMinor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMinor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // required string reason = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.UnsportingBehaviorMinor.reason");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMinor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong(const MessageLite& base) {
          const GameEvent_UnsportingBehaviorMinor& this_ = static_cast<const GameEvent_UnsportingBehaviorMinor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong() const {
          const GameEvent_UnsportingBehaviorMinor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMinor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // required string reason = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_UnsportingBehaviorMinor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_UnsportingBehaviorMinor*>(&to_msg);
  auto& from = static_cast<const GameEvent_UnsportingBehaviorMinor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_UnsportingBehaviorMinor::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_UnsportingBehaviorMinor&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_UnsportingBehaviorMinor::InternalSwap(GameEvent_UnsportingBehaviorMinor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMinor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_UnsportingBehaviorMajor::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_UnsportingBehaviorMajor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMajor)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_UnsportingBehaviorMajor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_UnsportingBehaviorMajor& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reason_(arena, from.reason_) {}

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(
    ::google::protobuf::Arena* arena,
    const GameEvent_UnsportingBehaviorMajor& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_UnsportingBehaviorMajor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.by_team_ = from._impl_.by_team_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMajor)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_UnsportingBehaviorMajor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reason_(arena) {}

inline void GameEvent_UnsportingBehaviorMajor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_UnsportingBehaviorMajor::~GameEvent_UnsportingBehaviorMajor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMajor)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_UnsportingBehaviorMajor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_UnsportingBehaviorMajor::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_UnsportingBehaviorMajor_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_UnsportingBehaviorMajor::IsInitializedImpl,
            &GameEvent_UnsportingBehaviorMajor::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_UnsportingBehaviorMajor>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_UnsportingBehaviorMajor>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_UnsportingBehaviorMajor>(), &GameEvent_UnsportingBehaviorMajor::ByteSizeLong,
                &GameEvent_UnsportingBehaviorMajor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_._cached_size_),
            false,
        },
        &GameEvent_UnsportingBehaviorMajor::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_UnsportingBehaviorMajor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 48, 2> GameEvent_UnsportingBehaviorMajor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_UnsportingBehaviorMajor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required string reason = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_.reason_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required string reason = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_UnsportingBehaviorMajor, _impl_.reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {0, 3},
  }}, {{
    "\41\0\6\0\0\0\0\0"
    "GameEvent.UnsportingBehaviorMajor"
    "reason"
  }},
};

PROTOBUF_NOINLINE void GameEvent_UnsportingBehaviorMajor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMajor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_UnsportingBehaviorMajor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_UnsportingBehaviorMajor& this_ = static_cast<const GameEvent_UnsportingBehaviorMajor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_UnsportingBehaviorMajor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_UnsportingBehaviorMajor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMajor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // required string reason = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.UnsportingBehaviorMajor.reason");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMajor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong(const MessageLite& base) {
          const GameEvent_UnsportingBehaviorMajor& this_ = static_cast<const GameEvent_UnsportingBehaviorMajor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong() const {
          const GameEvent_UnsportingBehaviorMajor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMajor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // required string reason = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_UnsportingBehaviorMajor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_UnsportingBehaviorMajor*>(&to_msg);
  auto& from = static_cast<const GameEvent_UnsportingBehaviorMajor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_UnsportingBehaviorMajor::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_UnsportingBehaviorMajor&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_UnsportingBehaviorMajor::InternalSwap(GameEvent_UnsportingBehaviorMajor* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_UnsportingBehaviorMajor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_KeeperHeldBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_KeeperHeldBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_KeeperHeldBall::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KeeperHeldBall)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_KeeperHeldBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_KeeperHeldBall& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(
    ::google::protobuf::Arena* arena,
    const GameEvent_KeeperHeldBall& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_KeeperHeldBall* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, duration_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::duration_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.KeeperHeldBall)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_KeeperHeldBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_KeeperHeldBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, duration_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::duration_));
}
GameEvent_KeeperHeldBall::~GameEvent_KeeperHeldBall() {
  // @@protoc_insertion_point(destructor:GameEvent.KeeperHeldBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_KeeperHeldBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_KeeperHeldBall::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_KeeperHeldBall_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_KeeperHeldBall::IsInitializedImpl,
            &GameEvent_KeeperHeldBall::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_KeeperHeldBall>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_KeeperHeldBall>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_KeeperHeldBall>(), &GameEvent_KeeperHeldBall::ByteSizeLong,
                &GameEvent_KeeperHeldBall::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_._cached_size_),
            false,
        },
        &GameEvent_KeeperHeldBall::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_KeeperHeldBall::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> GameEvent_KeeperHeldBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_KeeperHeldBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.by_team_)}},
    // optional .Vector2 location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.location_)}},
    // optional float duration = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.duration_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .Vector2 location = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float duration = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.duration_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_KeeperHeldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KeeperHeldBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_KeeperHeldBall::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_KeeperHeldBall& this_ = static_cast<const GameEvent_KeeperHeldBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_KeeperHeldBall::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_KeeperHeldBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KeeperHeldBall)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional .Vector2 location = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional float duration = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_duration(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KeeperHeldBall)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_KeeperHeldBall::ByteSizeLong(const MessageLite& base) {
          const GameEvent_KeeperHeldBall& this_ = static_cast<const GameEvent_KeeperHeldBall&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_KeeperHeldBall::ByteSizeLong() const {
          const GameEvent_KeeperHeldBall& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.KeeperHeldBall)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
           {
            // optional float duration = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_KeeperHeldBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_KeeperHeldBall*>(&to_msg);
  auto& from = static_cast<const GameEvent_KeeperHeldBall&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KeeperHeldBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_KeeperHeldBall::CopyFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_KeeperHeldBall::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_KeeperHeldBall&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KeeperHeldBall::InternalSwap(GameEvent_KeeperHeldBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.duration_)
      + sizeof(GameEvent_KeeperHeldBall::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_KeeperHeldBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_PlacementSucceeded::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_PlacementSucceeded>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementSucceeded)
}
GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(
    ::google::protobuf::Arena* arena, const GameEvent_PlacementSucceeded& from)
    : GameEvent_PlacementSucceeded(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_PlacementSucceeded::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_PlacementSucceeded::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           0,
           offsetof(Impl_, distance_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::distance_));
}
GameEvent_PlacementSucceeded::~GameEvent_PlacementSucceeded() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementSucceeded)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_PlacementSucceeded::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_PlacementSucceeded::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_PlacementSucceeded_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_PlacementSucceeded::IsInitializedImpl,
            &GameEvent_PlacementSucceeded::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_PlacementSucceeded>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_PlacementSucceeded>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_PlacementSucceeded>(), &GameEvent_PlacementSucceeded::ByteSizeLong,
                &GameEvent_PlacementSucceeded::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_._cached_size_),
            false,
        },
        &GameEvent_PlacementSucceeded::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_PlacementSucceeded::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> GameEvent_PlacementSucceeded::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_PlacementSucceeded>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float distance = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.distance_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.by_team_)}},
    // optional float time_taken = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.time_taken_)}},
    // optional float precision = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.precision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional float time_taken = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.time_taken_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float precision = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.precision_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float distance = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.distance_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_PlacementSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementSucceeded)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_PlacementSucceeded::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_PlacementSucceeded& this_ = static_cast<const GameEvent_PlacementSucceeded&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_PlacementSucceeded::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_PlacementSucceeded& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementSucceeded)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional float time_taken = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_time_taken(), target);
          }

          // optional float precision = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_precision(), target);
          }

          // optional float distance = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_distance(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementSucceeded)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_PlacementSucceeded::ByteSizeLong(const MessageLite& base) {
          const GameEvent_PlacementSucceeded& this_ = static_cast<const GameEvent_PlacementSucceeded&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_PlacementSucceeded::ByteSizeLong() const {
          const GameEvent_PlacementSucceeded& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementSucceeded)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000eu) {
            // optional float time_taken = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // optional float precision = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float distance = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_PlacementSucceeded::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_PlacementSucceeded*>(&to_msg);
  auto& from = static_cast<const GameEvent_PlacementSucceeded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementSucceeded)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_taken_ = from._impl_.time_taken_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.precision_ = from._impl_.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PlacementSucceeded::CopyFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_PlacementSucceeded::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_PlacementSucceeded&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_PlacementSucceeded::InternalSwap(GameEvent_PlacementSucceeded* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.distance_)
      + sizeof(GameEvent_PlacementSucceeded::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.by_team_)>(
          reinterpret_cast<char*>(&_impl_.by_team_),
          reinterpret_cast<char*>(&other->_impl_.by_team_));
}

::google::protobuf::Metadata GameEvent_PlacementSucceeded::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_Prepared::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_Prepared>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_Prepared, _impl_._has_bits_);
};

GameEvent_Prepared::GameEvent_Prepared(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Prepared)
}
GameEvent_Prepared::GameEvent_Prepared(
    ::google::protobuf::Arena* arena, const GameEvent_Prepared& from)
    : GameEvent_Prepared(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_Prepared::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_Prepared::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_taken_ = {};
}
GameEvent_Prepared::~GameEvent_Prepared() {
  // @@protoc_insertion_point(destructor:GameEvent.Prepared)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_Prepared::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_Prepared::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_Prepared_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &GameEvent_Prepared::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_Prepared>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_Prepared>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_Prepared>(), &GameEvent_Prepared::ByteSizeLong,
                &GameEvent_Prepared::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_Prepared, _impl_._cached_size_),
            false,
        },
        &GameEvent_Prepared::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_Prepared::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> GameEvent_Prepared::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_Prepared, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_Prepared>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float time_taken = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_Prepared, _impl_.time_taken_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float time_taken = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_Prepared, _impl_.time_taken_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_Prepared::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Prepared)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_taken_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_Prepared::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_Prepared& this_ = static_cast<const GameEvent_Prepared&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_Prepared::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_Prepared& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Prepared)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional float time_taken = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_time_taken(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Prepared)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_Prepared::ByteSizeLong(const MessageLite& base) {
          const GameEvent_Prepared& this_ = static_cast<const GameEvent_Prepared&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_Prepared::ByteSizeLong() const {
          const GameEvent_Prepared& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.Prepared)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // optional float time_taken = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_Prepared::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_Prepared*>(&to_msg);
  auto& from = static_cast<const GameEvent_Prepared&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Prepared)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.time_taken_ = from._impl_.time_taken_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_Prepared::CopyFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameEvent_Prepared::InternalSwap(GameEvent_Prepared* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
        swap(_impl_.time_taken_, other->_impl_.time_taken_);
}

::google::protobuf::Metadata GameEvent_Prepared::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BotSubstitution::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BotSubstitution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BotSubstitution, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_BotSubstitution::GameEvent_BotSubstitution(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotSubstitution)
}
GameEvent_BotSubstitution::GameEvent_BotSubstitution(
    ::google::protobuf::Arena* arena, const GameEvent_BotSubstitution& from)
    : GameEvent_BotSubstitution(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BotSubstitution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BotSubstitution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_BotSubstitution::~GameEvent_BotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.BotSubstitution)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BotSubstitution::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BotSubstitution::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BotSubstitution_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BotSubstitution::IsInitializedImpl,
            &GameEvent_BotSubstitution::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BotSubstitution>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BotSubstitution>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BotSubstitution>(), &GameEvent_BotSubstitution::ByteSizeLong,
                &GameEvent_BotSubstitution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BotSubstitution, _impl_._cached_size_),
            false,
        },
        &GameEvent_BotSubstitution::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BotSubstitution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_BotSubstitution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BotSubstitution, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BotSubstitution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BotSubstitution, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BotSubstitution, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotSubstitution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BotSubstitution::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BotSubstitution& this_ = static_cast<const GameEvent_BotSubstitution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BotSubstitution::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BotSubstitution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotSubstitution)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotSubstitution)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BotSubstitution::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BotSubstitution& this_ = static_cast<const GameEvent_BotSubstitution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BotSubstitution::ByteSizeLong() const {
          const GameEvent_BotSubstitution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BotSubstitution)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BotSubstitution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BotSubstitution*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotSubstitution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotSubstitution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotSubstitution::CopyFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BotSubstitution::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BotSubstitution&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_BotSubstitution::InternalSwap(GameEvent_BotSubstitution* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_BotSubstitution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_ExcessiveBotSubstitution::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_ExcessiveBotSubstitution>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_ExcessiveBotSubstitution, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_ExcessiveBotSubstitution::GameEvent_ExcessiveBotSubstitution(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ExcessiveBotSubstitution)
}
GameEvent_ExcessiveBotSubstitution::GameEvent_ExcessiveBotSubstitution(
    ::google::protobuf::Arena* arena, const GameEvent_ExcessiveBotSubstitution& from)
    : GameEvent_ExcessiveBotSubstitution(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_ExcessiveBotSubstitution::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_ExcessiveBotSubstitution::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_ExcessiveBotSubstitution::~GameEvent_ExcessiveBotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.ExcessiveBotSubstitution)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_ExcessiveBotSubstitution::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_ExcessiveBotSubstitution::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_ExcessiveBotSubstitution_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_ExcessiveBotSubstitution::IsInitializedImpl,
            &GameEvent_ExcessiveBotSubstitution::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_ExcessiveBotSubstitution>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_ExcessiveBotSubstitution>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_ExcessiveBotSubstitution>(), &GameEvent_ExcessiveBotSubstitution::ByteSizeLong,
                &GameEvent_ExcessiveBotSubstitution::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_ExcessiveBotSubstitution, _impl_._cached_size_),
            false,
        },
        &GameEvent_ExcessiveBotSubstitution::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_ExcessiveBotSubstitution::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_ExcessiveBotSubstitution::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_ExcessiveBotSubstitution, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_ExcessiveBotSubstitution>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_ExcessiveBotSubstitution, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ExcessiveBotSubstitution, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_ExcessiveBotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ExcessiveBotSubstitution)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_ExcessiveBotSubstitution::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_ExcessiveBotSubstitution& this_ = static_cast<const GameEvent_ExcessiveBotSubstitution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_ExcessiveBotSubstitution::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_ExcessiveBotSubstitution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ExcessiveBotSubstitution)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ExcessiveBotSubstitution)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_ExcessiveBotSubstitution::ByteSizeLong(const MessageLite& base) {
          const GameEvent_ExcessiveBotSubstitution& this_ = static_cast<const GameEvent_ExcessiveBotSubstitution&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_ExcessiveBotSubstitution::ByteSizeLong() const {
          const GameEvent_ExcessiveBotSubstitution& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.ExcessiveBotSubstitution)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_ExcessiveBotSubstitution::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_ExcessiveBotSubstitution*>(&to_msg);
  auto& from = static_cast<const GameEvent_ExcessiveBotSubstitution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ExcessiveBotSubstitution)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ExcessiveBotSubstitution::CopyFrom(const GameEvent_ExcessiveBotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ExcessiveBotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_ExcessiveBotSubstitution::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_ExcessiveBotSubstitution&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_ExcessiveBotSubstitution::InternalSwap(GameEvent_ExcessiveBotSubstitution* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_ExcessiveBotSubstitution::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_ChallengeFlag::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_ChallengeFlag>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlag, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChallengeFlag)
}
GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(
    ::google::protobuf::Arena* arena, const GameEvent_ChallengeFlag& from)
    : GameEvent_ChallengeFlag(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_ChallengeFlag::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_ChallengeFlag::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_ChallengeFlag::~GameEvent_ChallengeFlag() {
  // @@protoc_insertion_point(destructor:GameEvent.ChallengeFlag)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_ChallengeFlag::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_ChallengeFlag::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_ChallengeFlag_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_ChallengeFlag::IsInitializedImpl,
            &GameEvent_ChallengeFlag::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_ChallengeFlag>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_ChallengeFlag>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_ChallengeFlag>(), &GameEvent_ChallengeFlag::ByteSizeLong,
                &GameEvent_ChallengeFlag::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlag, _impl_._cached_size_),
            false,
        },
        &GameEvent_ChallengeFlag::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_ChallengeFlag::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_ChallengeFlag::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlag, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_ChallengeFlag>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlag, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlag, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_ChallengeFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChallengeFlag)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_ChallengeFlag::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_ChallengeFlag& this_ = static_cast<const GameEvent_ChallengeFlag&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_ChallengeFlag::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_ChallengeFlag& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChallengeFlag)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChallengeFlag)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_ChallengeFlag::ByteSizeLong(const MessageLite& base) {
          const GameEvent_ChallengeFlag& this_ = static_cast<const GameEvent_ChallengeFlag&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_ChallengeFlag::ByteSizeLong() const {
          const GameEvent_ChallengeFlag& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.ChallengeFlag)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_ChallengeFlag::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_ChallengeFlag*>(&to_msg);
  auto& from = static_cast<const GameEvent_ChallengeFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChallengeFlag)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ChallengeFlag::CopyFrom(const GameEvent_ChallengeFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChallengeFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_ChallengeFlag::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_ChallengeFlag&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_ChallengeFlag::InternalSwap(GameEvent_ChallengeFlag* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_ChallengeFlag::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_ChallengeFlagHandled::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_ChallengeFlagHandled>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_ChallengeFlagHandled::GameEvent_ChallengeFlagHandled(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChallengeFlagHandled)
}
GameEvent_ChallengeFlagHandled::GameEvent_ChallengeFlagHandled(
    ::google::protobuf::Arena* arena, const GameEvent_ChallengeFlagHandled& from)
    : GameEvent_ChallengeFlagHandled(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_ChallengeFlagHandled::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_ChallengeFlagHandled::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           0,
           offsetof(Impl_, accepted_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::accepted_));
}
GameEvent_ChallengeFlagHandled::~GameEvent_ChallengeFlagHandled() {
  // @@protoc_insertion_point(destructor:GameEvent.ChallengeFlagHandled)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_ChallengeFlagHandled::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_ChallengeFlagHandled::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_ChallengeFlagHandled_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_ChallengeFlagHandled::IsInitializedImpl,
            &GameEvent_ChallengeFlagHandled::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_ChallengeFlagHandled>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_ChallengeFlagHandled>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_ChallengeFlagHandled>(), &GameEvent_ChallengeFlagHandled::ByteSizeLong,
                &GameEvent_ChallengeFlagHandled::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_._cached_size_),
            false,
        },
        &GameEvent_ChallengeFlagHandled::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_ChallengeFlagHandled::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> GameEvent_ChallengeFlagHandled::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_ChallengeFlagHandled>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required bool accepted = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameEvent_ChallengeFlagHandled, _impl_.accepted_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.accepted_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required bool accepted = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.accepted_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_ChallengeFlagHandled::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChallengeFlagHandled)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.accepted_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.accepted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_ChallengeFlagHandled::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_ChallengeFlagHandled& this_ = static_cast<const GameEvent_ChallengeFlagHandled&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_ChallengeFlagHandled::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_ChallengeFlagHandled& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChallengeFlagHandled)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // required bool accepted = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_accepted(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChallengeFlagHandled)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_ChallengeFlagHandled::ByteSizeLong(const MessageLite& base) {
          const GameEvent_ChallengeFlagHandled& this_ = static_cast<const GameEvent_ChallengeFlagHandled&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_ChallengeFlagHandled::ByteSizeLong() const {
          const GameEvent_ChallengeFlagHandled& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.ChallengeFlagHandled)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
            // required bool accepted = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_ChallengeFlagHandled::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_ChallengeFlagHandled*>(&to_msg);
  auto& from = static_cast<const GameEvent_ChallengeFlagHandled&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChallengeFlagHandled)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accepted_ = from._impl_.accepted_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ChallengeFlagHandled::CopyFrom(const GameEvent_ChallengeFlagHandled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChallengeFlagHandled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_ChallengeFlagHandled::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_ChallengeFlagHandled&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_ChallengeFlagHandled::InternalSwap(GameEvent_ChallengeFlagHandled* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.accepted_)
      + sizeof(GameEvent_ChallengeFlagHandled::_impl_.accepted_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_ChallengeFlagHandled, _impl_.by_team_)>(
          reinterpret_cast<char*>(&_impl_.by_team_),
          reinterpret_cast<char*>(&other->_impl_.by_team_));
}

::google::protobuf::Metadata GameEvent_ChallengeFlagHandled::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_EmergencyStop::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_EmergencyStop>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_EmergencyStop, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_EmergencyStop::GameEvent_EmergencyStop(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.EmergencyStop)
}
GameEvent_EmergencyStop::GameEvent_EmergencyStop(
    ::google::protobuf::Arena* arena, const GameEvent_EmergencyStop& from)
    : GameEvent_EmergencyStop(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_EmergencyStop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_EmergencyStop::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.by_team_ = {};
}
GameEvent_EmergencyStop::~GameEvent_EmergencyStop() {
  // @@protoc_insertion_point(destructor:GameEvent.EmergencyStop)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_EmergencyStop::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_EmergencyStop::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_EmergencyStop_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_EmergencyStop::IsInitializedImpl,
            &GameEvent_EmergencyStop::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_EmergencyStop>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_EmergencyStop>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_EmergencyStop>(), &GameEvent_EmergencyStop::ByteSizeLong,
                &GameEvent_EmergencyStop::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_EmergencyStop, _impl_._cached_size_),
            false,
        },
        &GameEvent_EmergencyStop::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_EmergencyStop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GameEvent_EmergencyStop::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_EmergencyStop, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_EmergencyStop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 0, 2, PROTOBUF_FIELD_OFFSET(GameEvent_EmergencyStop, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_EmergencyStop, _impl_.by_team_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_EmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.EmergencyStop)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_EmergencyStop::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_EmergencyStop& this_ = static_cast<const GameEvent_EmergencyStop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_EmergencyStop::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_EmergencyStop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.EmergencyStop)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.EmergencyStop)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_EmergencyStop::ByteSizeLong(const MessageLite& base) {
          const GameEvent_EmergencyStop& this_ = static_cast<const GameEvent_EmergencyStop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_EmergencyStop::ByteSizeLong() const {
          const GameEvent_EmergencyStop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.EmergencyStop)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // required .Team by_team = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_EmergencyStop::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_EmergencyStop*>(&to_msg);
  auto& from = static_cast<const GameEvent_EmergencyStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.EmergencyStop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_impl_.by_team_ = from._impl_.by_team_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_EmergencyStop::CopyFrom(const GameEvent_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_EmergencyStop::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_EmergencyStop&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void GameEvent_EmergencyStop::InternalSwap(GameEvent_EmergencyStop* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::google::protobuf::Metadata GameEvent_EmergencyStop::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_TooManyRobots::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_TooManyRobots>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_TooManyRobots::clear_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.TooManyRobots)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_TooManyRobots::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_TooManyRobots& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_TooManyRobots::GameEvent_TooManyRobots(
    ::google::protobuf::Arena* arena,
    const GameEvent_TooManyRobots& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_TooManyRobots* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ball_location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.ball_location_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, by_team_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, by_team_),
           offsetof(Impl_, num_robots_on_field_) -
               offsetof(Impl_, by_team_) +
               sizeof(Impl_::num_robots_on_field_));

  // @@protoc_insertion_point(copy_constructor:GameEvent.TooManyRobots)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_TooManyRobots::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_TooManyRobots::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ball_location_),
           0,
           offsetof(Impl_, num_robots_on_field_) -
               offsetof(Impl_, ball_location_) +
               sizeof(Impl_::num_robots_on_field_));
}
GameEvent_TooManyRobots::~GameEvent_TooManyRobots() {
  // @@protoc_insertion_point(destructor:GameEvent.TooManyRobots)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_TooManyRobots::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.ball_location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_TooManyRobots::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_TooManyRobots_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_TooManyRobots::IsInitializedImpl,
            &GameEvent_TooManyRobots::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_TooManyRobots>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_TooManyRobots>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_TooManyRobots>(), &GameEvent_TooManyRobots::ByteSizeLong,
                &GameEvent_TooManyRobots::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_._cached_size_),
            false,
        },
        &GameEvent_TooManyRobots::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_TooManyRobots::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameEvent_TooManyRobots::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_TooManyRobots>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 ball_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.ball_location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.by_team_)}},
    // optional int32 num_robots_allowed = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_TooManyRobots, _impl_.num_robots_allowed_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_allowed_)}},
    // optional int32 num_robots_on_field = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent_TooManyRobots, _impl_.num_robots_on_field_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_on_field_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 num_robots_allowed = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_allowed_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 num_robots_on_field = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_on_field_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .Vector2 ball_location = 4;
    {PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.ball_location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_TooManyRobots::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.TooManyRobots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.ball_location_ != nullptr);
    _impl_.ball_location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.num_robots_on_field_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.num_robots_on_field_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_TooManyRobots::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_TooManyRobots& this_ = static_cast<const GameEvent_TooManyRobots&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_TooManyRobots::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_TooManyRobots& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.TooManyRobots)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional int32 num_robots_allowed = 2;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_num_robots_allowed(), target);
          }

          // optional int32 num_robots_on_field = 3;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_num_robots_on_field(), target);
          }

          // optional .Vector2 ball_location = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.ball_location_, this_._impl_.ball_location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.TooManyRobots)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_TooManyRobots::ByteSizeLong(const MessageLite& base) {
          const GameEvent_TooManyRobots& this_ = static_cast<const GameEvent_TooManyRobots&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_TooManyRobots::ByteSizeLong() const {
          const GameEvent_TooManyRobots& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.TooManyRobots)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 ball_location = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ball_location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional int32 num_robots_allowed = 2;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_robots_allowed());
            }
            // optional int32 num_robots_on_field = 3;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_robots_on_field());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_TooManyRobots::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_TooManyRobots*>(&to_msg);
  auto& from = static_cast<const GameEvent_TooManyRobots&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.TooManyRobots)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ball_location_ != nullptr);
      if (_this->_impl_.ball_location_ == nullptr) {
        _this->_impl_.ball_location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.ball_location_);
      } else {
        _this->_impl_.ball_location_->MergeFrom(*from._impl_.ball_location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_robots_allowed_ = from._impl_.num_robots_allowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_robots_on_field_ = from._impl_.num_robots_on_field_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_TooManyRobots::CopyFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_TooManyRobots::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_TooManyRobots&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_TooManyRobots::InternalSwap(GameEvent_TooManyRobots* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_on_field_)
      + sizeof(GameEvent_TooManyRobots::_impl_.num_robots_on_field_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.ball_location_)>(
          reinterpret_cast<char*>(&_impl_.ball_location_),
          reinterpret_cast<char*>(&other->_impl_.ball_location_));
}

::google::protobuf::Metadata GameEvent_TooManyRobots::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_BoundaryCrossing::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_BoundaryCrossing>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

void GameEvent_BoundaryCrossing::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BoundaryCrossing)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BoundaryCrossing::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_BoundaryCrossing& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(
    ::google::protobuf::Arena* arena,
    const GameEvent_BoundaryCrossing& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_BoundaryCrossing* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.by_team_ = from._impl_.by_team_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.BoundaryCrossing)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_BoundaryCrossing::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent_BoundaryCrossing::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_team_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_team_));
}
GameEvent_BoundaryCrossing::~GameEvent_BoundaryCrossing() {
  // @@protoc_insertion_point(destructor:GameEvent.BoundaryCrossing)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_BoundaryCrossing::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_BoundaryCrossing::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_BoundaryCrossing_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_BoundaryCrossing::IsInitializedImpl,
            &GameEvent_BoundaryCrossing::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_BoundaryCrossing>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_BoundaryCrossing>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_BoundaryCrossing>(), &GameEvent_BoundaryCrossing::ByteSizeLong,
                &GameEvent_BoundaryCrossing::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_._cached_size_),
            false,
        },
        &GameEvent_BoundaryCrossing::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_BoundaryCrossing::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GameEvent_BoundaryCrossing::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_BoundaryCrossing>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .Vector2 location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.location_)}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 1, 2, PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.by_team_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.by_team_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .Vector2 location = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameEvent_BoundaryCrossing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BoundaryCrossing)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_BoundaryCrossing::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_BoundaryCrossing& this_ = static_cast<const GameEvent_BoundaryCrossing&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_BoundaryCrossing::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_BoundaryCrossing& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BoundaryCrossing)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional .Vector2 location = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BoundaryCrossing)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_BoundaryCrossing::ByteSizeLong(const MessageLite& base) {
          const GameEvent_BoundaryCrossing& this_ = static_cast<const GameEvent_BoundaryCrossing&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_BoundaryCrossing::ByteSizeLong() const {
          const GameEvent_BoundaryCrossing& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.BoundaryCrossing)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional .Vector2 location = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_BoundaryCrossing::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_BoundaryCrossing*>(&to_msg);
  auto& from = static_cast<const GameEvent_BoundaryCrossing&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BoundaryCrossing)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BoundaryCrossing::CopyFrom(const GameEvent_BoundaryCrossing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BoundaryCrossing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_BoundaryCrossing::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_BoundaryCrossing&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BoundaryCrossing::InternalSwap(GameEvent_BoundaryCrossing* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.by_team_)
      + sizeof(GameEvent_BoundaryCrossing::_impl_.by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_BoundaryCrossing::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent_PenaltyKickFailed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent_PenaltyKickFailed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

void GameEvent_PenaltyKickFailed::clear_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PenaltyKickFailed)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_PenaltyKickFailed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent_PenaltyKickFailed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reason_(arena, from.reason_) {}

GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(
    ::google::protobuf::Arena* arena,
    const GameEvent_PenaltyKickFailed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent_PenaltyKickFailed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2>(
                              arena, *from._impl_.location_)
                        : nullptr;
  _impl_.by_team_ = from._impl_.by_team_;

  // @@protoc_insertion_point(copy_constructor:GameEvent.PenaltyKickFailed)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent_PenaltyKickFailed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reason_(arena) {}

inline void GameEvent_PenaltyKickFailed::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, by_team_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::by_team_));
}
GameEvent_PenaltyKickFailed::~GameEvent_PenaltyKickFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PenaltyKickFailed)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent_PenaltyKickFailed::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reason_.Destroy();
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent_PenaltyKickFailed::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_PenaltyKickFailed_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent_PenaltyKickFailed::IsInitializedImpl,
            &GameEvent_PenaltyKickFailed::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent_PenaltyKickFailed>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent_PenaltyKickFailed>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent_PenaltyKickFailed>(), &GameEvent_PenaltyKickFailed::ByteSizeLong,
                &GameEvent_PenaltyKickFailed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_._cached_size_),
            false,
        },
        &GameEvent_PenaltyKickFailed::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent_PenaltyKickFailed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 42, 2> GameEvent_PenaltyKickFailed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent_PenaltyKickFailed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .Team by_team = 1;
    {::_pbi::TcParser::FastEr0S1,
     {8, 2, 2, PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.by_team_)}},
    // optional .Vector2 location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.location_)}},
    // optional string reason = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .Team by_team = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.by_team_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .Vector2 location = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.location_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string reason = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2>()},
    {0, 3},
  }}, {{
    "\33\0\0\6\0\0\0\0"
    "GameEvent.PenaltyKickFailed"
    "reason"
  }},
};

PROTOBUF_NOINLINE void GameEvent_PenaltyKickFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PenaltyKickFailed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent_PenaltyKickFailed::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent_PenaltyKickFailed& this_ = static_cast<const GameEvent_PenaltyKickFailed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent_PenaltyKickFailed::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent_PenaltyKickFailed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PenaltyKickFailed)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .Team by_team = 1;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_by_team(), target);
          }

          // optional .Vector2 location = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.location_, this_._impl_.location_->GetCachedSize(), target,
                stream);
          }

          // optional string reason = 3;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.PenaltyKickFailed.reason");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PenaltyKickFailed)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent_PenaltyKickFailed::ByteSizeLong(const MessageLite& base) {
          const GameEvent_PenaltyKickFailed& this_ = static_cast<const GameEvent_PenaltyKickFailed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent_PenaltyKickFailed::ByteSizeLong() const {
          const GameEvent_PenaltyKickFailed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent.PenaltyKickFailed)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional string reason = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // optional .Vector2 location = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.location_);
            }
          }
           {
            // required .Team by_team = 1;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_by_team());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent_PenaltyKickFailed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent_PenaltyKickFailed*>(&to_msg);
  auto& from = static_cast<const GameEvent_PenaltyKickFailed&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PenaltyKickFailed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.location_ != nullptr);
      if (_this->_impl_.location_ == nullptr) {
        _this->_impl_.location_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2>(arena, *from._impl_.location_);
      } else {
        _this->_impl_.location_->MergeFrom(*from._impl_.location_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PenaltyKickFailed::CopyFrom(const GameEvent_PenaltyKickFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PenaltyKickFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent_PenaltyKickFailed::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent_PenaltyKickFailed&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_PenaltyKickFailed::InternalSwap(GameEvent_PenaltyKickFailed* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.by_team_)
      + sizeof(GameEvent_PenaltyKickFailed::_impl_.by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata GameEvent_PenaltyKickFailed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_._oneof_case_);
};

void GameEvent::set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* ball_left_field_touch_line) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (ball_left_field_touch_line) {
    ::google::protobuf::Arena* submessage_arena = ball_left_field_touch_line->GetArena();
    if (message_arena != submessage_arena) {
      ball_left_field_touch_line = ::google::protobuf::internal::GetOwnedMessage(message_arena, ball_left_field_touch_line, submessage_arena);
    }
    set_has_ball_left_field_touch_line();
    _impl_.event_.ball_left_field_touch_line_ = ball_left_field_touch_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_touch_line)
}
void GameEvent::set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* ball_left_field_goal_line) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (ball_left_field_goal_line) {
    ::google::protobuf::Arena* submessage_arena = ball_left_field_goal_line->GetArena();
    if (message_arena != submessage_arena) {
      ball_left_field_goal_line = ::google::protobuf::internal::GetOwnedMessage(message_arena, ball_left_field_goal_line, submessage_arena);
    }
    set_has_ball_left_field_goal_line();
    _impl_.event_.ball_left_field_goal_line_ = ball_left_field_goal_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_goal_line)
}
void GameEvent::set_allocated_aimless_kick(::GameEvent_AimlessKick* aimless_kick) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (aimless_kick) {
    ::google::protobuf::Arena* submessage_arena = aimless_kick->GetArena();
    if (message_arena != submessage_arena) {
      aimless_kick = ::google::protobuf::internal::GetOwnedMessage(message_arena, aimless_kick, submessage_arena);
    }
    set_has_aimless_kick();
    _impl_.event_.aimless_kick_ = aimless_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.aimless_kick)
}
void GameEvent::set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_too_close_to_defense_area) {
    ::google::protobuf::Arena* submessage_arena = attacker_too_close_to_defense_area->GetArena();
    if (message_arena != submessage_arena) {
      attacker_too_close_to_defense_area = ::google::protobuf::internal::GetOwnedMessage(message_arena, attacker_too_close_to_defense_area, submessage_arena);
    }
    set_has_attacker_too_close_to_defense_area();
    _impl_.event_.attacker_too_close_to_defense_area_ = attacker_too_close_to_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}
void GameEvent::set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* defender_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (defender_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = defender_in_defense_area->GetArena();
    if (message_arena != submessage_arena) {
      defender_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(message_arena, defender_in_defense_area, submessage_arena);
    }
    set_has_defender_in_defense_area();
    _impl_.event_.defender_in_defense_area_ = defender_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area)
}
void GameEvent::set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* boundary_crossing) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (boundary_crossing) {
    ::google::protobuf::Arena* submessage_arena = boundary_crossing->GetArena();
    if (message_arena != submessage_arena) {
      boundary_crossing = ::google::protobuf::internal::GetOwnedMessage(message_arena, boundary_crossing, submessage_arena);
    }
    set_has_boundary_crossing();
    _impl_.event_.boundary_crossing_ = boundary_crossing;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.boundary_crossing)
}
void GameEvent::set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* keeper_held_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (keeper_held_ball) {
    ::google::protobuf::Arena* submessage_arena = keeper_held_ball->GetArena();
    if (message_arena != submessage_arena) {
      keeper_held_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, keeper_held_ball, submessage_arena);
    }
    set_has_keeper_held_ball();
    _impl_.event_.keeper_held_ball_ = keeper_held_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.keeper_held_ball)
}
void GameEvent::set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_dribbled_ball_too_far) {
    ::google::protobuf::Arena* submessage_arena = bot_dribbled_ball_too_far->GetArena();
    if (message_arena != submessage_arena) {
      bot_dribbled_ball_too_far = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_dribbled_ball_too_far, submessage_arena);
    }
    set_has_bot_dribbled_ball_too_far();
    _impl_.event_.bot_dribbled_ball_too_far_ = bot_dribbled_ball_too_far;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}
void GameEvent::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_pushed_bot) {
    ::google::protobuf::Arena* submessage_arena = bot_pushed_bot->GetArena();
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_pushed_bot, submessage_arena);
    }
    set_has_bot_pushed_bot();
    _impl_.event_.bot_pushed_bot_ = bot_pushed_bot;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot)
}
void GameEvent::set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_held_ball_deliberately) {
    ::google::protobuf::Arena* submessage_arena = bot_held_ball_deliberately->GetArena();
    if (message_arena != submessage_arena) {
      bot_held_ball_deliberately = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_held_ball_deliberately, submessage_arena);
    }
    set_has_bot_held_ball_deliberately();
    _impl_.event_.bot_held_ball_deliberately_ = bot_held_ball_deliberately;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_held_ball_deliberately)
}
void GameEvent::set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* bot_tipped_over) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_tipped_over) {
    ::google::protobuf::Arena* submessage_arena = bot_tipped_over->GetArena();
    if (message_arena != submessage_arena) {
      bot_tipped_over = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_tipped_over, submessage_arena);
    }
    set_has_bot_tipped_over();
    _impl_.event_.bot_tipped_over_ = bot_tipped_over;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_tipped_over)
}
void GameEvent::set_allocated_bot_dropped_parts(::GameEvent_BotDroppedParts* bot_dropped_parts) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_dropped_parts) {
    ::google::protobuf::Arena* submessage_arena = bot_dropped_parts->GetArena();
    if (message_arena != submessage_arena) {
      bot_dropped_parts = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_dropped_parts, submessage_arena);
    }
    set_has_bot_dropped_parts();
    _impl_.event_.bot_dropped_parts_ = bot_dropped_parts;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dropped_parts)
}
void GameEvent::set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_ball_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = attacker_touched_ball_in_defense_area->GetArena();
    if (message_arena != submessage_arena) {
      attacker_touched_ball_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(message_arena, attacker_touched_ball_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_ball_in_defense_area();
    _impl_.event_.attacker_touched_ball_in_defense_area_ = attacker_touched_ball_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}
void GameEvent::set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_kicked_ball_too_fast) {
    ::google::protobuf::Arena* submessage_arena = bot_kicked_ball_too_fast->GetArena();
    if (message_arena != submessage_arena) {
      bot_kicked_ball_too_fast = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_kicked_ball_too_fast, submessage_arena);
    }
    set_has_bot_kicked_ball_too_fast();
    _impl_.event_.bot_kicked_ball_too_fast_ = bot_kicked_ball_too_fast;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}
void GameEvent::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_unique) {
    ::google::protobuf::Arena* submessage_arena = bot_crash_unique->GetArena();
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_crash_unique, submessage_arena);
    }
    set_has_bot_crash_unique();
    _impl_.event_.bot_crash_unique_ = bot_crash_unique;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique)
}
void GameEvent::set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* bot_crash_drawn) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_drawn) {
    ::google::protobuf::Arena* submessage_arena = bot_crash_drawn->GetArena();
    if (message_arena != submessage_arena) {
      bot_crash_drawn = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_crash_drawn, submessage_arena);
    }
    set_has_bot_crash_drawn();
    _impl_.event_.bot_crash_drawn_ = bot_crash_drawn;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_drawn)
}
void GameEvent::set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (defender_too_close_to_kick_point) {
    ::google::protobuf::Arena* submessage_arena = defender_too_close_to_kick_point->GetArena();
    if (message_arena != submessage_arena) {
      defender_too_close_to_kick_point = ::google::protobuf::internal::GetOwnedMessage(message_arena, defender_too_close_to_kick_point, submessage_arena);
    }
    set_has_defender_too_close_to_kick_point();
    _impl_.event_.defender_too_close_to_kick_point_ = defender_too_close_to_kick_point;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_too_close_to_kick_point)
}
void GameEvent::set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* bot_too_fast_in_stop) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_too_fast_in_stop) {
    ::google::protobuf::Arena* submessage_arena = bot_too_fast_in_stop->GetArena();
    if (message_arena != submessage_arena) {
      bot_too_fast_in_stop = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_too_fast_in_stop, submessage_arena);
    }
    set_has_bot_too_fast_in_stop();
    _impl_.event_.bot_too_fast_in_stop_ = bot_too_fast_in_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_too_fast_in_stop)
}
void GameEvent::set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* bot_interfered_placement) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_interfered_placement) {
    ::google::protobuf::Arena* submessage_arena = bot_interfered_placement->GetArena();
    if (message_arena != submessage_arena) {
      bot_interfered_placement = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_interfered_placement, submessage_arena);
    }
    set_has_bot_interfered_placement();
    _impl_.event_.bot_interfered_placement_ = bot_interfered_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_interfered_placement)
}
void GameEvent::set_allocated_possible_goal(::GameEvent_Goal* possible_goal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (possible_goal) {
    ::google::protobuf::Arena* submessage_arena = possible_goal->GetArena();
    if (message_arena != submessage_arena) {
      possible_goal = ::google::protobuf::internal::GetOwnedMessage(message_arena, possible_goal, submessage_arena);
    }
    set_has_possible_goal();
    _impl_.event_.possible_goal_ = possible_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.possible_goal)
}
void GameEvent::set_allocated_goal(::GameEvent_Goal* goal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (goal) {
    ::google::protobuf::Arena* submessage_arena = goal->GetArena();
    if (message_arena != submessage_arena) {
      goal = ::google::protobuf::internal::GetOwnedMessage(message_arena, goal, submessage_arena);
    }
    set_has_goal();
    _impl_.event_.goal_ = goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.goal)
}
void GameEvent::set_allocated_invalid_goal(::GameEvent_Goal* invalid_goal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (invalid_goal) {
    ::google::protobuf::Arena* submessage_arena = invalid_goal->GetArena();
    if (message_arena != submessage_arena) {
      invalid_goal = ::google::protobuf::internal::GetOwnedMessage(message_arena, invalid_goal, submessage_arena);
    }
    set_has_invalid_goal();
    _impl_.event_.invalid_goal_ = invalid_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.invalid_goal)
}
void GameEvent::set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_double_touched_ball) {
    ::google::protobuf::Arena* submessage_arena = attacker_double_touched_ball->GetArena();
    if (message_arena != submessage_arena) {
      attacker_double_touched_ball = ::google::protobuf::internal::GetOwnedMessage(message_arena, attacker_double_touched_ball, submessage_arena);
    }
    set_has_attacker_double_touched_ball();
    _impl_.event_.attacker_double_touched_ball_ = attacker_double_touched_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_double_touched_ball)
}
void GameEvent::set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* placement_succeeded) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (placement_succeeded) {
    ::google::protobuf::Arena* submessage_arena = placement_succeeded->GetArena();
    if (message_arena != submessage_arena) {
      placement_succeeded = ::google::protobuf::internal::GetOwnedMessage(message_arena, placement_succeeded, submessage_arena);
    }
    set_has_placement_succeeded();
    _impl_.event_.placement_succeeded_ = placement_succeeded;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_succeeded)
}
void GameEvent::set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* penalty_kick_failed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (penalty_kick_failed) {
    ::google::protobuf::Arena* submessage_arena = penalty_kick_failed->GetArena();
    if (message_arena != submessage_arena) {
      penalty_kick_failed = ::google::protobuf::internal::GetOwnedMessage(message_arena, penalty_kick_failed, submessage_arena);
    }
    set_has_penalty_kick_failed();
    _impl_.event_.penalty_kick_failed_ = penalty_kick_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.penalty_kick_failed)
}
void GameEvent::set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* no_progress_in_game) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (no_progress_in_game) {
    ::google::protobuf::Arena* submessage_arena = no_progress_in_game->GetArena();
    if (message_arena != submessage_arena) {
      no_progress_in_game = ::google::protobuf::internal::GetOwnedMessage(message_arena, no_progress_in_game, submessage_arena);
    }
    set_has_no_progress_in_game();
    _impl_.event_.no_progress_in_game_ = no_progress_in_game;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.no_progress_in_game)
}
void GameEvent::set_allocated_placement_failed(::GameEvent_PlacementFailed* placement_failed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (placement_failed) {
    ::google::protobuf::Arena* submessage_arena = placement_failed->GetArena();
    if (message_arena != submessage_arena) {
      placement_failed = ::google::protobuf::internal::GetOwnedMessage(message_arena, placement_failed, submessage_arena);
    }
    set_has_placement_failed();
    _impl_.event_.placement_failed_ = placement_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_failed)
}
void GameEvent::set_allocated_multiple_cards(::GameEvent_MultipleCards* multiple_cards) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_cards) {
    ::google::protobuf::Arena* submessage_arena = multiple_cards->GetArena();
    if (message_arena != submessage_arena) {
      multiple_cards = ::google::protobuf::internal::GetOwnedMessage(message_arena, multiple_cards, submessage_arena);
    }
    set_has_multiple_cards();
    _impl_.event_.multiple_cards_ = multiple_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_cards)
}
void GameEvent::set_allocated_multiple_fouls(::GameEvent_MultipleFouls* multiple_fouls) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_fouls) {
    ::google::protobuf::Arena* submessage_arena = multiple_fouls->GetArena();
    if (message_arena != submessage_arena) {
      multiple_fouls = ::google::protobuf::internal::GetOwnedMessage(message_arena, multiple_fouls, submessage_arena);
    }
    set_has_multiple_fouls();
    _impl_.event_.multiple_fouls_ = multiple_fouls;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_fouls)
}
void GameEvent::set_allocated_bot_substitution(::GameEvent_BotSubstitution* bot_substitution) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_substitution) {
    ::google::protobuf::Arena* submessage_arena = bot_substitution->GetArena();
    if (message_arena != submessage_arena) {
      bot_substitution = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_substitution, submessage_arena);
    }
    set_has_bot_substitution();
    _impl_.event_.bot_substitution_ = bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_substitution)
}
void GameEvent::set_allocated_excessive_bot_substitution(::GameEvent_ExcessiveBotSubstitution* excessive_bot_substitution) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (excessive_bot_substitution) {
    ::google::protobuf::Arena* submessage_arena = excessive_bot_substitution->GetArena();
    if (message_arena != submessage_arena) {
      excessive_bot_substitution = ::google::protobuf::internal::GetOwnedMessage(message_arena, excessive_bot_substitution, submessage_arena);
    }
    set_has_excessive_bot_substitution();
    _impl_.event_.excessive_bot_substitution_ = excessive_bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.excessive_bot_substitution)
}
void GameEvent::set_allocated_too_many_robots(::GameEvent_TooManyRobots* too_many_robots) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (too_many_robots) {
    ::google::protobuf::Arena* submessage_arena = too_many_robots->GetArena();
    if (message_arena != submessage_arena) {
      too_many_robots = ::google::protobuf::internal::GetOwnedMessage(message_arena, too_many_robots, submessage_arena);
    }
    set_has_too_many_robots();
    _impl_.event_.too_many_robots_ = too_many_robots;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.too_many_robots)
}
void GameEvent::set_allocated_challenge_flag(::GameEvent_ChallengeFlag* challenge_flag) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (challenge_flag) {
    ::google::protobuf::Arena* submessage_arena = challenge_flag->GetArena();
    if (message_arena != submessage_arena) {
      challenge_flag = ::google::protobuf::internal::GetOwnedMessage(message_arena, challenge_flag, submessage_arena);
    }
    set_has_challenge_flag();
    _impl_.event_.challenge_flag_ = challenge_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.challenge_flag)
}
void GameEvent::set_allocated_challenge_flag_handled(::GameEvent_ChallengeFlagHandled* challenge_flag_handled) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (challenge_flag_handled) {
    ::google::protobuf::Arena* submessage_arena = challenge_flag_handled->GetArena();
    if (message_arena != submessage_arena) {
      challenge_flag_handled = ::google::protobuf::internal::GetOwnedMessage(message_arena, challenge_flag_handled, submessage_arena);
    }
    set_has_challenge_flag_handled();
    _impl_.event_.challenge_flag_handled_ = challenge_flag_handled;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.challenge_flag_handled)
}
void GameEvent::set_allocated_emergency_stop(::GameEvent_EmergencyStop* emergency_stop) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (emergency_stop) {
    ::google::protobuf::Arena* submessage_arena = emergency_stop->GetArena();
    if (message_arena != submessage_arena) {
      emergency_stop = ::google::protobuf::internal::GetOwnedMessage(message_arena, emergency_stop, submessage_arena);
    }
    set_has_emergency_stop();
    _impl_.event_.emergency_stop_ = emergency_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.emergency_stop)
}
void GameEvent::set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (unsporting_behavior_minor) {
    ::google::protobuf::Arena* submessage_arena = unsporting_behavior_minor->GetArena();
    if (message_arena != submessage_arena) {
      unsporting_behavior_minor = ::google::protobuf::internal::GetOwnedMessage(message_arena, unsporting_behavior_minor, submessage_arena);
    }
    set_has_unsporting_behavior_minor();
    _impl_.event_.unsporting_behavior_minor_ = unsporting_behavior_minor;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_minor)
}
void GameEvent::set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (unsporting_behavior_major) {
    ::google::protobuf::Arena* submessage_arena = unsporting_behavior_major->GetArena();
    if (message_arena != submessage_arena) {
      unsporting_behavior_major = ::google::protobuf::internal::GetOwnedMessage(message_arena, unsporting_behavior_major, submessage_arena);
    }
    set_has_unsporting_behavior_major();
    _impl_.event_.unsporting_behavior_major_ = unsporting_behavior_major;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_major)
}
void GameEvent::set_allocated_prepared(::GameEvent_Prepared* prepared) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (prepared) {
    ::google::protobuf::Arena* submessage_arena = prepared->GetArena();
    if (message_arena != submessage_arena) {
      prepared = ::google::protobuf::internal::GetOwnedMessage(message_arena, prepared, submessage_arena);
    }
    set_has_prepared();
    _impl_.event_.prepared_ = prepared;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.prepared)
}
void GameEvent::set_allocated_indirect_goal(::GameEvent_IndirectGoal* indirect_goal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (indirect_goal) {
    ::google::protobuf::Arena* submessage_arena = indirect_goal->GetArena();
    if (message_arena != submessage_arena) {
      indirect_goal = ::google::protobuf::internal::GetOwnedMessage(message_arena, indirect_goal, submessage_arena);
    }
    set_has_indirect_goal();
    _impl_.event_.indirect_goal_ = indirect_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.indirect_goal)
}
void GameEvent::set_allocated_chipped_goal(::GameEvent_ChippedGoal* chipped_goal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (chipped_goal) {
    ::google::protobuf::Arena* submessage_arena = chipped_goal->GetArena();
    if (message_arena != submessage_arena) {
      chipped_goal = ::google::protobuf::internal::GetOwnedMessage(message_arena, chipped_goal, submessage_arena);
    }
    set_has_chipped_goal();
    _impl_.event_.chipped_goal_ = chipped_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.chipped_goal)
}
void GameEvent::set_allocated_kick_timeout(::GameEvent_KickTimeout* kick_timeout) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (kick_timeout) {
    ::google::protobuf::Arena* submessage_arena = kick_timeout->GetArena();
    if (message_arena != submessage_arena) {
      kick_timeout = ::google::protobuf::internal::GetOwnedMessage(message_arena, kick_timeout, submessage_arena);
    }
    set_has_kick_timeout();
    _impl_.event_.kick_timeout_ = kick_timeout;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.kick_timeout)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_opponent_in_defense_area) {
    ::google::protobuf::Arena* submessage_arena = attacker_touched_opponent_in_defense_area->GetArena();
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::google::protobuf::internal::GetOwnedMessage(message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area();
    _impl_.event_.attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (attacker_touched_opponent_in_defense_area_skipped) {
    ::google::protobuf::Arena* submessage_arena = attacker_touched_opponent_in_defense_area_skipped->GetArena();
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area_skipped = ::google::protobuf::internal::GetOwnedMessage(message_arena, attacker_touched_opponent_in_defense_area_skipped, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = attacker_touched_opponent_in_defense_area_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}
void GameEvent::set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* bot_crash_unique_skipped) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_crash_unique_skipped) {
    ::google::protobuf::Arena* submessage_arena = bot_crash_unique_skipped->GetArena();
    if (message_arena != submessage_arena) {
      bot_crash_unique_skipped = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_crash_unique_skipped, submessage_arena);
    }
    set_has_bot_crash_unique_skipped();
    _impl_.event_.bot_crash_unique_skipped_ = bot_crash_unique_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique_skipped)
}
void GameEvent::set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* bot_pushed_bot_skipped) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (bot_pushed_bot_skipped) {
    ::google::protobuf::Arena* submessage_arena = bot_pushed_bot_skipped->GetArena();
    if (message_arena != submessage_arena) {
      bot_pushed_bot_skipped = ::google::protobuf::internal::GetOwnedMessage(message_arena, bot_pushed_bot_skipped, submessage_arena);
    }
    set_has_bot_pushed_bot_skipped();
    _impl_.event_.bot_pushed_bot_skipped_ = bot_pushed_bot_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot_skipped)
}
void GameEvent::set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (defender_in_defense_area_partially) {
    ::google::protobuf::Arena* submessage_arena = defender_in_defense_area_partially->GetArena();
    if (message_arena != submessage_arena) {
      defender_in_defense_area_partially = ::google::protobuf::internal::GetOwnedMessage(message_arena, defender_in_defense_area_partially, submessage_arena);
    }
    set_has_defender_in_defense_area_partially();
    _impl_.event_.defender_in_defense_area_partially_ = defender_in_defense_area_partially;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area_partially)
}
void GameEvent::set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* multiple_placement_failures) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (multiple_placement_failures) {
    ::google::protobuf::Arena* submessage_arena = multiple_placement_failures->GetArena();
    if (message_arena != submessage_arena) {
      multiple_placement_failures = ::google::protobuf::internal::GetOwnedMessage(message_arena, multiple_placement_failures, submessage_arena);
    }
    set_has_multiple_placement_failures();
    _impl_.event_.multiple_placement_failures_ = multiple_placement_failures;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_placement_failures)
}
GameEvent::GameEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameEvent)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::GameEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        origin_{visibility, arena, from.origin_},
        id_(arena, from.id_),
        event_{},
        _oneof_case_{from._oneof_case_[0]} {}

GameEvent::GameEvent(
    ::google::protobuf::Arena* arena,
    const GameEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, created_timestamp_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, created_timestamp_) +
               sizeof(Impl_::type_));
  switch (event_case()) {
    case EVENT_NOT_SET:
      break;
      case kBallLeftFieldTouchLine:
        _impl_.event_.ball_left_field_touch_line_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BallLeftField>(arena, *from._impl_.event_.ball_left_field_touch_line_);
        break;
      case kBallLeftFieldGoalLine:
        _impl_.event_.ball_left_field_goal_line_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BallLeftField>(arena, *from._impl_.event_.ball_left_field_goal_line_);
        break;
      case kAimlessKick:
        _impl_.event_.aimless_kick_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AimlessKick>(arena, *from._impl_.event_.aimless_kick_);
        break;
      case kAttackerTooCloseToDefenseArea:
        _impl_.event_.attacker_too_close_to_defense_area_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTooCloseToDefenseArea>(arena, *from._impl_.event_.attacker_too_close_to_defense_area_);
        break;
      case kDefenderInDefenseArea:
        _impl_.event_.defender_in_defense_area_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderInDefenseArea>(arena, *from._impl_.event_.defender_in_defense_area_);
        break;
      case kBoundaryCrossing:
        _impl_.event_.boundary_crossing_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BoundaryCrossing>(arena, *from._impl_.event_.boundary_crossing_);
        break;
      case kKeeperHeldBall:
        _impl_.event_.keeper_held_ball_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_KeeperHeldBall>(arena, *from._impl_.event_.keeper_held_ball_);
        break;
      case kBotDribbledBallTooFar:
        _impl_.event_.bot_dribbled_ball_too_far_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotDribbledBallTooFar>(arena, *from._impl_.event_.bot_dribbled_ball_too_far_);
        break;
      case kBotPushedBot:
        _impl_.event_.bot_pushed_bot_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotPushedBot>(arena, *from._impl_.event_.bot_pushed_bot_);
        break;
      case kBotHeldBallDeliberately:
        _impl_.event_.bot_held_ball_deliberately_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotHeldBallDeliberately>(arena, *from._impl_.event_.bot_held_ball_deliberately_);
        break;
      case kBotTippedOver:
        _impl_.event_.bot_tipped_over_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotTippedOver>(arena, *from._impl_.event_.bot_tipped_over_);
        break;
      case kBotDroppedParts:
        _impl_.event_.bot_dropped_parts_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotDroppedParts>(arena, *from._impl_.event_.bot_dropped_parts_);
        break;
      case kAttackerTouchedBallInDefenseArea:
        _impl_.event_.attacker_touched_ball_in_defense_area_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedBallInDefenseArea>(arena, *from._impl_.event_.attacker_touched_ball_in_defense_area_);
        break;
      case kBotKickedBallTooFast:
        _impl_.event_.bot_kicked_ball_too_fast_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotKickedBallTooFast>(arena, *from._impl_.event_.bot_kicked_ball_too_fast_);
        break;
      case kBotCrashUnique:
        _impl_.event_.bot_crash_unique_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashUnique>(arena, *from._impl_.event_.bot_crash_unique_);
        break;
      case kBotCrashDrawn:
        _impl_.event_.bot_crash_drawn_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashDrawn>(arena, *from._impl_.event_.bot_crash_drawn_);
        break;
      case kDefenderTooCloseToKickPoint:
        _impl_.event_.defender_too_close_to_kick_point_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderTooCloseToKickPoint>(arena, *from._impl_.event_.defender_too_close_to_kick_point_);
        break;
      case kBotTooFastInStop:
        _impl_.event_.bot_too_fast_in_stop_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotTooFastInStop>(arena, *from._impl_.event_.bot_too_fast_in_stop_);
        break;
      case kBotInterferedPlacement:
        _impl_.event_.bot_interfered_placement_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotInterferedPlacement>(arena, *from._impl_.event_.bot_interfered_placement_);
        break;
      case kPossibleGoal:
        _impl_.event_.possible_goal_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.possible_goal_);
        break;
      case kGoal:
        _impl_.event_.goal_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.goal_);
        break;
      case kInvalidGoal:
        _impl_.event_.invalid_goal_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.invalid_goal_);
        break;
      case kAttackerDoubleTouchedBall:
        _impl_.event_.attacker_double_touched_ball_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerDoubleTouchedBall>(arena, *from._impl_.event_.attacker_double_touched_ball_);
        break;
      case kPlacementSucceeded:
        _impl_.event_.placement_succeeded_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_PlacementSucceeded>(arena, *from._impl_.event_.placement_succeeded_);
        break;
      case kPenaltyKickFailed:
        _impl_.event_.penalty_kick_failed_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_PenaltyKickFailed>(arena, *from._impl_.event_.penalty_kick_failed_);
        break;
      case kNoProgressInGame:
        _impl_.event_.no_progress_in_game_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_NoProgressInGame>(arena, *from._impl_.event_.no_progress_in_game_);
        break;
      case kPlacementFailed:
        _impl_.event_.placement_failed_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_PlacementFailed>(arena, *from._impl_.event_.placement_failed_);
        break;
      case kMultipleCards:
        _impl_.event_.multiple_cards_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_MultipleCards>(arena, *from._impl_.event_.multiple_cards_);
        break;
      case kMultipleFouls:
        _impl_.event_.multiple_fouls_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_MultipleFouls>(arena, *from._impl_.event_.multiple_fouls_);
        break;
      case kBotSubstitution:
        _impl_.event_.bot_substitution_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotSubstitution>(arena, *from._impl_.event_.bot_substitution_);
        break;
      case kExcessiveBotSubstitution:
        _impl_.event_.excessive_bot_substitution_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_ExcessiveBotSubstitution>(arena, *from._impl_.event_.excessive_bot_substitution_);
        break;
      case kTooManyRobots:
        _impl_.event_.too_many_robots_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_TooManyRobots>(arena, *from._impl_.event_.too_many_robots_);
        break;
      case kChallengeFlag:
        _impl_.event_.challenge_flag_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_ChallengeFlag>(arena, *from._impl_.event_.challenge_flag_);
        break;
      case kChallengeFlagHandled:
        _impl_.event_.challenge_flag_handled_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_ChallengeFlagHandled>(arena, *from._impl_.event_.challenge_flag_handled_);
        break;
      case kEmergencyStop:
        _impl_.event_.emergency_stop_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_EmergencyStop>(arena, *from._impl_.event_.emergency_stop_);
        break;
      case kUnsportingBehaviorMinor:
        _impl_.event_.unsporting_behavior_minor_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_UnsportingBehaviorMinor>(arena, *from._impl_.event_.unsporting_behavior_minor_);
        break;
      case kUnsportingBehaviorMajor:
        _impl_.event_.unsporting_behavior_major_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_UnsportingBehaviorMajor>(arena, *from._impl_.event_.unsporting_behavior_major_);
        break;
      case kPrepared:
        _impl_.event_.prepared_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_Prepared>(arena, *from._impl_.event_.prepared_);
        break;
      case kIndirectGoal:
        _impl_.event_.indirect_goal_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_IndirectGoal>(arena, *from._impl_.event_.indirect_goal_);
        break;
      case kChippedGoal:
        _impl_.event_.chipped_goal_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_ChippedGoal>(arena, *from._impl_.event_.chipped_goal_);
        break;
      case kKickTimeout:
        _impl_.event_.kick_timeout_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_KickTimeout>(arena, *from._impl_.event_.kick_timeout_);
        break;
      case kAttackerTouchedOpponentInDefenseArea:
        _impl_.event_.attacker_touched_opponent_in_defense_area_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(arena, *from._impl_.event_.attacker_touched_opponent_in_defense_area_);
        break;
      case kAttackerTouchedOpponentInDefenseAreaSkipped:
        _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(arena, *from._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
        break;
      case kBotCrashUniqueSkipped:
        _impl_.event_.bot_crash_unique_skipped_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashUnique>(arena, *from._impl_.event_.bot_crash_unique_skipped_);
        break;
      case kBotPushedBotSkipped:
        _impl_.event_.bot_pushed_bot_skipped_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_BotPushedBot>(arena, *from._impl_.event_.bot_pushed_bot_skipped_);
        break;
      case kDefenderInDefenseAreaPartially:
        _impl_.event_.defender_in_defense_area_partially_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderInDefenseAreaPartially>(arena, *from._impl_.event_.defender_in_defense_area_partially_);
        break;
      case kMultiplePlacementFailures:
        _impl_.event_.multiple_placement_failures_ = ::google::protobuf::Message::CopyConstruct<::GameEvent_MultiplePlacementFailures>(arena, *from._impl_.event_.multiple_placement_failures_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:GameEvent)
}
inline PROTOBUF_NDEBUG_INLINE GameEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        origin_{visibility, arena},
        id_(arena),
        event_{},
        _oneof_case_{} {}

inline void GameEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_timestamp_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, created_timestamp_) +
               sizeof(Impl_::type_));
}
GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:GameEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  if (has_event()) {
    clear_event();
  }
  _impl_.~Impl_();
}

void GameEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:GameEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (event_case()) {
    case kBallLeftFieldTouchLine: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.ball_left_field_touch_line_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.ball_left_field_touch_line_);
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.ball_left_field_goal_line_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.ball_left_field_goal_line_);
      }
      break;
    }
    case kAimlessKick: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.aimless_kick_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.aimless_kick_);
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.attacker_too_close_to_defense_area_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_too_close_to_defense_area_);
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.defender_in_defense_area_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_in_defense_area_);
      }
      break;
    }
    case kBoundaryCrossing: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.boundary_crossing_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.boundary_crossing_);
      }
      break;
    }
    case kKeeperHeldBall: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.keeper_held_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.keeper_held_ball_);
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_dribbled_ball_too_far_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_dribbled_ball_too_far_);
      }
      break;
    }
    case kBotPushedBot: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_pushed_bot_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_pushed_bot_);
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_held_ball_deliberately_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_held_ball_deliberately_);
      }
      break;
    }
    case kBotTippedOver: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_tipped_over_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_tipped_over_);
      }
      break;
    }
    case kBotDroppedParts: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_dropped_parts_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_dropped_parts_);
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.attacker_touched_ball_in_defense_area_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_ball_in_defense_area_);
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_kicked_ball_too_fast_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_kicked_ball_too_fast_);
      }
      break;
    }
    case kBotCrashUnique: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_crash_unique_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_unique_);
      }
      break;
    }
    case kBotCrashDrawn: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_crash_drawn_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_drawn_);
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.defender_too_close_to_kick_point_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_too_close_to_kick_point_);
      }
      break;
    }
    case kBotTooFastInStop: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_too_fast_in_stop_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_too_fast_in_stop_);
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_interfered_placement_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_interfered_placement_);
      }
      break;
    }
    case kPossibleGoal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.possible_goal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.possible_goal_);
      }
      break;
    }
    case kGoal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.goal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.goal_);
      }
      break;
    }
    case kInvalidGoal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.invalid_goal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.invalid_goal_);
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.attacker_double_touched_ball_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_double_touched_ball_);
      }
      break;
    }
    case kPlacementSucceeded: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.placement_succeeded_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.placement_succeeded_);
      }
      break;
    }
    case kPenaltyKickFailed: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.penalty_kick_failed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.penalty_kick_failed_);
      }
      break;
    }
    case kNoProgressInGame: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.no_progress_in_game_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.no_progress_in_game_);
      }
      break;
    }
    case kPlacementFailed: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.placement_failed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.placement_failed_);
      }
      break;
    }
    case kMultipleCards: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.multiple_cards_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_cards_);
      }
      break;
    }
    case kMultipleFouls: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.multiple_fouls_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_fouls_);
      }
      break;
    }
    case kBotSubstitution: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_substitution_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_substitution_);
      }
      break;
    }
    case kExcessiveBotSubstitution: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.excessive_bot_substitution_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.excessive_bot_substitution_);
      }
      break;
    }
    case kTooManyRobots: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.too_many_robots_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.too_many_robots_);
      }
      break;
    }
    case kChallengeFlag: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.challenge_flag_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.challenge_flag_);
      }
      break;
    }
    case kChallengeFlagHandled: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.challenge_flag_handled_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.challenge_flag_handled_);
      }
      break;
    }
    case kEmergencyStop: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.emergency_stop_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.emergency_stop_);
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.unsporting_behavior_minor_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.unsporting_behavior_minor_);
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.unsporting_behavior_major_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.unsporting_behavior_major_);
      }
      break;
    }
    case kPrepared: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.prepared_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.prepared_);
      }
      break;
    }
    case kIndirectGoal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.indirect_goal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.indirect_goal_);
      }
      break;
    }
    case kChippedGoal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.chipped_goal_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.chipped_goal_);
      }
      break;
    }
    case kKickTimeout: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.kick_timeout_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.kick_timeout_);
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.attacker_touched_opponent_in_defense_area_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_opponent_in_defense_area_);
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_crash_unique_skipped_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_unique_skipped_);
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.bot_pushed_bot_skipped_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_pushed_bot_skipped_);
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.defender_in_defense_area_partially_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_in_defense_area_partially_);
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.multiple_placement_failures_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_placement_failures_);
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    GameEvent::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_GameEvent_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            GameEvent::IsInitializedImpl,
            &GameEvent::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<GameEvent>(),
            ::google::protobuf::Message::GetNewImpl<GameEvent>(),
            ::google::protobuf::Message::GetClearImpl<GameEvent>(), &GameEvent::ByteSizeLong,
                &GameEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(GameEvent, _impl_._cached_size_),
            false,
        },
        &GameEvent::kDescriptorMethods,
        &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* GameEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 51, 48, 74, 9> GameEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEvent, _impl_._has_bits_),
    0, // no _extensions_
    52, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8,  // skipmap
    offsetof(decltype(_table_), field_entries),
    51,  // num_field_entries
    48,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 created_timestamp = 49;
    {::_pbi::TcParser::FastV64S2,
     {904, 1, 0, PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.created_timestamp_)}},
    // optional string id = 50;
    {::_pbi::TcParser::FastSS2,
     {914, 0, 0, PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .GameEvent.Type type = 40;
    {::_pbi::TcParser::FastEvS2,
     {704, 2, 47, PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.type_)}},
    // repeated string origin = 41;
    {::_pbi::TcParser::FastSR2,
     {714, 63, 0, PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.origin_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 2,
    0, 31, 65520, 47,
    65535, 65535
  }}, {{
    // .GameEvent.Prepared prepared = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.prepared_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.NoProgressInGame no_progress_in_game = 2;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.no_progress_in_game_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.PlacementFailed placement_failed = 3;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.placement_failed_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.PlacementSucceeded placement_succeeded = 5;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.placement_succeeded_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.ball_left_field_touch_line_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.ball_left_field_goal_line_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.Goal goal = 8;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.goal_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.indirect_goal_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.chipped_goal_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.AimlessKick aimless_kick = 11;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.aimless_kick_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.kick_timeout_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.keeper_held_ball_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.attacker_double_touched_ball_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.attacker_touched_ball_in_defense_area_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.attacker_touched_opponent_in_defense_area_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_dribbled_ball_too_far_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_kicked_ball_too_fast_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.attacker_too_close_to_defense_area_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_interfered_placement_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_crash_drawn_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotCrashUnique bot_crash_unique = 22;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_crash_unique_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_crash_unique_skipped_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotPushedBot bot_pushed_bot = 24;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_pushed_bot_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_pushed_bot_skipped_), _Internal::kOneofCaseOffset + 0, 23,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_held_ball_deliberately_), _Internal::kOneofCaseOffset + 0, 24,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotTippedOver bot_tipped_over = 27;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_tipped_over_), _Internal::kOneofCaseOffset + 0, 25,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_too_fast_in_stop_), _Internal::kOneofCaseOffset + 0, 26,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.defender_too_close_to_kick_point_), _Internal::kOneofCaseOffset + 0, 27,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.defender_in_defense_area_partially_), _Internal::kOneofCaseOffset + 0, 28,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.defender_in_defense_area_), _Internal::kOneofCaseOffset + 0, 29,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.MultipleCards multiple_cards = 32;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.multiple_cards_), _Internal::kOneofCaseOffset + 0, 30,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.multiple_placement_failures_), _Internal::kOneofCaseOffset + 0, 31,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.MultipleFouls multiple_fouls = 34;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.multiple_fouls_), _Internal::kOneofCaseOffset + 0, 32,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.unsporting_behavior_minor_), _Internal::kOneofCaseOffset + 0, 33,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.unsporting_behavior_major_), _Internal::kOneofCaseOffset + 0, 34,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BotSubstitution bot_substitution = 37;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_substitution_), _Internal::kOneofCaseOffset + 0, 35,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.TooManyRobots too_many_robots = 38;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.too_many_robots_), _Internal::kOneofCaseOffset + 0, 36,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.Goal possible_goal = 39;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.possible_goal_), _Internal::kOneofCaseOffset + 0, 37,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .GameEvent.Type type = 40;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.type_), _Internal::kHasBitsOffset + 2, 47,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
    // repeated string origin = 41;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.origin_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_), _Internal::kOneofCaseOffset + 0, 38,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.BoundaryCrossing boundary_crossing = 43;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.boundary_crossing_), _Internal::kOneofCaseOffset + 0, 39,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.Goal invalid_goal = 44;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.invalid_goal_), _Internal::kOneofCaseOffset + 0, 40,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.penalty_kick_failed_), _Internal::kOneofCaseOffset + 0, 41,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.ChallengeFlag challenge_flag = 46;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.challenge_flag_), _Internal::kOneofCaseOffset + 0, 42,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.EmergencyStop emergency_stop = 47;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.emergency_stop_), _Internal::kOneofCaseOffset + 0, 43,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.challenge_flag_handled_), _Internal::kOneofCaseOffset + 0, 44,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 created_timestamp = 49;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.created_timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string id = 50;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // .GameEvent.BotDroppedParts bot_dropped_parts = 51;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.bot_dropped_parts_), _Internal::kOneofCaseOffset + 0, 45,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.event_.excessive_bot_substitution_), _Internal::kOneofCaseOffset + 0, 46,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::GameEvent_Prepared>()},
    {::_pbi::TcParser::GetTable<::GameEvent_NoProgressInGame>()},
    {::_pbi::TcParser::GetTable<::GameEvent_PlacementFailed>()},
    {::_pbi::TcParser::GetTable<::GameEvent_PlacementSucceeded>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BallLeftField>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BallLeftField>()},
    {::_pbi::TcParser::GetTable<::GameEvent_Goal>()},
    {::_pbi::TcParser::GetTable<::GameEvent_IndirectGoal>()},
    {::_pbi::TcParser::GetTable<::GameEvent_ChippedGoal>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AimlessKick>()},
    {::_pbi::TcParser::GetTable<::GameEvent_KickTimeout>()},
    {::_pbi::TcParser::GetTable<::GameEvent_KeeperHeldBall>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AttackerDoubleTouchedBall>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AttackerTouchedBallInDefenseArea>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AttackerTouchedOpponentInDefenseArea>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotDribbledBallTooFar>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotKickedBallTooFast>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AttackerTooCloseToDefenseArea>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotInterferedPlacement>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotCrashDrawn>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotCrashUnique>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotCrashUnique>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotPushedBot>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotPushedBot>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotHeldBallDeliberately>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotTippedOver>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotTooFastInStop>()},
    {::_pbi::TcParser::GetTable<::GameEvent_DefenderTooCloseToKickPoint>()},
    {::_pbi::TcParser::GetTable<::GameEvent_DefenderInDefenseAreaPartially>()},
    {::_pbi::TcParser::GetTable<::GameEvent_DefenderInDefenseArea>()},
    {::_pbi::TcParser::GetTable<::GameEvent_MultipleCards>()},
    {::_pbi::TcParser::GetTable<::GameEvent_MultiplePlacementFailures>()},
    {::_pbi::TcParser::GetTable<::GameEvent_MultipleFouls>()},
    {::_pbi::TcParser::GetTable<::GameEvent_UnsportingBehaviorMinor>()},
    {::_pbi::TcParser::GetTable<::GameEvent_UnsportingBehaviorMajor>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotSubstitution>()},
    {::_pbi::TcParser::GetTable<::GameEvent_TooManyRobots>()},
    {::_pbi::TcParser::GetTable<::GameEvent_Goal>()},
    {::_pbi::TcParser::GetTable<::GameEvent_AttackerTouchedOpponentInDefenseArea>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BoundaryCrossing>()},
    {::_pbi::TcParser::GetTable<::GameEvent_Goal>()},
    {::_pbi::TcParser::GetTable<::GameEvent_PenaltyKickFailed>()},
    {::_pbi::TcParser::GetTable<::GameEvent_ChallengeFlag>()},
    {::_pbi::TcParser::GetTable<::GameEvent_EmergencyStop>()},
    {::_pbi::TcParser::GetTable<::GameEvent_ChallengeFlagHandled>()},
    {::_pbi::TcParser::GetTable<::GameEvent_BotDroppedParts>()},
    {::_pbi::TcParser::GetTable<::GameEvent_ExcessiveBotSubstitution>()},
    {::_pbi::FieldAuxEnumData{}, ::GameEvent_Type_internal_data_},
  }}, {{
    "\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\6\0\0\0\0\0\0\0\0\2\0\0\0\0\0\0"
    "GameEvent"
    "origin"
    "id"
  }},
};

PROTOBUF_NOINLINE void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.origin_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.created_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.created_timestamp_)) + sizeof(_impl_.type_));
  }
  clear_event();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent& this_ = static_cast<const GameEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:GameEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.event_case()) {
            case kPrepared: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.event_.prepared_, this_._impl_.event_.prepared_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNoProgressInGame: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.event_.no_progress_in_game_, this_._impl_.event_.no_progress_in_game_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPlacementFailed: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.event_.placement_failed_, this_._impl_.event_.placement_failed_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPlacementSucceeded: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.event_.placement_succeeded_, this_._impl_.event_.placement_succeeded_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBallLeftFieldTouchLine: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.event_.ball_left_field_touch_line_, this_._impl_.event_.ball_left_field_touch_line_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBallLeftFieldGoalLine: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.event_.ball_left_field_goal_line_, this_._impl_.event_.ball_left_field_goal_line_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kGoal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.event_.goal_, this_._impl_.event_.goal_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kIndirectGoal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.event_.indirect_goal_, this_._impl_.event_.indirect_goal_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kChippedGoal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.event_.chipped_goal_, this_._impl_.event_.chipped_goal_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAimlessKick: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.event_.aimless_kick_, this_._impl_.event_.aimless_kick_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kKickTimeout: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.event_.kick_timeout_, this_._impl_.event_.kick_timeout_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kKeeperHeldBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.event_.keeper_held_ball_, this_._impl_.event_.keeper_held_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttackerDoubleTouchedBall: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.event_.attacker_double_touched_ball_, this_._impl_.event_.attacker_double_touched_ball_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttackerTouchedBallInDefenseArea: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  15, *this_._impl_.event_.attacker_touched_ball_in_defense_area_, this_._impl_.event_.attacker_touched_ball_in_defense_area_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttackerTouchedOpponentInDefenseArea: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  16, *this_._impl_.event_.attacker_touched_opponent_in_defense_area_, this_._impl_.event_.attacker_touched_opponent_in_defense_area_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotDribbledBallTooFar: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  17, *this_._impl_.event_.bot_dribbled_ball_too_far_, this_._impl_.event_.bot_dribbled_ball_too_far_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotKickedBallTooFast: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  18, *this_._impl_.event_.bot_kicked_ball_too_fast_, this_._impl_.event_.bot_kicked_ball_too_fast_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAttackerTooCloseToDefenseArea: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  19, *this_._impl_.event_.attacker_too_close_to_defense_area_, this_._impl_.event_.attacker_too_close_to_defense_area_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotInterferedPlacement: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.event_.bot_interfered_placement_, this_._impl_.event_.bot_interfered_placement_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotCrashDrawn: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.event_.bot_crash_drawn_, this_._impl_.event_.bot_crash_drawn_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotCrashUnique: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.event_.bot_crash_unique_, this_._impl_.event_.bot_crash_unique_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotCrashUniqueSkipped: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.event_.bot_crash_unique_skipped_, this_._impl_.event_.bot_crash_unique_skipped_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotPushedBot: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  24, *this_._impl_.event_.bot_pushed_bot_, this_._impl_.event_.bot_pushed_bot_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotPushedBotSkipped: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  25, *this_._impl_.event_.bot_pushed_bot_skipped_, this_._impl_.event_.bot_pushed_bot_skipped_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotHeldBallDeliberately: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  26, *this_._impl_.event_.bot_held_ball_deliberately_, this_._impl_.event_.bot_held_ball_deliberately_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotTippedOver: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  27, *this_._impl_.event_.bot_tipped_over_, this_._impl_.event_.bot_tipped_over_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotTooFastInStop: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  28, *this_._impl_.event_.bot_too_fast_in_stop_, this_._impl_.event_.bot_too_fast_in_stop_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDefenderTooCloseToKickPoint: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  29, *this_._impl_.event_.defender_too_close_to_kick_point_, this_._impl_.event_.defender_too_close_to_kick_point_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDefenderInDefenseAreaPartially: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  30, *this_._impl_.event_.defender_in_defense_area_partially_, this_._impl_.event_.defender_in_defense_area_partially_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDefenderInDefenseArea: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  31, *this_._impl_.event_.defender_in_defense_area_, this_._impl_.event_.defender_in_defense_area_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMultipleCards: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  32, *this_._impl_.event_.multiple_cards_, this_._impl_.event_.multiple_cards_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMultiplePlacementFailures: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  33, *this_._impl_.event_.multiple_placement_failures_, this_._impl_.event_.multiple_placement_failures_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMultipleFouls: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  34, *this_._impl_.event_.multiple_fouls_, this_._impl_.event_.multiple_fouls_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUnsportingBehaviorMinor: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  35, *this_._impl_.event_.unsporting_behavior_minor_, this_._impl_.event_.unsporting_behavior_minor_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUnsportingBehaviorMajor: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  36, *this_._impl_.event_.unsporting_behavior_major_, this_._impl_.event_.unsporting_behavior_major_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBotSubstitution: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  37, *this_._impl_.event_.bot_substitution_, this_._impl_.event_.bot_substitution_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTooManyRobots: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  38, *this_._impl_.event_.too_many_robots_, this_._impl_.event_.too_many_robots_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPossibleGoal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  39, *this_._impl_.event_.possible_goal_, this_._impl_.event_.possible_goal_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .GameEvent.Type type = 40;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                40, this_._internal_type(), target);
          }

          // repeated string origin = 41;
          for (int i = 0, n = this_._internal_origin_size(); i < n; ++i) {
            const auto& s = this_._internal_origin().Get(i);
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.origin");
            target = stream->WriteString(41, s, target);
          }

          switch (this_.event_case()) {
            case kAttackerTouchedOpponentInDefenseAreaSkipped: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  42, *this_._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_, this_._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBoundaryCrossing: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  43, *this_._impl_.event_.boundary_crossing_, this_._impl_.event_.boundary_crossing_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kInvalidGoal: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  44, *this_._impl_.event_.invalid_goal_, this_._impl_.event_.invalid_goal_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPenaltyKickFailed: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  45, *this_._impl_.event_.penalty_kick_failed_, this_._impl_.event_.penalty_kick_failed_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kChallengeFlag: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  46, *this_._impl_.event_.challenge_flag_, this_._impl_.event_.challenge_flag_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEmergencyStop: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  47, *this_._impl_.event_.emergency_stop_, this_._impl_.event_.emergency_stop_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kChallengeFlagHandled: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  48, *this_._impl_.event_.challenge_flag_handled_, this_._impl_.event_.challenge_flag_handled_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // optional uint64 created_timestamp = 49;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                49, this_._internal_created_timestamp(), target);
          }

          // optional string id = 50;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "GameEvent.id");
            target = stream->WriteStringMaybeAliased(50, _s, target);
          }

          switch (this_.event_case()) {
            case kBotDroppedParts: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  51, *this_._impl_.event_.bot_dropped_parts_, this_._impl_.event_.bot_dropped_parts_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExcessiveBotSubstitution: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  52, *this_._impl_.event_.excessive_bot_substitution_, this_._impl_.event_.excessive_bot_substitution_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:GameEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent::ByteSizeLong(const MessageLite& base) {
          const GameEvent& this_ = static_cast<const GameEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent::ByteSizeLong() const {
          const GameEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:GameEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string origin = 41;
             {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_origin().size());
              for (int i = 0, n = this_._internal_origin().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_origin().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional string id = 50;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // optional uint64 created_timestamp = 49;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_created_timestamp());
            }
            // optional .GameEvent.Type type = 40;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          switch (this_.event_case()) {
            // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
            case kBallLeftFieldTouchLine: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.ball_left_field_touch_line_);
              break;
            }
            // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
            case kBallLeftFieldGoalLine: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.ball_left_field_goal_line_);
              break;
            }
            // .GameEvent.AimlessKick aimless_kick = 11;
            case kAimlessKick: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.aimless_kick_);
              break;
            }
            // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
            case kAttackerTooCloseToDefenseArea: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.attacker_too_close_to_defense_area_);
              break;
            }
            // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
            case kDefenderInDefenseArea: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.defender_in_defense_area_);
              break;
            }
            // .GameEvent.BoundaryCrossing boundary_crossing = 43;
            case kBoundaryCrossing: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.boundary_crossing_);
              break;
            }
            // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
            case kKeeperHeldBall: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.keeper_held_ball_);
              break;
            }
            // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
            case kBotDribbledBallTooFar: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_dribbled_ball_too_far_);
              break;
            }
            // .GameEvent.BotPushedBot bot_pushed_bot = 24;
            case kBotPushedBot: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_pushed_bot_);
              break;
            }
            // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
            case kBotHeldBallDeliberately: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_held_ball_deliberately_);
              break;
            }
            // .GameEvent.BotTippedOver bot_tipped_over = 27;
            case kBotTippedOver: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_tipped_over_);
              break;
            }
            // .GameEvent.BotDroppedParts bot_dropped_parts = 51;
            case kBotDroppedParts: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_dropped_parts_);
              break;
            }
            // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
            case kAttackerTouchedBallInDefenseArea: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.attacker_touched_ball_in_defense_area_);
              break;
            }
            // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
            case kBotKickedBallTooFast: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_kicked_ball_too_fast_);
              break;
            }
            // .GameEvent.BotCrashUnique bot_crash_unique = 22;
            case kBotCrashUnique: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_crash_unique_);
              break;
            }
            // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
            case kBotCrashDrawn: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_crash_drawn_);
              break;
            }
            // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
            case kDefenderTooCloseToKickPoint: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.defender_too_close_to_kick_point_);
              break;
            }
            // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
            case kBotTooFastInStop: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_too_fast_in_stop_);
              break;
            }
            // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
            case kBotInterferedPlacement: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_interfered_placement_);
              break;
            }
            // .GameEvent.Goal possible_goal = 39;
            case kPossibleGoal: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.possible_goal_);
              break;
            }
            // .GameEvent.Goal goal = 8;
            case kGoal: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.goal_);
              break;
            }
            // .GameEvent.Goal invalid_goal = 44;
            case kInvalidGoal: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.invalid_goal_);
              break;
            }
            // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
            case kAttackerDoubleTouchedBall: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.attacker_double_touched_ball_);
              break;
            }
            // .GameEvent.PlacementSucceeded placement_succeeded = 5;
            case kPlacementSucceeded: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.placement_succeeded_);
              break;
            }
            // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
            case kPenaltyKickFailed: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.penalty_kick_failed_);
              break;
            }
            // .GameEvent.NoProgressInGame no_progress_in_game = 2;
            case kNoProgressInGame: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.no_progress_in_game_);
              break;
            }
            // .GameEvent.PlacementFailed placement_failed = 3;
            case kPlacementFailed: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.placement_failed_);
              break;
            }
            // .GameEvent.MultipleCards multiple_cards = 32;
            case kMultipleCards: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.multiple_cards_);
              break;
            }
            // .GameEvent.MultipleFouls multiple_fouls = 34;
            case kMultipleFouls: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.multiple_fouls_);
              break;
            }
            // .GameEvent.BotSubstitution bot_substitution = 37;
            case kBotSubstitution: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_substitution_);
              break;
            }
            // .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
            case kExcessiveBotSubstitution: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.excessive_bot_substitution_);
              break;
            }
            // .GameEvent.TooManyRobots too_many_robots = 38;
            case kTooManyRobots: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.too_many_robots_);
              break;
            }
            // .GameEvent.ChallengeFlag challenge_flag = 46;
            case kChallengeFlag: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.challenge_flag_);
              break;
            }
            // .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
            case kChallengeFlagHandled: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.challenge_flag_handled_);
              break;
            }
            // .GameEvent.EmergencyStop emergency_stop = 47;
            case kEmergencyStop: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.emergency_stop_);
              break;
            }
            // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
            case kUnsportingBehaviorMinor: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.unsporting_behavior_minor_);
              break;
            }
            // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
            case kUnsportingBehaviorMajor: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.unsporting_behavior_major_);
              break;
            }
            // .GameEvent.Prepared prepared = 1 [deprecated = true];
            case kPrepared: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.prepared_);
              break;
            }
            // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
            case kIndirectGoal: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.indirect_goal_);
              break;
            }
            // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
            case kChippedGoal: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.chipped_goal_);
              break;
            }
            // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
            case kKickTimeout: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.kick_timeout_);
              break;
            }
            // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
            case kAttackerTouchedOpponentInDefenseArea: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.attacker_touched_opponent_in_defense_area_);
              break;
            }
            // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
            case kAttackerTouchedOpponentInDefenseAreaSkipped: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
              break;
            }
            // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
            case kBotCrashUniqueSkipped: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_crash_unique_skipped_);
              break;
            }
            // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
            case kBotPushedBotSkipped: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.bot_pushed_bot_skipped_);
              break;
            }
            // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
            case kDefenderInDefenseAreaPartially: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.defender_in_defense_area_partially_);
              break;
            }
            // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
            case kMultiplePlacementFailures: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_.multiple_placement_failures_);
              break;
            }
            case EVENT_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent*>(&to_msg);
  auto& from = static_cast<const GameEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_origin()->MergeFrom(from._internal_origin());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.created_timestamp_ = from._impl_.created_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_event();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kBallLeftFieldTouchLine: {
        if (oneof_needs_init) {
          _this->_impl_.event_.ball_left_field_touch_line_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BallLeftField>(arena, *from._impl_.event_.ball_left_field_touch_line_);
        } else {
          _this->_impl_.event_.ball_left_field_touch_line_->MergeFrom(from._internal_ball_left_field_touch_line());
        }
        break;
      }
      case kBallLeftFieldGoalLine: {
        if (oneof_needs_init) {
          _this->_impl_.event_.ball_left_field_goal_line_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BallLeftField>(arena, *from._impl_.event_.ball_left_field_goal_line_);
        } else {
          _this->_impl_.event_.ball_left_field_goal_line_->MergeFrom(from._internal_ball_left_field_goal_line());
        }
        break;
      }
      case kAimlessKick: {
        if (oneof_needs_init) {
          _this->_impl_.event_.aimless_kick_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AimlessKick>(arena, *from._impl_.event_.aimless_kick_);
        } else {
          _this->_impl_.event_.aimless_kick_->MergeFrom(from._internal_aimless_kick());
        }
        break;
      }
      case kAttackerTooCloseToDefenseArea: {
        if (oneof_needs_init) {
          _this->_impl_.event_.attacker_too_close_to_defense_area_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTooCloseToDefenseArea>(arena, *from._impl_.event_.attacker_too_close_to_defense_area_);
        } else {
          _this->_impl_.event_.attacker_too_close_to_defense_area_->MergeFrom(from._internal_attacker_too_close_to_defense_area());
        }
        break;
      }
      case kDefenderInDefenseArea: {
        if (oneof_needs_init) {
          _this->_impl_.event_.defender_in_defense_area_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderInDefenseArea>(arena, *from._impl_.event_.defender_in_defense_area_);
        } else {
          _this->_impl_.event_.defender_in_defense_area_->MergeFrom(from._internal_defender_in_defense_area());
        }
        break;
      }
      case kBoundaryCrossing: {
        if (oneof_needs_init) {
          _this->_impl_.event_.boundary_crossing_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BoundaryCrossing>(arena, *from._impl_.event_.boundary_crossing_);
        } else {
          _this->_impl_.event_.boundary_crossing_->MergeFrom(from._internal_boundary_crossing());
        }
        break;
      }
      case kKeeperHeldBall: {
        if (oneof_needs_init) {
          _this->_impl_.event_.keeper_held_ball_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_KeeperHeldBall>(arena, *from._impl_.event_.keeper_held_ball_);
        } else {
          _this->_impl_.event_.keeper_held_ball_->MergeFrom(from._internal_keeper_held_ball());
        }
        break;
      }
      case kBotDribbledBallTooFar: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_dribbled_ball_too_far_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotDribbledBallTooFar>(arena, *from._impl_.event_.bot_dribbled_ball_too_far_);
        } else {
          _this->_impl_.event_.bot_dribbled_ball_too_far_->MergeFrom(from._internal_bot_dribbled_ball_too_far());
        }
        break;
      }
      case kBotPushedBot: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_pushed_bot_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotPushedBot>(arena, *from._impl_.event_.bot_pushed_bot_);
        } else {
          _this->_impl_.event_.bot_pushed_bot_->MergeFrom(from._internal_bot_pushed_bot());
        }
        break;
      }
      case kBotHeldBallDeliberately: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_held_ball_deliberately_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotHeldBallDeliberately>(arena, *from._impl_.event_.bot_held_ball_deliberately_);
        } else {
          _this->_impl_.event_.bot_held_ball_deliberately_->MergeFrom(from._internal_bot_held_ball_deliberately());
        }
        break;
      }
      case kBotTippedOver: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_tipped_over_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotTippedOver>(arena, *from._impl_.event_.bot_tipped_over_);
        } else {
          _this->_impl_.event_.bot_tipped_over_->MergeFrom(from._internal_bot_tipped_over());
        }
        break;
      }
      case kBotDroppedParts: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_dropped_parts_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotDroppedParts>(arena, *from._impl_.event_.bot_dropped_parts_);
        } else {
          _this->_impl_.event_.bot_dropped_parts_->MergeFrom(from._internal_bot_dropped_parts());
        }
        break;
      }
      case kAttackerTouchedBallInDefenseArea: {
        if (oneof_needs_init) {
          _this->_impl_.event_.attacker_touched_ball_in_defense_area_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedBallInDefenseArea>(arena, *from._impl_.event_.attacker_touched_ball_in_defense_area_);
        } else {
          _this->_impl_.event_.attacker_touched_ball_in_defense_area_->MergeFrom(from._internal_attacker_touched_ball_in_defense_area());
        }
        break;
      }
      case kBotKickedBallTooFast: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_kicked_ball_too_fast_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotKickedBallTooFast>(arena, *from._impl_.event_.bot_kicked_ball_too_fast_);
        } else {
          _this->_impl_.event_.bot_kicked_ball_too_fast_->MergeFrom(from._internal_bot_kicked_ball_too_fast());
        }
        break;
      }
      case kBotCrashUnique: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_crash_unique_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashUnique>(arena, *from._impl_.event_.bot_crash_unique_);
        } else {
          _this->_impl_.event_.bot_crash_unique_->MergeFrom(from._internal_bot_crash_unique());
        }
        break;
      }
      case kBotCrashDrawn: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_crash_drawn_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashDrawn>(arena, *from._impl_.event_.bot_crash_drawn_);
        } else {
          _this->_impl_.event_.bot_crash_drawn_->MergeFrom(from._internal_bot_crash_drawn());
        }
        break;
      }
      case kDefenderTooCloseToKickPoint: {
        if (oneof_needs_init) {
          _this->_impl_.event_.defender_too_close_to_kick_point_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderTooCloseToKickPoint>(arena, *from._impl_.event_.defender_too_close_to_kick_point_);
        } else {
          _this->_impl_.event_.defender_too_close_to_kick_point_->MergeFrom(from._internal_defender_too_close_to_kick_point());
        }
        break;
      }
      case kBotTooFastInStop: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_too_fast_in_stop_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotTooFastInStop>(arena, *from._impl_.event_.bot_too_fast_in_stop_);
        } else {
          _this->_impl_.event_.bot_too_fast_in_stop_->MergeFrom(from._internal_bot_too_fast_in_stop());
        }
        break;
      }
      case kBotInterferedPlacement: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_interfered_placement_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotInterferedPlacement>(arena, *from._impl_.event_.bot_interfered_placement_);
        } else {
          _this->_impl_.event_.bot_interfered_placement_->MergeFrom(from._internal_bot_interfered_placement());
        }
        break;
      }
      case kPossibleGoal: {
        if (oneof_needs_init) {
          _this->_impl_.event_.possible_goal_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.possible_goal_);
        } else {
          _this->_impl_.event_.possible_goal_->MergeFrom(from._internal_possible_goal());
        }
        break;
      }
      case kGoal: {
        if (oneof_needs_init) {
          _this->_impl_.event_.goal_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.goal_);
        } else {
          _this->_impl_.event_.goal_->MergeFrom(from._internal_goal());
        }
        break;
      }
      case kInvalidGoal: {
        if (oneof_needs_init) {
          _this->_impl_.event_.invalid_goal_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_Goal>(arena, *from._impl_.event_.invalid_goal_);
        } else {
          _this->_impl_.event_.invalid_goal_->MergeFrom(from._internal_invalid_goal());
        }
        break;
      }
      case kAttackerDoubleTouchedBall: {
        if (oneof_needs_init) {
          _this->_impl_.event_.attacker_double_touched_ball_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerDoubleTouchedBall>(arena, *from._impl_.event_.attacker_double_touched_ball_);
        } else {
          _this->_impl_.event_.attacker_double_touched_ball_->MergeFrom(from._internal_attacker_double_touched_ball());
        }
        break;
      }
      case kPlacementSucceeded: {
        if (oneof_needs_init) {
          _this->_impl_.event_.placement_succeeded_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_PlacementSucceeded>(arena, *from._impl_.event_.placement_succeeded_);
        } else {
          _this->_impl_.event_.placement_succeeded_->MergeFrom(from._internal_placement_succeeded());
        }
        break;
      }
      case kPenaltyKickFailed: {
        if (oneof_needs_init) {
          _this->_impl_.event_.penalty_kick_failed_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_PenaltyKickFailed>(arena, *from._impl_.event_.penalty_kick_failed_);
        } else {
          _this->_impl_.event_.penalty_kick_failed_->MergeFrom(from._internal_penalty_kick_failed());
        }
        break;
      }
      case kNoProgressInGame: {
        if (oneof_needs_init) {
          _this->_impl_.event_.no_progress_in_game_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_NoProgressInGame>(arena, *from._impl_.event_.no_progress_in_game_);
        } else {
          _this->_impl_.event_.no_progress_in_game_->MergeFrom(from._internal_no_progress_in_game());
        }
        break;
      }
      case kPlacementFailed: {
        if (oneof_needs_init) {
          _this->_impl_.event_.placement_failed_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_PlacementFailed>(arena, *from._impl_.event_.placement_failed_);
        } else {
          _this->_impl_.event_.placement_failed_->MergeFrom(from._internal_placement_failed());
        }
        break;
      }
      case kMultipleCards: {
        if (oneof_needs_init) {
          _this->_impl_.event_.multiple_cards_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_MultipleCards>(arena, *from._impl_.event_.multiple_cards_);
        } else {
          _this->_impl_.event_.multiple_cards_->MergeFrom(from._internal_multiple_cards());
        }
        break;
      }
      case kMultipleFouls: {
        if (oneof_needs_init) {
          _this->_impl_.event_.multiple_fouls_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_MultipleFouls>(arena, *from._impl_.event_.multiple_fouls_);
        } else {
          _this->_impl_.event_.multiple_fouls_->MergeFrom(from._internal_multiple_fouls());
        }
        break;
      }
      case kBotSubstitution: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_substitution_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotSubstitution>(arena, *from._impl_.event_.bot_substitution_);
        } else {
          _this->_impl_.event_.bot_substitution_->MergeFrom(from._internal_bot_substitution());
        }
        break;
      }
      case kExcessiveBotSubstitution: {
        if (oneof_needs_init) {
          _this->_impl_.event_.excessive_bot_substitution_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_ExcessiveBotSubstitution>(arena, *from._impl_.event_.excessive_bot_substitution_);
        } else {
          _this->_impl_.event_.excessive_bot_substitution_->MergeFrom(from._internal_excessive_bot_substitution());
        }
        break;
      }
      case kTooManyRobots: {
        if (oneof_needs_init) {
          _this->_impl_.event_.too_many_robots_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_TooManyRobots>(arena, *from._impl_.event_.too_many_robots_);
        } else {
          _this->_impl_.event_.too_many_robots_->MergeFrom(from._internal_too_many_robots());
        }
        break;
      }
      case kChallengeFlag: {
        if (oneof_needs_init) {
          _this->_impl_.event_.challenge_flag_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_ChallengeFlag>(arena, *from._impl_.event_.challenge_flag_);
        } else {
          _this->_impl_.event_.challenge_flag_->MergeFrom(from._internal_challenge_flag());
        }
        break;
      }
      case kChallengeFlagHandled: {
        if (oneof_needs_init) {
          _this->_impl_.event_.challenge_flag_handled_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_ChallengeFlagHandled>(arena, *from._impl_.event_.challenge_flag_handled_);
        } else {
          _this->_impl_.event_.challenge_flag_handled_->MergeFrom(from._internal_challenge_flag_handled());
        }
        break;
      }
      case kEmergencyStop: {
        if (oneof_needs_init) {
          _this->_impl_.event_.emergency_stop_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_EmergencyStop>(arena, *from._impl_.event_.emergency_stop_);
        } else {
          _this->_impl_.event_.emergency_stop_->MergeFrom(from._internal_emergency_stop());
        }
        break;
      }
      case kUnsportingBehaviorMinor: {
        if (oneof_needs_init) {
          _this->_impl_.event_.unsporting_behavior_minor_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_UnsportingBehaviorMinor>(arena, *from._impl_.event_.unsporting_behavior_minor_);
        } else {
          _this->_impl_.event_.unsporting_behavior_minor_->MergeFrom(from._internal_unsporting_behavior_minor());
        }
        break;
      }
      case kUnsportingBehaviorMajor: {
        if (oneof_needs_init) {
          _this->_impl_.event_.unsporting_behavior_major_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_UnsportingBehaviorMajor>(arena, *from._impl_.event_.unsporting_behavior_major_);
        } else {
          _this->_impl_.event_.unsporting_behavior_major_->MergeFrom(from._internal_unsporting_behavior_major());
        }
        break;
      }
      case kPrepared: {
        if (oneof_needs_init) {
          _this->_impl_.event_.prepared_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_Prepared>(arena, *from._impl_.event_.prepared_);
        } else {
          _this->_impl_.event_.prepared_->MergeFrom(from._internal_prepared());
        }
        break;
      }
      case kIndirectGoal: {
        if (oneof_needs_init) {
          _this->_impl_.event_.indirect_goal_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_IndirectGoal>(arena, *from._impl_.event_.indirect_goal_);
        } else {
          _this->_impl_.event_.indirect_goal_->MergeFrom(from._internal_indirect_goal());
        }
        break;
      }
      case kChippedGoal: {
        if (oneof_needs_init) {
          _this->_impl_.event_.chipped_goal_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_ChippedGoal>(arena, *from._impl_.event_.chipped_goal_);
        } else {
          _this->_impl_.event_.chipped_goal_->MergeFrom(from._internal_chipped_goal());
        }
        break;
      }
      case kKickTimeout: {
        if (oneof_needs_init) {
          _this->_impl_.event_.kick_timeout_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_KickTimeout>(arena, *from._impl_.event_.kick_timeout_);
        } else {
          _this->_impl_.event_.kick_timeout_->MergeFrom(from._internal_kick_timeout());
        }
        break;
      }
      case kAttackerTouchedOpponentInDefenseArea: {
        if (oneof_needs_init) {
          _this->_impl_.event_.attacker_touched_opponent_in_defense_area_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(arena, *from._impl_.event_.attacker_touched_opponent_in_defense_area_);
        } else {
          _this->_impl_.event_.attacker_touched_opponent_in_defense_area_->MergeFrom(from._internal_attacker_touched_opponent_in_defense_area());
        }
        break;
      }
      case kAttackerTouchedOpponentInDefenseAreaSkipped: {
        if (oneof_needs_init) {
          _this->_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(arena, *from._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
        } else {
          _this->_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_->MergeFrom(from._internal_attacker_touched_opponent_in_defense_area_skipped());
        }
        break;
      }
      case kBotCrashUniqueSkipped: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_crash_unique_skipped_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotCrashUnique>(arena, *from._impl_.event_.bot_crash_unique_skipped_);
        } else {
          _this->_impl_.event_.bot_crash_unique_skipped_->MergeFrom(from._internal_bot_crash_unique_skipped());
        }
        break;
      }
      case kBotPushedBotSkipped: {
        if (oneof_needs_init) {
          _this->_impl_.event_.bot_pushed_bot_skipped_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_BotPushedBot>(arena, *from._impl_.event_.bot_pushed_bot_skipped_);
        } else {
          _this->_impl_.event_.bot_pushed_bot_skipped_->MergeFrom(from._internal_bot_pushed_bot_skipped());
        }
        break;
      }
      case kDefenderInDefenseAreaPartially: {
        if (oneof_needs_init) {
          _this->_impl_.event_.defender_in_defense_area_partially_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_DefenderInDefenseAreaPartially>(arena, *from._impl_.event_.defender_in_defense_area_partially_);
        } else {
          _this->_impl_.event_.defender_in_defense_area_partially_->MergeFrom(from._internal_defender_in_defense_area_partially());
        }
        break;
      }
      case kMultiplePlacementFailures: {
        if (oneof_needs_init) {
          _this->_impl_.event_.multiple_placement_failures_ =
              ::google::protobuf::Message::CopyConstruct<::GameEvent_MultiplePlacementFailures>(arena, *from._impl_.event_.multiple_placement_failures_);
        } else {
          _this->_impl_.event_.multiple_placement_failures_->MergeFrom(from._internal_multiple_placement_failures());
        }
        break;
      }
      case EVENT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameEvent::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const GameEvent&>(msg);
  switch (this_.event_case()) {
    case kBallLeftFieldTouchLine: {
      if (this_.event_case() == kBallLeftFieldTouchLine && !this_._impl_.event_.ball_left_field_touch_line_->IsInitialized())
        return false;
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (this_.event_case() == kBallLeftFieldGoalLine && !this_._impl_.event_.ball_left_field_goal_line_->IsInitialized())
        return false;
      break;
    }
    case kAimlessKick: {
      if (this_.event_case() == kAimlessKick && !this_._impl_.event_.aimless_kick_->IsInitialized())
        return false;
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (this_.event_case() == kAttackerTooCloseToDefenseArea && !this_._impl_.event_.attacker_too_close_to_defense_area_->IsInitialized())
        return false;
      break;
    }
    case kDefenderInDefenseArea: {
      if (this_.event_case() == kDefenderInDefenseArea && !this_._impl_.event_.defender_in_defense_area_->IsInitialized())
        return false;
      break;
    }
    case kBoundaryCrossing: {
      if (this_.event_case() == kBoundaryCrossing && !this_._impl_.event_.boundary_crossing_->IsInitialized())
        return false;
      break;
    }
    case kKeeperHeldBall: {
      if (this_.event_case() == kKeeperHeldBall && !this_._impl_.event_.keeper_held_ball_->IsInitialized())
        return false;
      break;
    }
    case kBotDribbledBallTooFar: {
      if (this_.event_case() == kBotDribbledBallTooFar && !this_._impl_.event_.bot_dribbled_ball_too_far_->IsInitialized())
        return false;
      break;
    }
    case kBotPushedBot: {
      if (this_.event_case() == kBotPushedBot && !this_._impl_.event_.bot_pushed_bot_->IsInitialized())
        return false;
      break;
    }
    case kBotHeldBallDeliberately: {
      if (this_.event_case() == kBotHeldBallDeliberately && !this_._impl_.event_.bot_held_ball_deliberately_->IsInitialized())
        return false;
      break;
    }
    case kBotTippedOver: {
      if (this_.event_case() == kBotTippedOver && !this_._impl_.event_.bot_tipped_over_->IsInitialized())
        return false;
      break;
    }
    case kBotDroppedParts: {
      if (this_.event_case() == kBotDroppedParts && !this_._impl_.event_.bot_dropped_parts_->IsInitialized())
        return false;
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (this_.event_case() == kAttackerTouchedBallInDefenseArea && !this_._impl_.event_.attacker_touched_ball_in_defense_area_->IsInitialized())
        return false;
      break;
    }
    case kBotKickedBallTooFast: {
      if (this_.event_case() == kBotKickedBallTooFast && !this_._impl_.event_.bot_kicked_ball_too_fast_->IsInitialized())
        return false;
      break;
    }
    case kBotCrashUnique: {
      if (this_.event_case() == kBotCrashUnique && !this_._impl_.event_.bot_crash_unique_->IsInitialized())
        return false;
      break;
    }
    case kBotCrashDrawn: {
      if (this_.event_case() == kBotCrashDrawn && !this_._impl_.event_.bot_crash_drawn_->IsInitialized())
        return false;
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (this_.event_case() == kDefenderTooCloseToKickPoint && !this_._impl_.event_.defender_too_close_to_kick_point_->IsInitialized())
        return false;
      break;
    }
    case kBotTooFastInStop: {
      if (this_.event_case() == kBotTooFastInStop && !this_._impl_.event_.bot_too_fast_in_stop_->IsInitialized())
        return false;
      break;
    }
    case kBotInterferedPlacement: {
      if (this_.event_case() == kBotInterferedPlacement && !this_._impl_.event_.bot_interfered_placement_->IsInitialized())
        return false;
      break;
    }
    case kPossibleGoal: {
      if (this_.event_case() == kPossibleGoal && !this_._impl_.event_.possible_goal_->IsInitialized())
        return false;
      break;
    }
    case kGoal: {
      if (this_.event_case() == kGoal && !this_._impl_.event_.goal_->IsInitialized())
        return false;
      break;
    }
    case kInvalidGoal: {
      if (this_.event_case() == kInvalidGoal && !this_._impl_.event_.invalid_goal_->IsInitialized())
        return false;
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (this_.event_case() == kAttackerDoubleTouchedBall && !this_._impl_.event_.attacker_double_touched_ball_->IsInitialized())
        return false;
      break;
    }
    case kPlacementSucceeded: {
      if (this_.event_case() == kPlacementSucceeded && !this_._impl_.event_.placement_succeeded_->IsInitialized())
        return false;
      break;
    }
    case kPenaltyKickFailed: {
      if (this_.event_case() == kPenaltyKickFailed && !this_._impl_.event_.penalty_kick_failed_->IsInitialized())
        return false;
      break;
    }
    case kNoProgressInGame: {
      if (this_.event_case() == kNoProgressInGame && !this_._impl_.event_.no_progress_in_game_->IsInitialized())
        return false;
      break;
    }
    case kPlacementFailed: {
      if (this_.event_case() == kPlacementFailed && !this_._impl_.event_.placement_failed_->IsInitialized())
        return false;
      break;
    }
    case kMultipleCards: {
      if (this_.event_case() == kMultipleCards && !this_._impl_.event_.multiple_cards_->IsInitialized())
        return false;
      break;
    }
    case kMultipleFouls: {
      if (this_.event_case() == kMultipleFouls && !this_._impl_.event_.multiple_fouls_->IsInitialized())
        return false;
      break;
    }
    case kBotSubstitution: {
      if (this_.event_case() == kBotSubstitution && !this_._impl_.event_.bot_substitution_->IsInitialized())
        return false;
      break;
    }
    case kExcessiveBotSubstitution: {
      if (this_.event_case() == kExcessiveBotSubstitution && !this_._impl_.event_.excessive_bot_substitution_->IsInitialized())
        return false;
      break;
    }
    case kTooManyRobots: {
      if (this_.event_case() == kTooManyRobots && !this_._impl_.event_.too_many_robots_->IsInitialized())
        return false;
      break;
    }
    case kChallengeFlag: {
      if (this_.event_case() == kChallengeFlag && !this_._impl_.event_.challenge_flag_->IsInitialized())
        return false;
      break;
    }
    case kChallengeFlagHandled: {
      if (this_.event_case() == kChallengeFlagHandled && !this_._impl_.event_.challenge_flag_handled_->IsInitialized())
        return false;
      break;
    }
    case kEmergencyStop: {
      if (this_.event_case() == kEmergencyStop && !this_._impl_.event_.emergency_stop_->IsInitialized())
        return false;
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (this_.event_case() == kUnsportingBehaviorMinor && !this_._impl_.event_.unsporting_behavior_minor_->IsInitialized())
        return false;
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (this_.event_case() == kUnsportingBehaviorMajor && !this_._impl_.event_.unsporting_behavior_major_->IsInitialized())
        return false;
      break;
    }
    case kPrepared: {
      break;
    }
    case kIndirectGoal: {
      if (this_.event_case() == kIndirectGoal && !this_._impl_.event_.indirect_goal_->IsInitialized())
        return false;
      break;
    }
    case kChippedGoal: {
      if (this_.event_case() == kChippedGoal && !this_._impl_.event_.chipped_goal_->IsInitialized())
        return false;
      break;
    }
    case kKickTimeout: {
      if (this_.event_case() == kKickTimeout && !this_._impl_.event_.kick_timeout_->IsInitialized())
        return false;
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (this_.event_case() == kAttackerTouchedOpponentInDefenseArea && !this_._impl_.event_.attacker_touched_opponent_in_defense_area_->IsInitialized())
        return false;
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (this_.event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped && !this_._impl_.event_.attacker_touched_opponent_in_defense_area_skipped_->IsInitialized())
        return false;
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (this_.event_case() == kBotCrashUniqueSkipped && !this_._impl_.event_.bot_crash_unique_skipped_->IsInitialized())
        return false;
      break;
    }
    case kBotPushedBotSkipped: {
      if (this_.event_case() == kBotPushedBotSkipped && !this_._impl_.event_.bot_pushed_bot_skipped_->IsInitialized())
        return false;
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (this_.event_case() == kDefenderInDefenseAreaPartially && !this_._impl_.event_.defender_in_defense_area_partially_->IsInitialized())
        return false;
      break;
    }
    case kMultiplePlacementFailures: {
      if (this_.event_case() == kMultiplePlacementFailures && !this_._impl_.event_.multiple_placement_failures_->IsInitialized())
        return false;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameEvent::InternalSwap(GameEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.origin_.InternalSwap(&other->_impl_.origin_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.type_)
      + sizeof(GameEvent::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.created_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.created_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.created_timestamp_));
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata GameEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
