// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_vision_geometry.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fgeometry_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fgeometry_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ssl_5fvision_5fgeometry_2eproto;
class SSL_BallModelChipFixedLoss;
struct SSL_BallModelChipFixedLossDefaultTypeInternal;
extern SSL_BallModelChipFixedLossDefaultTypeInternal _SSL_BallModelChipFixedLoss_default_instance_;
class SSL_BallModelStraightTwoPhase;
struct SSL_BallModelStraightTwoPhaseDefaultTypeInternal;
extern SSL_BallModelStraightTwoPhaseDefaultTypeInternal _SSL_BallModelStraightTwoPhase_default_instance_;
class SSL_FieldCircularArc;
struct SSL_FieldCircularArcDefaultTypeInternal;
extern SSL_FieldCircularArcDefaultTypeInternal _SSL_FieldCircularArc_default_instance_;
class SSL_FieldLineSegment;
struct SSL_FieldLineSegmentDefaultTypeInternal;
extern SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
class SSL_GeometryCameraCalibration;
struct SSL_GeometryCameraCalibrationDefaultTypeInternal;
extern SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryData;
struct SSL_GeometryDataDefaultTypeInternal;
extern SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
class SSL_GeometryFieldSize;
struct SSL_GeometryFieldSizeDefaultTypeInternal;
extern SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryModels;
struct SSL_GeometryModelsDefaultTypeInternal;
extern SSL_GeometryModelsDefaultTypeInternal _SSL_GeometryModels_default_instance_;
class Vector2f;
struct Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum SSL_FieldShapeType : int {
  Undefined = 0,
  CenterCircle = 1,
  TopTouchLine = 2,
  BottomTouchLine = 3,
  LeftGoalLine = 4,
  RightGoalLine = 5,
  HalfwayLine = 6,
  CenterLine = 7,
  LeftPenaltyStretch = 8,
  RightPenaltyStretch = 9,
  LeftFieldLeftPenaltyStretch = 10,
  LeftFieldRightPenaltyStretch = 11,
  RightFieldLeftPenaltyStretch = 12,
  RightFieldRightPenaltyStretch = 13,
};

bool SSL_FieldShapeType_IsValid(int value);
extern const uint32_t SSL_FieldShapeType_internal_data_[];
constexpr SSL_FieldShapeType SSL_FieldShapeType_MIN = static_cast<SSL_FieldShapeType>(0);
constexpr SSL_FieldShapeType SSL_FieldShapeType_MAX = static_cast<SSL_FieldShapeType>(13);
constexpr int SSL_FieldShapeType_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
SSL_FieldShapeType_descriptor();
template <typename T>
const std::string& SSL_FieldShapeType_Name(T value) {
  static_assert(std::is_same<T, SSL_FieldShapeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SSL_FieldShapeType_Name().");
  return SSL_FieldShapeType_Name(static_cast<SSL_FieldShapeType>(value));
}
template <>
inline const std::string& SSL_FieldShapeType_Name(SSL_FieldShapeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SSL_FieldShapeType_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool SSL_FieldShapeType_Parse(absl::string_view name, SSL_FieldShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_FieldShapeType>(
      SSL_FieldShapeType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector2f final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {}
  ~Vector2f() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector2f(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector2f(const Vector2f& from) : Vector2f(nullptr, from) {}
  inline Vector2f(Vector2f&& from) noexcept
      : Vector2f(nullptr, std::move(from)) {}
  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
        &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vector2f& a, Vector2f& b) { a.Swap(&b); }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2f* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Vector2f>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector2f& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector2f& from) { Vector2f::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Vector2f* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Vector2f"; }

 protected:
  explicit Vector2f(::google::protobuf::Arena* arena);
  Vector2f(::google::protobuf::Arena* arena, const Vector2f& from);
  Vector2f(::google::protobuf::Arena* arena, Vector2f&& from) noexcept
      : Vector2f(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // required float y = 2;
  bool has_y() const;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:Vector2f)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Vector2f_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector2f& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryCameraCalibration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_GeometryCameraCalibration) */ {
 public:
  inline SSL_GeometryCameraCalibration() : SSL_GeometryCameraCalibration(nullptr) {}
  ~SSL_GeometryCameraCalibration() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibration(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from) : SSL_GeometryCameraCalibration(nullptr, from) {}
  inline SSL_GeometryCameraCalibration(SSL_GeometryCameraCalibration&& from) noexcept
      : SSL_GeometryCameraCalibration(nullptr, std::move(from)) {}
  inline SSL_GeometryCameraCalibration& operator=(const SSL_GeometryCameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryCameraCalibration& operator=(SSL_GeometryCameraCalibration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryCameraCalibration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryCameraCalibration* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryCameraCalibration*>(
        &_SSL_GeometryCameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SSL_GeometryCameraCalibration& a, SSL_GeometryCameraCalibration& b) { a.Swap(&b); }
  inline void Swap(SSL_GeometryCameraCalibration* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryCameraCalibration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryCameraCalibration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_GeometryCameraCalibration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryCameraCalibration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_GeometryCameraCalibration& from) { SSL_GeometryCameraCalibration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_GeometryCameraCalibration* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_GeometryCameraCalibration"; }

 protected:
  explicit SSL_GeometryCameraCalibration(::google::protobuf::Arena* arena);
  SSL_GeometryCameraCalibration(::google::protobuf::Arena* arena, const SSL_GeometryCameraCalibration& from);
  SSL_GeometryCameraCalibration(::google::protobuf::Arena* arena, SSL_GeometryCameraCalibration&& from) noexcept
      : SSL_GeometryCameraCalibration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCameraIdFieldNumber = 1,
    kFocalLengthFieldNumber = 2,
    kPrincipalPointXFieldNumber = 3,
    kPrincipalPointYFieldNumber = 4,
    kDistortionFieldNumber = 5,
    kQ0FieldNumber = 6,
    kQ1FieldNumber = 7,
    kQ2FieldNumber = 8,
    kQ3FieldNumber = 9,
    kTxFieldNumber = 10,
    kTyFieldNumber = 11,
    kTzFieldNumber = 12,
    kDerivedCameraWorldTxFieldNumber = 13,
    kDerivedCameraWorldTyFieldNumber = 14,
    kDerivedCameraWorldTzFieldNumber = 15,
    kPixelImageWidthFieldNumber = 16,
    kPixelImageHeightFieldNumber = 17,
  };
  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  void clear_camera_id() ;
  ::uint32_t camera_id() const;
  void set_camera_id(::uint32_t value);

  private:
  ::uint32_t _internal_camera_id() const;
  void _internal_set_camera_id(::uint32_t value);

  public:
  // required float focal_length = 2;
  bool has_focal_length() const;
  void clear_focal_length() ;
  float focal_length() const;
  void set_focal_length(float value);

  private:
  float _internal_focal_length() const;
  void _internal_set_focal_length(float value);

  public:
  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  void clear_principal_point_x() ;
  float principal_point_x() const;
  void set_principal_point_x(float value);

  private:
  float _internal_principal_point_x() const;
  void _internal_set_principal_point_x(float value);

  public:
  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  void clear_principal_point_y() ;
  float principal_point_y() const;
  void set_principal_point_y(float value);

  private:
  float _internal_principal_point_y() const;
  void _internal_set_principal_point_y(float value);

  public:
  // required float distortion = 5;
  bool has_distortion() const;
  void clear_distortion() ;
  float distortion() const;
  void set_distortion(float value);

  private:
  float _internal_distortion() const;
  void _internal_set_distortion(float value);

  public:
  // required float q0 = 6;
  bool has_q0() const;
  void clear_q0() ;
  float q0() const;
  void set_q0(float value);

  private:
  float _internal_q0() const;
  void _internal_set_q0(float value);

  public:
  // required float q1 = 7;
  bool has_q1() const;
  void clear_q1() ;
  float q1() const;
  void set_q1(float value);

  private:
  float _internal_q1() const;
  void _internal_set_q1(float value);

  public:
  // required float q2 = 8;
  bool has_q2() const;
  void clear_q2() ;
  float q2() const;
  void set_q2(float value);

  private:
  float _internal_q2() const;
  void _internal_set_q2(float value);

  public:
  // required float q3 = 9;
  bool has_q3() const;
  void clear_q3() ;
  float q3() const;
  void set_q3(float value);

  private:
  float _internal_q3() const;
  void _internal_set_q3(float value);

  public:
  // required float tx = 10;
  bool has_tx() const;
  void clear_tx() ;
  float tx() const;
  void set_tx(float value);

  private:
  float _internal_tx() const;
  void _internal_set_tx(float value);

  public:
  // required float ty = 11;
  bool has_ty() const;
  void clear_ty() ;
  float ty() const;
  void set_ty(float value);

  private:
  float _internal_ty() const;
  void _internal_set_ty(float value);

  public:
  // required float tz = 12;
  bool has_tz() const;
  void clear_tz() ;
  float tz() const;
  void set_tz(float value);

  private:
  float _internal_tz() const;
  void _internal_set_tz(float value);

  public:
  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  void clear_derived_camera_world_tx() ;
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);

  private:
  float _internal_derived_camera_world_tx() const;
  void _internal_set_derived_camera_world_tx(float value);

  public:
  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  void clear_derived_camera_world_ty() ;
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);

  private:
  float _internal_derived_camera_world_ty() const;
  void _internal_set_derived_camera_world_ty(float value);

  public:
  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  void clear_derived_camera_world_tz() ;
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);

  private:
  float _internal_derived_camera_world_tz() const;
  void _internal_set_derived_camera_world_tz(float value);

  public:
  // optional uint32 pixel_image_width = 16;
  bool has_pixel_image_width() const;
  void clear_pixel_image_width() ;
  ::uint32_t pixel_image_width() const;
  void set_pixel_image_width(::uint32_t value);

  private:
  ::uint32_t _internal_pixel_image_width() const;
  void _internal_set_pixel_image_width(::uint32_t value);

  public:
  // optional uint32 pixel_image_height = 17;
  bool has_pixel_image_height() const;
  void clear_pixel_image_height() ;
  ::uint32_t pixel_image_height() const;
  void set_pixel_image_height(::uint32_t value);

  private:
  ::uint32_t _internal_pixel_image_height() const;
  void _internal_set_pixel_image_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_GeometryCameraCalibration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_GeometryCameraCalibration_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_GeometryCameraCalibration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t camera_id_;
    float focal_length_;
    float principal_point_x_;
    float principal_point_y_;
    float distortion_;
    float q0_;
    float q1_;
    float q2_;
    float q3_;
    float tx_;
    float ty_;
    float tz_;
    float derived_camera_world_tx_;
    float derived_camera_world_ty_;
    float derived_camera_world_tz_;
    ::uint32_t pixel_image_width_;
    ::uint32_t pixel_image_height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_BallModelStraightTwoPhase final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_BallModelStraightTwoPhase) */ {
 public:
  inline SSL_BallModelStraightTwoPhase() : SSL_BallModelStraightTwoPhase(nullptr) {}
  ~SSL_BallModelStraightTwoPhase() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhase(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_BallModelStraightTwoPhase(const SSL_BallModelStraightTwoPhase& from) : SSL_BallModelStraightTwoPhase(nullptr, from) {}
  inline SSL_BallModelStraightTwoPhase(SSL_BallModelStraightTwoPhase&& from) noexcept
      : SSL_BallModelStraightTwoPhase(nullptr, std::move(from)) {}
  inline SSL_BallModelStraightTwoPhase& operator=(const SSL_BallModelStraightTwoPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_BallModelStraightTwoPhase& operator=(SSL_BallModelStraightTwoPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_BallModelStraightTwoPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_BallModelStraightTwoPhase* internal_default_instance() {
    return reinterpret_cast<const SSL_BallModelStraightTwoPhase*>(
        &_SSL_BallModelStraightTwoPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SSL_BallModelStraightTwoPhase& a, SSL_BallModelStraightTwoPhase& b) { a.Swap(&b); }
  inline void Swap(SSL_BallModelStraightTwoPhase* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_BallModelStraightTwoPhase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_BallModelStraightTwoPhase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_BallModelStraightTwoPhase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_BallModelStraightTwoPhase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_BallModelStraightTwoPhase& from) { SSL_BallModelStraightTwoPhase::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_BallModelStraightTwoPhase* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_BallModelStraightTwoPhase"; }

 protected:
  explicit SSL_BallModelStraightTwoPhase(::google::protobuf::Arena* arena);
  SSL_BallModelStraightTwoPhase(::google::protobuf::Arena* arena, const SSL_BallModelStraightTwoPhase& from);
  SSL_BallModelStraightTwoPhase(::google::protobuf::Arena* arena, SSL_BallModelStraightTwoPhase&& from) noexcept
      : SSL_BallModelStraightTwoPhase(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAccSlideFieldNumber = 1,
    kAccRollFieldNumber = 2,
    kKSwitchFieldNumber = 3,
  };
  // required double acc_slide = 1;
  bool has_acc_slide() const;
  void clear_acc_slide() ;
  double acc_slide() const;
  void set_acc_slide(double value);

  private:
  double _internal_acc_slide() const;
  void _internal_set_acc_slide(double value);

  public:
  // required double acc_roll = 2;
  bool has_acc_roll() const;
  void clear_acc_roll() ;
  double acc_roll() const;
  void set_acc_roll(double value);

  private:
  double _internal_acc_roll() const;
  void _internal_set_acc_roll(double value);

  public:
  // required double k_switch = 3;
  bool has_k_switch() const;
  void clear_k_switch() ;
  double k_switch() const;
  void set_k_switch(double value);

  private:
  double _internal_k_switch() const;
  void _internal_set_k_switch(double value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_BallModelStraightTwoPhase)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_BallModelStraightTwoPhase_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_BallModelStraightTwoPhase& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double acc_slide_;
    double acc_roll_;
    double k_switch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_BallModelChipFixedLoss final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_BallModelChipFixedLoss) */ {
 public:
  inline SSL_BallModelChipFixedLoss() : SSL_BallModelChipFixedLoss(nullptr) {}
  ~SSL_BallModelChipFixedLoss() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLoss(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_BallModelChipFixedLoss(const SSL_BallModelChipFixedLoss& from) : SSL_BallModelChipFixedLoss(nullptr, from) {}
  inline SSL_BallModelChipFixedLoss(SSL_BallModelChipFixedLoss&& from) noexcept
      : SSL_BallModelChipFixedLoss(nullptr, std::move(from)) {}
  inline SSL_BallModelChipFixedLoss& operator=(const SSL_BallModelChipFixedLoss& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_BallModelChipFixedLoss& operator=(SSL_BallModelChipFixedLoss&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_BallModelChipFixedLoss& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_BallModelChipFixedLoss* internal_default_instance() {
    return reinterpret_cast<const SSL_BallModelChipFixedLoss*>(
        &_SSL_BallModelChipFixedLoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SSL_BallModelChipFixedLoss& a, SSL_BallModelChipFixedLoss& b) { a.Swap(&b); }
  inline void Swap(SSL_BallModelChipFixedLoss* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_BallModelChipFixedLoss* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_BallModelChipFixedLoss* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_BallModelChipFixedLoss>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_BallModelChipFixedLoss& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_BallModelChipFixedLoss& from) { SSL_BallModelChipFixedLoss::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_BallModelChipFixedLoss* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_BallModelChipFixedLoss"; }

 protected:
  explicit SSL_BallModelChipFixedLoss(::google::protobuf::Arena* arena);
  SSL_BallModelChipFixedLoss(::google::protobuf::Arena* arena, const SSL_BallModelChipFixedLoss& from);
  SSL_BallModelChipFixedLoss(::google::protobuf::Arena* arena, SSL_BallModelChipFixedLoss&& from) noexcept
      : SSL_BallModelChipFixedLoss(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDampingXyFirstHopFieldNumber = 1,
    kDampingXyOtherHopsFieldNumber = 2,
    kDampingZFieldNumber = 3,
  };
  // required double damping_xy_first_hop = 1;
  bool has_damping_xy_first_hop() const;
  void clear_damping_xy_first_hop() ;
  double damping_xy_first_hop() const;
  void set_damping_xy_first_hop(double value);

  private:
  double _internal_damping_xy_first_hop() const;
  void _internal_set_damping_xy_first_hop(double value);

  public:
  // required double damping_xy_other_hops = 2;
  bool has_damping_xy_other_hops() const;
  void clear_damping_xy_other_hops() ;
  double damping_xy_other_hops() const;
  void set_damping_xy_other_hops(double value);

  private:
  double _internal_damping_xy_other_hops() const;
  void _internal_set_damping_xy_other_hops(double value);

  public:
  // required double damping_z = 3;
  bool has_damping_z() const;
  void clear_damping_z() ;
  double damping_z() const;
  void set_damping_z(double value);

  private:
  double _internal_damping_z() const;
  void _internal_set_damping_z(double value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_BallModelChipFixedLoss)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_BallModelChipFixedLoss_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_BallModelChipFixedLoss& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double damping_xy_first_hop_;
    double damping_xy_other_hops_;
    double damping_z_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryModels final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_GeometryModels) */ {
 public:
  inline SSL_GeometryModels() : SSL_GeometryModels(nullptr) {}
  ~SSL_GeometryModels() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_GeometryModels(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_GeometryModels(const SSL_GeometryModels& from) : SSL_GeometryModels(nullptr, from) {}
  inline SSL_GeometryModels(SSL_GeometryModels&& from) noexcept
      : SSL_GeometryModels(nullptr, std::move(from)) {}
  inline SSL_GeometryModels& operator=(const SSL_GeometryModels& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryModels& operator=(SSL_GeometryModels&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryModels& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryModels* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryModels*>(
        &_SSL_GeometryModels_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SSL_GeometryModels& a, SSL_GeometryModels& b) { a.Swap(&b); }
  inline void Swap(SSL_GeometryModels* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryModels* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryModels* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_GeometryModels>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryModels& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_GeometryModels& from) { SSL_GeometryModels::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_GeometryModels* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_GeometryModels"; }

 protected:
  explicit SSL_GeometryModels(::google::protobuf::Arena* arena);
  SSL_GeometryModels(::google::protobuf::Arena* arena, const SSL_GeometryModels& from);
  SSL_GeometryModels(::google::protobuf::Arena* arena, SSL_GeometryModels&& from) noexcept
      : SSL_GeometryModels(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStraightTwoPhaseFieldNumber = 1,
    kChipFixedLossFieldNumber = 2,
  };
  // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
  bool has_straight_two_phase() const;
  void clear_straight_two_phase() ;
  const ::SSL_BallModelStraightTwoPhase& straight_two_phase() const;
  PROTOBUF_NODISCARD ::SSL_BallModelStraightTwoPhase* release_straight_two_phase();
  ::SSL_BallModelStraightTwoPhase* mutable_straight_two_phase();
  void set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* value);
  void unsafe_arena_set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* value);
  ::SSL_BallModelStraightTwoPhase* unsafe_arena_release_straight_two_phase();

  private:
  const ::SSL_BallModelStraightTwoPhase& _internal_straight_two_phase() const;
  ::SSL_BallModelStraightTwoPhase* _internal_mutable_straight_two_phase();

  public:
  // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
  bool has_chip_fixed_loss() const;
  void clear_chip_fixed_loss() ;
  const ::SSL_BallModelChipFixedLoss& chip_fixed_loss() const;
  PROTOBUF_NODISCARD ::SSL_BallModelChipFixedLoss* release_chip_fixed_loss();
  ::SSL_BallModelChipFixedLoss* mutable_chip_fixed_loss();
  void set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* value);
  void unsafe_arena_set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* value);
  ::SSL_BallModelChipFixedLoss* unsafe_arena_release_chip_fixed_loss();

  private:
  const ::SSL_BallModelChipFixedLoss& _internal_chip_fixed_loss() const;
  ::SSL_BallModelChipFixedLoss* _internal_mutable_chip_fixed_loss();

  public:
  // @@protoc_insertion_point(class_scope:SSL_GeometryModels)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_GeometryModels_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_GeometryModels& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::SSL_BallModelStraightTwoPhase* straight_two_phase_;
    ::SSL_BallModelChipFixedLoss* chip_fixed_loss_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldLineSegment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_FieldLineSegment) */ {
 public:
  inline SSL_FieldLineSegment() : SSL_FieldLineSegment(nullptr) {}
  ~SSL_FieldLineSegment() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_FieldLineSegment(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_FieldLineSegment(const SSL_FieldLineSegment& from) : SSL_FieldLineSegment(nullptr, from) {}
  inline SSL_FieldLineSegment(SSL_FieldLineSegment&& from) noexcept
      : SSL_FieldLineSegment(nullptr, std::move(from)) {}
  inline SSL_FieldLineSegment& operator=(const SSL_FieldLineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldLineSegment& operator=(SSL_FieldLineSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_FieldLineSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_FieldLineSegment* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldLineSegment*>(
        &_SSL_FieldLineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SSL_FieldLineSegment& a, SSL_FieldLineSegment& b) { a.Swap(&b); }
  inline void Swap(SSL_FieldLineSegment* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_FieldLineSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_FieldLineSegment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_FieldLineSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_FieldLineSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_FieldLineSegment& from) { SSL_FieldLineSegment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_FieldLineSegment* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_FieldLineSegment"; }

 protected:
  explicit SSL_FieldLineSegment(::google::protobuf::Arena* arena);
  SSL_FieldLineSegment(::google::protobuf::Arena* arena, const SSL_FieldLineSegment& from);
  SSL_FieldLineSegment(::google::protobuf::Arena* arena, SSL_FieldLineSegment&& from) noexcept
      : SSL_FieldLineSegment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kThicknessFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required .Vector2f p1 = 2;
  bool has_p1() const;
  void clear_p1() ;
  const ::Vector2f& p1() const;
  PROTOBUF_NODISCARD ::Vector2f* release_p1();
  ::Vector2f* mutable_p1();
  void set_allocated_p1(::Vector2f* value);
  void unsafe_arena_set_allocated_p1(::Vector2f* value);
  ::Vector2f* unsafe_arena_release_p1();

  private:
  const ::Vector2f& _internal_p1() const;
  ::Vector2f* _internal_mutable_p1();

  public:
  // required .Vector2f p2 = 3;
  bool has_p2() const;
  void clear_p2() ;
  const ::Vector2f& p2() const;
  PROTOBUF_NODISCARD ::Vector2f* release_p2();
  ::Vector2f* mutable_p2();
  void set_allocated_p2(::Vector2f* value);
  void unsafe_arena_set_allocated_p2(::Vector2f* value);
  ::Vector2f* unsafe_arena_release_p2();

  private:
  const ::Vector2f& _internal_p2() const;
  ::Vector2f* _internal_mutable_p2();

  public:
  // required float thickness = 4;
  bool has_thickness() const;
  void clear_thickness() ;
  float thickness() const;
  void set_thickness(float value);

  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);

  public:
  // optional .SSL_FieldShapeType type = 5;
  bool has_type() const;
  void clear_type() ;
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);

  private:
  ::SSL_FieldShapeType _internal_type() const;
  void _internal_set_type(::SSL_FieldShapeType value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_FieldLineSegment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_FieldLineSegment_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_FieldLineSegment& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Vector2f* p1_;
    ::Vector2f* p2_;
    float thickness_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldCircularArc final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_FieldCircularArc) */ {
 public:
  inline SSL_FieldCircularArc() : SSL_FieldCircularArc(nullptr) {}
  ~SSL_FieldCircularArc() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_FieldCircularArc(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_FieldCircularArc(const SSL_FieldCircularArc& from) : SSL_FieldCircularArc(nullptr, from) {}
  inline SSL_FieldCircularArc(SSL_FieldCircularArc&& from) noexcept
      : SSL_FieldCircularArc(nullptr, std::move(from)) {}
  inline SSL_FieldCircularArc& operator=(const SSL_FieldCircularArc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldCircularArc& operator=(SSL_FieldCircularArc&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_FieldCircularArc& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_FieldCircularArc* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldCircularArc*>(
        &_SSL_FieldCircularArc_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SSL_FieldCircularArc& a, SSL_FieldCircularArc& b) { a.Swap(&b); }
  inline void Swap(SSL_FieldCircularArc* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_FieldCircularArc* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_FieldCircularArc* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_FieldCircularArc>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_FieldCircularArc& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_FieldCircularArc& from) { SSL_FieldCircularArc::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_FieldCircularArc* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_FieldCircularArc"; }

 protected:
  explicit SSL_FieldCircularArc(::google::protobuf::Arena* arena);
  SSL_FieldCircularArc(::google::protobuf::Arena* arena, const SSL_FieldCircularArc& from);
  SSL_FieldCircularArc(::google::protobuf::Arena* arena, SSL_FieldCircularArc&& from) noexcept
      : SSL_FieldCircularArc(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kCenterFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kA1FieldNumber = 4,
    kA2FieldNumber = 5,
    kThicknessFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required .Vector2f center = 2;
  bool has_center() const;
  void clear_center() ;
  const ::Vector2f& center() const;
  PROTOBUF_NODISCARD ::Vector2f* release_center();
  ::Vector2f* mutable_center();
  void set_allocated_center(::Vector2f* value);
  void unsafe_arena_set_allocated_center(::Vector2f* value);
  ::Vector2f* unsafe_arena_release_center();

  private:
  const ::Vector2f& _internal_center() const;
  ::Vector2f* _internal_mutable_center();

  public:
  // required float radius = 3;
  bool has_radius() const;
  void clear_radius() ;
  float radius() const;
  void set_radius(float value);

  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);

  public:
  // required float a1 = 4;
  bool has_a1() const;
  void clear_a1() ;
  float a1() const;
  void set_a1(float value);

  private:
  float _internal_a1() const;
  void _internal_set_a1(float value);

  public:
  // required float a2 = 5;
  bool has_a2() const;
  void clear_a2() ;
  float a2() const;
  void set_a2(float value);

  private:
  float _internal_a2() const;
  void _internal_set_a2(float value);

  public:
  // required float thickness = 6;
  bool has_thickness() const;
  void clear_thickness() ;
  float thickness() const;
  void set_thickness(float value);

  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);

  public:
  // optional .SSL_FieldShapeType type = 7;
  bool has_type() const;
  void clear_type() ;
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);

  private:
  ::SSL_FieldShapeType _internal_type() const;
  void _internal_set_type(::SSL_FieldShapeType value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_FieldCircularArc)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_FieldCircularArc_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_FieldCircularArc& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Vector2f* center_;
    float radius_;
    float a1_;
    float a2_;
    float thickness_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryFieldSize final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_GeometryFieldSize) */ {
 public:
  inline SSL_GeometryFieldSize() : SSL_GeometryFieldSize(nullptr) {}
  ~SSL_GeometryFieldSize() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_GeometryFieldSize(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from) : SSL_GeometryFieldSize(nullptr, from) {}
  inline SSL_GeometryFieldSize(SSL_GeometryFieldSize&& from) noexcept
      : SSL_GeometryFieldSize(nullptr, std::move(from)) {}
  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryFieldSize& operator=(SSL_GeometryFieldSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryFieldSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryFieldSize* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryFieldSize*>(
        &_SSL_GeometryFieldSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SSL_GeometryFieldSize& a, SSL_GeometryFieldSize& b) { a.Swap(&b); }
  inline void Swap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryFieldSize* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_GeometryFieldSize>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryFieldSize& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_GeometryFieldSize& from) { SSL_GeometryFieldSize::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_GeometryFieldSize* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_GeometryFieldSize"; }

 protected:
  explicit SSL_GeometryFieldSize(::google::protobuf::Arena* arena);
  SSL_GeometryFieldSize(::google::protobuf::Arena* arena, const SSL_GeometryFieldSize& from);
  SSL_GeometryFieldSize(::google::protobuf::Arena* arena, SSL_GeometryFieldSize&& from) noexcept
      : SSL_GeometryFieldSize(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldLinesFieldNumber = 6,
    kFieldArcsFieldNumber = 7,
    kFieldLengthFieldNumber = 1,
    kFieldWidthFieldNumber = 2,
    kGoalWidthFieldNumber = 3,
    kGoalDepthFieldNumber = 4,
    kBoundaryWidthFieldNumber = 5,
    kPenaltyAreaDepthFieldNumber = 8,
    kPenaltyAreaWidthFieldNumber = 9,
  };
  // repeated .SSL_FieldLineSegment field_lines = 6;
  int field_lines_size() const;
  private:
  int _internal_field_lines_size() const;

  public:
  void clear_field_lines() ;
  ::SSL_FieldLineSegment* mutable_field_lines(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>* mutable_field_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>& _internal_field_lines() const;
  ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>* _internal_mutable_field_lines();
  public:
  const ::SSL_FieldLineSegment& field_lines(int index) const;
  ::SSL_FieldLineSegment* add_field_lines();
  const ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>& field_lines() const;
  // repeated .SSL_FieldCircularArc field_arcs = 7;
  int field_arcs_size() const;
  private:
  int _internal_field_arcs_size() const;

  public:
  void clear_field_arcs() ;
  ::SSL_FieldCircularArc* mutable_field_arcs(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>* mutable_field_arcs();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>& _internal_field_arcs() const;
  ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>* _internal_mutable_field_arcs();
  public:
  const ::SSL_FieldCircularArc& field_arcs(int index) const;
  ::SSL_FieldCircularArc* add_field_arcs();
  const ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>& field_arcs() const;
  // required int32 field_length = 1;
  bool has_field_length() const;
  void clear_field_length() ;
  ::int32_t field_length() const;
  void set_field_length(::int32_t value);

  private:
  ::int32_t _internal_field_length() const;
  void _internal_set_field_length(::int32_t value);

  public:
  // required int32 field_width = 2;
  bool has_field_width() const;
  void clear_field_width() ;
  ::int32_t field_width() const;
  void set_field_width(::int32_t value);

  private:
  ::int32_t _internal_field_width() const;
  void _internal_set_field_width(::int32_t value);

  public:
  // required int32 goal_width = 3;
  bool has_goal_width() const;
  void clear_goal_width() ;
  ::int32_t goal_width() const;
  void set_goal_width(::int32_t value);

  private:
  ::int32_t _internal_goal_width() const;
  void _internal_set_goal_width(::int32_t value);

  public:
  // required int32 goal_depth = 4;
  bool has_goal_depth() const;
  void clear_goal_depth() ;
  ::int32_t goal_depth() const;
  void set_goal_depth(::int32_t value);

  private:
  ::int32_t _internal_goal_depth() const;
  void _internal_set_goal_depth(::int32_t value);

  public:
  // required int32 boundary_width = 5;
  bool has_boundary_width() const;
  void clear_boundary_width() ;
  ::int32_t boundary_width() const;
  void set_boundary_width(::int32_t value);

  private:
  ::int32_t _internal_boundary_width() const;
  void _internal_set_boundary_width(::int32_t value);

  public:
  // optional int32 penalty_area_depth = 8;
  bool has_penalty_area_depth() const;
  void clear_penalty_area_depth() ;
  ::int32_t penalty_area_depth() const;
  void set_penalty_area_depth(::int32_t value);

  private:
  ::int32_t _internal_penalty_area_depth() const;
  void _internal_set_penalty_area_depth(::int32_t value);

  public:
  // optional int32 penalty_area_width = 9;
  bool has_penalty_area_width() const;
  void clear_penalty_area_width() ;
  ::int32_t penalty_area_width() const;
  void set_penalty_area_width(::int32_t value);

  private:
  ::int32_t _internal_penalty_area_width() const;
  void _internal_set_penalty_area_width(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_GeometryFieldSize)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_GeometryFieldSize_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_GeometryFieldSize& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment > field_lines_;
    ::google::protobuf::RepeatedPtrField< ::SSL_FieldCircularArc > field_arcs_;
    ::int32_t field_length_;
    ::int32_t field_width_;
    ::int32_t goal_width_;
    ::int32_t goal_depth_;
    ::int32_t boundary_width_;
    ::int32_t penalty_area_depth_;
    ::int32_t penalty_area_width_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_GeometryData) */ {
 public:
  inline SSL_GeometryData() : SSL_GeometryData(nullptr) {}
  ~SSL_GeometryData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_GeometryData(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_GeometryData(const SSL_GeometryData& from) : SSL_GeometryData(nullptr, from) {}
  inline SSL_GeometryData(SSL_GeometryData&& from) noexcept
      : SSL_GeometryData(nullptr, std::move(from)) {}
  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryData& operator=(SSL_GeometryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryData* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryData*>(
        &_SSL_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SSL_GeometryData& a, SSL_GeometryData& b) { a.Swap(&b); }
  inline void Swap(SSL_GeometryData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SSL_GeometryData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_GeometryData& from) { SSL_GeometryData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_GeometryData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_GeometryData"; }

 protected:
  explicit SSL_GeometryData(::google::protobuf::Arena* arena);
  SSL_GeometryData(::google::protobuf::Arena* arena, const SSL_GeometryData& from);
  SSL_GeometryData(::google::protobuf::Arena* arena, SSL_GeometryData&& from) noexcept
      : SSL_GeometryData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCalibFieldNumber = 2,
    kFieldFieldNumber = 1,
    kModelsFieldNumber = 3,
  };
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  private:
  int _internal_calib_size() const;

  public:
  void clear_calib() ;
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>* mutable_calib();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>& _internal_calib() const;
  ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>* _internal_mutable_calib();
  public:
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* add_calib();
  const ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>& calib() const;
  // required .SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  void clear_field() ;
  const ::SSL_GeometryFieldSize& field() const;
  PROTOBUF_NODISCARD ::SSL_GeometryFieldSize* release_field();
  ::SSL_GeometryFieldSize* mutable_field();
  void set_allocated_field(::SSL_GeometryFieldSize* value);
  void unsafe_arena_set_allocated_field(::SSL_GeometryFieldSize* value);
  ::SSL_GeometryFieldSize* unsafe_arena_release_field();

  private:
  const ::SSL_GeometryFieldSize& _internal_field() const;
  ::SSL_GeometryFieldSize* _internal_mutable_field();

  public:
  // optional .SSL_GeometryModels models = 3;
  bool has_models() const;
  void clear_models() ;
  const ::SSL_GeometryModels& models() const;
  PROTOBUF_NODISCARD ::SSL_GeometryModels* release_models();
  ::SSL_GeometryModels* mutable_models();
  void set_allocated_models(::SSL_GeometryModels* value);
  void unsafe_arena_set_allocated_models(::SSL_GeometryModels* value);
  ::SSL_GeometryModels* unsafe_arena_release_models();

  private:
  const ::SSL_GeometryModels& _internal_models() const;
  ::SSL_GeometryModels* _internal_mutable_models();

  public:
  // @@protoc_insertion_point(class_scope:SSL_GeometryData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_GeometryData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_GeometryData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
    ::SSL_GeometryFieldSize* field_;
    ::SSL_GeometryModels* models_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector2f

// required float x = 1;
inline bool Vector2f::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Vector2f::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return _internal_x();
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:Vector2f.x)
}
inline float Vector2f::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector2f::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// required float y = 2;
inline bool Vector2f::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Vector2f::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return _internal_y();
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:Vector2f.y)
}
inline float Vector2f::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector2f::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// SSL_FieldLineSegment

// required string name = 1;
inline bool SSL_FieldLineSegment::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_FieldLineSegment::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldLineSegment::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSL_FieldLineSegment::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
inline std::string* SSL_FieldLineSegment::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return _s;
}
inline const std::string& SSL_FieldLineSegment::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SSL_FieldLineSegment::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SSL_FieldLineSegment::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SSL_FieldLineSegment::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SSL_FieldLineSegment::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// required .Vector2f p1 = 2;
inline bool SSL_FieldLineSegment::has_p1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p1_ != nullptr);
  return value;
}
inline void SSL_FieldLineSegment::clear_p1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p1_ != nullptr) _impl_.p1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2f* p = _impl_.p1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return _internal_p1();
}
inline void SSL_FieldLineSegment::unsafe_arena_set_allocated_p1(::Vector2f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.p1_);
  }
  _impl_.p1_ = reinterpret_cast<::Vector2f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldLineSegment.p1)
}
inline ::Vector2f* SSL_FieldLineSegment::release_p1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* released = _impl_.p1_;
  _impl_.p1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2f* SSL_FieldLineSegment::unsafe_arena_release_p1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.p1_;
  _impl_.p1_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2f>(GetArena());
    _impl_.p1_ = reinterpret_cast<::Vector2f*>(p);
  }
  return _impl_.p1_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2f* _msg = _internal_mutable_p1();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return _msg;
}
inline void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.p1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.p1_ = reinterpret_cast<::Vector2f*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// required .Vector2f p2 = 3;
inline bool SSL_FieldLineSegment::has_p2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p2_ != nullptr);
  return value;
}
inline void SSL_FieldLineSegment::clear_p2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p2_ != nullptr) _impl_.p2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2f* p = _impl_.p2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return _internal_p2();
}
inline void SSL_FieldLineSegment::unsafe_arena_set_allocated_p2(::Vector2f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.p2_);
  }
  _impl_.p2_ = reinterpret_cast<::Vector2f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldLineSegment.p2)
}
inline ::Vector2f* SSL_FieldLineSegment::release_p2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2f* released = _impl_.p2_;
  _impl_.p2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2f* SSL_FieldLineSegment::unsafe_arena_release_p2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2f* temp = _impl_.p2_;
  _impl_.p2_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2f>(GetArena());
    _impl_.p2_ = reinterpret_cast<::Vector2f*>(p);
  }
  return _impl_.p2_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::Vector2f* _msg = _internal_mutable_p2();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return _msg;
}
inline void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.p2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.p2_ = reinterpret_cast<::Vector2f*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// required float thickness = 4;
inline bool SSL_FieldLineSegment::has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_FieldLineSegment::clear_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return _internal_thickness();
}
inline void SSL_FieldLineSegment::set_thickness(float value) {
  _internal_set_thickness(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}
inline float SSL_FieldLineSegment::_internal_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thickness_;
}
inline void SSL_FieldLineSegment::_internal_set_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = value;
}

// optional .SSL_FieldShapeType type = 5;
inline bool SSL_FieldLineSegment::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_FieldLineSegment::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::SSL_FieldShapeType SSL_FieldLineSegment::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.type)
  return _internal_type();
}
inline void SSL_FieldLineSegment::set_type(::SSL_FieldShapeType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.type)
}
inline ::SSL_FieldShapeType SSL_FieldLineSegment::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::SSL_FieldShapeType>(_impl_.type_);
}
inline void SSL_FieldLineSegment::_internal_set_type(::SSL_FieldShapeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::SSL_FieldShapeType_IsValid(value));
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// SSL_FieldCircularArc

// required string name = 1;
inline bool SSL_FieldCircularArc::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldCircularArc::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SSL_FieldCircularArc::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.name)
}
inline std::string* SSL_FieldCircularArc::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCircularArc.name)
  return _s;
}
inline const std::string& SSL_FieldCircularArc::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SSL_FieldCircularArc::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SSL_FieldCircularArc::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SSL_FieldCircularArc::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_FieldCircularArc.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SSL_FieldCircularArc::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCircularArc.name)
}

// required .Vector2f center = 2;
inline bool SSL_FieldCircularArc::has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline void SSL_FieldCircularArc::clear_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.center_ != nullptr) _impl_.center_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldCircularArc::_internal_center() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2f* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldCircularArc::center() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.center)
  return _internal_center();
}
inline void SSL_FieldCircularArc::unsafe_arena_set_allocated_center(::Vector2f* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = reinterpret_cast<::Vector2f*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldCircularArc.center)
}
inline ::Vector2f* SSL_FieldCircularArc::release_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* released = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2f* SSL_FieldCircularArc::unsafe_arena_release_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_FieldCircularArc.center)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldCircularArc::_internal_mutable_center() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.center_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2f>(GetArena());
    _impl_.center_ = reinterpret_cast<::Vector2f*>(p);
  }
  return _impl_.center_;
}
inline ::Vector2f* SSL_FieldCircularArc::mutable_center() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCircularArc.center)
  return _msg;
}
inline void SSL_FieldCircularArc::set_allocated_center(::Vector2f* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.center_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.center_ = reinterpret_cast<::Vector2f*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCircularArc.center)
}

// required float radius = 3;
inline bool SSL_FieldCircularArc::has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_radius() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_FieldCircularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.radius)
  return _internal_radius();
}
inline void SSL_FieldCircularArc::set_radius(float value) {
  _internal_set_radius(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.radius)
}
inline float SSL_FieldCircularArc::_internal_radius() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.radius_;
}
inline void SSL_FieldCircularArc::_internal_set_radius(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.radius_ = value;
}

// required float a1 = 4;
inline bool SSL_FieldCircularArc::has_a1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_a1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldCircularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.a1)
  return _internal_a1();
}
inline void SSL_FieldCircularArc::set_a1(float value) {
  _internal_set_a1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.a1)
}
inline float SSL_FieldCircularArc::_internal_a1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a1_;
}
inline void SSL_FieldCircularArc::_internal_set_a1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a1_ = value;
}

// required float a2 = 5;
inline bool SSL_FieldCircularArc::has_a2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_a2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_FieldCircularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.a2)
  return _internal_a2();
}
inline void SSL_FieldCircularArc::set_a2(float value) {
  _internal_set_a2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.a2)
}
inline float SSL_FieldCircularArc::_internal_a2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.a2_;
}
inline void SSL_FieldCircularArc::_internal_set_a2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.a2_ = value;
}

// required float thickness = 6;
inline bool SSL_FieldCircularArc::has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_FieldCircularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.thickness)
  return _internal_thickness();
}
inline void SSL_FieldCircularArc::set_thickness(float value) {
  _internal_set_thickness(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.thickness)
}
inline float SSL_FieldCircularArc::_internal_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thickness_;
}
inline void SSL_FieldCircularArc::_internal_set_thickness(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = value;
}

// optional .SSL_FieldShapeType type = 7;
inline bool SSL_FieldCircularArc::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SSL_FieldCircularArc::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::SSL_FieldShapeType SSL_FieldCircularArc::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.type)
  return _internal_type();
}
inline void SSL_FieldCircularArc::set_type(::SSL_FieldShapeType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.type)
}
inline ::SSL_FieldShapeType SSL_FieldCircularArc::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::SSL_FieldShapeType>(_impl_.type_);
}
inline void SSL_FieldCircularArc::_internal_set_type(::SSL_FieldShapeType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::SSL_FieldShapeType_IsValid(value));
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// SSL_GeometryFieldSize

// required int32 field_length = 1;
inline bool SSL_GeometryFieldSize::has_field_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return _internal_field_length();
}
inline void SSL_GeometryFieldSize::set_field_length(::int32_t value) {
  _internal_set_field_length(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_field_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_length_;
}
inline void SSL_GeometryFieldSize::_internal_set_field_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_length_ = value;
}

// required int32 field_width = 2;
inline bool SSL_GeometryFieldSize::has_field_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return _internal_field_width();
}
inline void SSL_GeometryFieldSize::set_field_width(::int32_t value) {
  _internal_set_field_width(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_field_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_width_;
}
inline void SSL_GeometryFieldSize::_internal_set_field_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_width_ = value;
}

// required int32 goal_width = 3;
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return _internal_goal_width();
}
inline void SSL_GeometryFieldSize::set_goal_width(::int32_t value) {
  _internal_set_goal_width(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_goal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.goal_width_;
}
inline void SSL_GeometryFieldSize::_internal_set_goal_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_width_ = value;
}

// required int32 goal_depth = 4;
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return _internal_goal_depth();
}
inline void SSL_GeometryFieldSize::set_goal_depth(::int32_t value) {
  _internal_set_goal_depth(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_goal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.goal_depth_;
}
inline void SSL_GeometryFieldSize::_internal_set_goal_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goal_depth_ = value;
}

// required int32 boundary_width = 5;
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boundary_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return _internal_boundary_width();
}
inline void SSL_GeometryFieldSize::set_boundary_width(::int32_t value) {
  _internal_set_boundary_width(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_boundary_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.boundary_width_;
}
inline void SSL_GeometryFieldSize::_internal_set_boundary_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.boundary_width_ = value;
}

// repeated .SSL_FieldLineSegment field_lines = 6;
inline int SSL_GeometryFieldSize::_internal_field_lines_size() const {
  return _internal_field_lines().size();
}
inline int SSL_GeometryFieldSize::field_lines_size() const {
  return _internal_field_lines_size();
}
inline void SSL_GeometryFieldSize::clear_field_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_lines_.Clear();
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return _internal_mutable_field_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>* SSL_GeometryFieldSize::mutable_field_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_field_lines();
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return _internal_field_lines().Get(index);
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_FieldLineSegment* _add = _internal_mutable_field_lines()->Add();
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>& SSL_GeometryFieldSize::field_lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return _internal_field_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>&
SSL_GeometryFieldSize::_internal_field_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_lines_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_FieldLineSegment>*
SSL_GeometryFieldSize::_internal_mutable_field_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.field_lines_;
}

// repeated .SSL_FieldCircularArc field_arcs = 7;
inline int SSL_GeometryFieldSize::_internal_field_arcs_size() const {
  return _internal_field_arcs().size();
}
inline int SSL_GeometryFieldSize::field_arcs_size() const {
  return _internal_field_arcs_size();
}
inline void SSL_GeometryFieldSize::clear_field_arcs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_arcs_.Clear();
}
inline ::SSL_FieldCircularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return _internal_mutable_field_arcs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>* SSL_GeometryFieldSize::mutable_field_arcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_field_arcs();
}
inline const ::SSL_FieldCircularArc& SSL_GeometryFieldSize::field_arcs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return _internal_field_arcs().Get(index);
}
inline ::SSL_FieldCircularArc* SSL_GeometryFieldSize::add_field_arcs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_FieldCircularArc* _add = _internal_mutable_field_arcs()->Add();
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>& SSL_GeometryFieldSize::field_arcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return _internal_field_arcs();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>&
SSL_GeometryFieldSize::_internal_field_arcs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_arcs_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_FieldCircularArc>*
SSL_GeometryFieldSize::_internal_mutable_field_arcs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.field_arcs_;
}

// optional int32 penalty_area_depth = 8;
inline bool SSL_GeometryFieldSize::has_penalty_area_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_penalty_area_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.penalty_area_depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t SSL_GeometryFieldSize::penalty_area_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_depth)
  return _internal_penalty_area_depth();
}
inline void SSL_GeometryFieldSize::set_penalty_area_depth(::int32_t value) {
  _internal_set_penalty_area_depth(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_depth)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_penalty_area_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.penalty_area_depth_;
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_area_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.penalty_area_depth_ = value;
}

// optional int32 penalty_area_width = 9;
inline bool SSL_GeometryFieldSize::has_penalty_area_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SSL_GeometryFieldSize::clear_penalty_area_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.penalty_area_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t SSL_GeometryFieldSize::penalty_area_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_width)
  return _internal_penalty_area_width();
}
inline void SSL_GeometryFieldSize::set_penalty_area_width(::int32_t value) {
  _internal_set_penalty_area_width(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_width)
}
inline ::int32_t SSL_GeometryFieldSize::_internal_penalty_area_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.penalty_area_width_;
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_area_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.penalty_area_width_ = value;
}

// -------------------------------------------------------------------

// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
inline bool SSL_GeometryCameraCalibration::has_camera_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_camera_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return _internal_camera_id();
}
inline void SSL_GeometryCameraCalibration::set_camera_id(::uint32_t value) {
  _internal_set_camera_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}
inline ::uint32_t SSL_GeometryCameraCalibration::_internal_camera_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.camera_id_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_camera_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_id_ = value;
}

// required float focal_length = 2;
inline bool SSL_GeometryCameraCalibration::has_focal_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_focal_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.focal_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return _internal_focal_length();
}
inline void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  _internal_set_focal_length(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}
inline float SSL_GeometryCameraCalibration::_internal_focal_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.focal_length_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_focal_length(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.focal_length_ = value;
}

// required float principal_point_x = 3;
inline bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.principal_point_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return _internal_principal_point_x();
}
inline void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  _internal_set_principal_point_x(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.principal_point_x_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.principal_point_x_ = value;
}

// required float principal_point_y = 4;
inline bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.principal_point_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return _internal_principal_point_y();
}
inline void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  _internal_set_principal_point_y(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.principal_point_y_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.principal_point_y_ = value;
}

// required float distortion = 5;
inline bool SSL_GeometryCameraCalibration::has_distortion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_distortion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return _internal_distortion();
}
inline void SSL_GeometryCameraCalibration::set_distortion(float value) {
  _internal_set_distortion(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}
inline float SSL_GeometryCameraCalibration::_internal_distortion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distortion_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_distortion(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distortion_ = value;
}

// required float q0 = 6;
inline bool SSL_GeometryCameraCalibration::has_q0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_q0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return _internal_q0();
}
inline void SSL_GeometryCameraCalibration::set_q0(float value) {
  _internal_set_q0(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}
inline float SSL_GeometryCameraCalibration::_internal_q0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q0_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_q0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q0_ = value;
}

// required float q1 = 7;
inline bool SSL_GeometryCameraCalibration::has_q1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_q1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return _internal_q1();
}
inline void SSL_GeometryCameraCalibration::set_q1(float value) {
  _internal_set_q1(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}
inline float SSL_GeometryCameraCalibration::_internal_q1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q1_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_q1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q1_ = value;
}

// required float q2 = 8;
inline bool SSL_GeometryCameraCalibration::has_q2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_q2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return _internal_q2();
}
inline void SSL_GeometryCameraCalibration::set_q2(float value) {
  _internal_set_q2(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}
inline float SSL_GeometryCameraCalibration::_internal_q2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q2_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_q2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q2_ = value;
}

// required float q3 = 9;
inline bool SSL_GeometryCameraCalibration::has_q3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_q3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return _internal_q3();
}
inline void SSL_GeometryCameraCalibration::set_q3(float value) {
  _internal_set_q3(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}
inline float SSL_GeometryCameraCalibration::_internal_q3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q3_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_q3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q3_ = value;
}

// required float tx = 10;
inline bool SSL_GeometryCameraCalibration::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return _internal_tx();
}
inline void SSL_GeometryCameraCalibration::set_tx(float value) {
  _internal_set_tx(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}
inline float SSL_GeometryCameraCalibration::_internal_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tx_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_tx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tx_ = value;
}

// required float ty = 11;
inline bool SSL_GeometryCameraCalibration::has_ty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_ty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return _internal_ty();
}
inline void SSL_GeometryCameraCalibration::set_ty(float value) {
  _internal_set_ty(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}
inline float SSL_GeometryCameraCalibration::_internal_ty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ty_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_ty(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ty_ = value;
}

// required float tz = 12;
inline bool SSL_GeometryCameraCalibration::has_tz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_tz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return _internal_tz();
}
inline void SSL_GeometryCameraCalibration::set_tz(float value) {
  _internal_set_tz(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}
inline float SSL_GeometryCameraCalibration::_internal_tz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tz_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_tz(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tz_ = value;
}

// optional float derived_camera_world_tx = 13;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return _internal_derived_camera_world_tx();
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  _internal_set_derived_camera_world_tx(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.derived_camera_world_tx_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_tx_ = value;
}

// optional float derived_camera_world_ty = 14;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_ty_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return _internal_derived_camera_world_ty();
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  _internal_set_derived_camera_world_ty(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_ty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.derived_camera_world_ty_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_ty(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_ty_ = value;
}

// optional float derived_camera_world_tz = 15;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_tz_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return _internal_derived_camera_world_tz();
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  _internal_set_derived_camera_world_tz(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.derived_camera_world_tz_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tz(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.derived_camera_world_tz_ = value;
}

// optional uint32 pixel_image_width = 16;
inline bool SSL_GeometryCameraCalibration::has_pixel_image_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_pixel_image_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_image_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t SSL_GeometryCameraCalibration::pixel_image_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.pixel_image_width)
  return _internal_pixel_image_width();
}
inline void SSL_GeometryCameraCalibration::set_pixel_image_width(::uint32_t value) {
  _internal_set_pixel_image_width(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.pixel_image_width)
}
inline ::uint32_t SSL_GeometryCameraCalibration::_internal_pixel_image_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_image_width_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_pixel_image_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_image_width_ = value;
}

// optional uint32 pixel_image_height = 17;
inline bool SSL_GeometryCameraCalibration::has_pixel_image_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SSL_GeometryCameraCalibration::clear_pixel_image_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_image_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t SSL_GeometryCameraCalibration::pixel_image_height() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.pixel_image_height)
  return _internal_pixel_image_height();
}
inline void SSL_GeometryCameraCalibration::set_pixel_image_height(::uint32_t value) {
  _internal_set_pixel_image_height(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.pixel_image_height)
}
inline ::uint32_t SSL_GeometryCameraCalibration::_internal_pixel_image_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_image_height_;
}
inline void SSL_GeometryCameraCalibration::_internal_set_pixel_image_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_image_height_ = value;
}

// -------------------------------------------------------------------

// SSL_BallModelStraightTwoPhase

// required double acc_slide = 1;
inline bool SSL_BallModelStraightTwoPhase::has_acc_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_BallModelStraightTwoPhase::clear_acc_slide() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_slide_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SSL_BallModelStraightTwoPhase::acc_slide() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.acc_slide)
  return _internal_acc_slide();
}
inline void SSL_BallModelStraightTwoPhase::set_acc_slide(double value) {
  _internal_set_acc_slide(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.acc_slide)
}
inline double SSL_BallModelStraightTwoPhase::_internal_acc_slide() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_slide_;
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_acc_slide(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_slide_ = value;
}

// required double acc_roll = 2;
inline bool SSL_BallModelStraightTwoPhase::has_acc_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_BallModelStraightTwoPhase::clear_acc_roll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_roll_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SSL_BallModelStraightTwoPhase::acc_roll() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.acc_roll)
  return _internal_acc_roll();
}
inline void SSL_BallModelStraightTwoPhase::set_acc_roll(double value) {
  _internal_set_acc_roll(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.acc_roll)
}
inline double SSL_BallModelStraightTwoPhase::_internal_acc_roll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acc_roll_;
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_acc_roll(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acc_roll_ = value;
}

// required double k_switch = 3;
inline bool SSL_BallModelStraightTwoPhase::has_k_switch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_BallModelStraightTwoPhase::clear_k_switch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_switch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SSL_BallModelStraightTwoPhase::k_switch() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.k_switch)
  return _internal_k_switch();
}
inline void SSL_BallModelStraightTwoPhase::set_k_switch(double value) {
  _internal_set_k_switch(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.k_switch)
}
inline double SSL_BallModelStraightTwoPhase::_internal_k_switch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.k_switch_;
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_k_switch(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.k_switch_ = value;
}

// -------------------------------------------------------------------

// SSL_BallModelChipFixedLoss

// required double damping_xy_first_hop = 1;
inline bool SSL_BallModelChipFixedLoss::has_damping_xy_first_hop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_BallModelChipFixedLoss::clear_damping_xy_first_hop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_xy_first_hop_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SSL_BallModelChipFixedLoss::damping_xy_first_hop() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_xy_first_hop)
  return _internal_damping_xy_first_hop();
}
inline void SSL_BallModelChipFixedLoss::set_damping_xy_first_hop(double value) {
  _internal_set_damping_xy_first_hop(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_xy_first_hop)
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_xy_first_hop() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damping_xy_first_hop_;
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_xy_first_hop(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_xy_first_hop_ = value;
}

// required double damping_xy_other_hops = 2;
inline bool SSL_BallModelChipFixedLoss::has_damping_xy_other_hops() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_BallModelChipFixedLoss::clear_damping_xy_other_hops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_xy_other_hops_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SSL_BallModelChipFixedLoss::damping_xy_other_hops() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_xy_other_hops)
  return _internal_damping_xy_other_hops();
}
inline void SSL_BallModelChipFixedLoss::set_damping_xy_other_hops(double value) {
  _internal_set_damping_xy_other_hops(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_xy_other_hops)
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_xy_other_hops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damping_xy_other_hops_;
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_xy_other_hops(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_xy_other_hops_ = value;
}

// required double damping_z = 3;
inline bool SSL_BallModelChipFixedLoss::has_damping_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_BallModelChipFixedLoss::clear_damping_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SSL_BallModelChipFixedLoss::damping_z() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_z)
  return _internal_damping_z();
}
inline void SSL_BallModelChipFixedLoss::set_damping_z(double value) {
  _internal_set_damping_z(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_z)
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damping_z_;
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_z(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damping_z_ = value;
}

// -------------------------------------------------------------------

// SSL_GeometryModels

// optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
inline bool SSL_GeometryModels::has_straight_two_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.straight_two_phase_ != nullptr);
  return value;
}
inline void SSL_GeometryModels::clear_straight_two_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.straight_two_phase_ != nullptr) _impl_.straight_two_phase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_BallModelStraightTwoPhase& SSL_GeometryModels::_internal_straight_two_phase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::SSL_BallModelStraightTwoPhase* p = _impl_.straight_two_phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_BallModelStraightTwoPhase&>(::_SSL_BallModelStraightTwoPhase_default_instance_);
}
inline const ::SSL_BallModelStraightTwoPhase& SSL_GeometryModels::straight_two_phase() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryModels.straight_two_phase)
  return _internal_straight_two_phase();
}
inline void SSL_GeometryModels::unsafe_arena_set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.straight_two_phase_);
  }
  _impl_.straight_two_phase_ = reinterpret_cast<::SSL_BallModelStraightTwoPhase*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryModels.straight_two_phase)
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::release_straight_two_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_BallModelStraightTwoPhase* released = _impl_.straight_two_phase_;
  _impl_.straight_two_phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::unsafe_arena_release_straight_two_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_GeometryModels.straight_two_phase)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_BallModelStraightTwoPhase* temp = _impl_.straight_two_phase_;
  _impl_.straight_two_phase_ = nullptr;
  return temp;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::_internal_mutable_straight_two_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.straight_two_phase_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::SSL_BallModelStraightTwoPhase>(GetArena());
    _impl_.straight_two_phase_ = reinterpret_cast<::SSL_BallModelStraightTwoPhase*>(p);
  }
  return _impl_.straight_two_phase_;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::mutable_straight_two_phase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::SSL_BallModelStraightTwoPhase* _msg = _internal_mutable_straight_two_phase();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryModels.straight_two_phase)
  return _msg;
}
inline void SSL_GeometryModels::set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.straight_two_phase_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.straight_two_phase_ = reinterpret_cast<::SSL_BallModelStraightTwoPhase*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryModels.straight_two_phase)
}

// optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
inline bool SSL_GeometryModels::has_chip_fixed_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chip_fixed_loss_ != nullptr);
  return value;
}
inline void SSL_GeometryModels::clear_chip_fixed_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chip_fixed_loss_ != nullptr) _impl_.chip_fixed_loss_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_BallModelChipFixedLoss& SSL_GeometryModels::_internal_chip_fixed_loss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::SSL_BallModelChipFixedLoss* p = _impl_.chip_fixed_loss_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_BallModelChipFixedLoss&>(::_SSL_BallModelChipFixedLoss_default_instance_);
}
inline const ::SSL_BallModelChipFixedLoss& SSL_GeometryModels::chip_fixed_loss() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryModels.chip_fixed_loss)
  return _internal_chip_fixed_loss();
}
inline void SSL_GeometryModels::unsafe_arena_set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chip_fixed_loss_);
  }
  _impl_.chip_fixed_loss_ = reinterpret_cast<::SSL_BallModelChipFixedLoss*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryModels.chip_fixed_loss)
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::release_chip_fixed_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_BallModelChipFixedLoss* released = _impl_.chip_fixed_loss_;
  _impl_.chip_fixed_loss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::unsafe_arena_release_chip_fixed_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_GeometryModels.chip_fixed_loss)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_BallModelChipFixedLoss* temp = _impl_.chip_fixed_loss_;
  _impl_.chip_fixed_loss_ = nullptr;
  return temp;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::_internal_mutable_chip_fixed_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chip_fixed_loss_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::SSL_BallModelChipFixedLoss>(GetArena());
    _impl_.chip_fixed_loss_ = reinterpret_cast<::SSL_BallModelChipFixedLoss*>(p);
  }
  return _impl_.chip_fixed_loss_;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::mutable_chip_fixed_loss() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::SSL_BallModelChipFixedLoss* _msg = _internal_mutable_chip_fixed_loss();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryModels.chip_fixed_loss)
  return _msg;
}
inline void SSL_GeometryModels::set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chip_fixed_loss_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.chip_fixed_loss_ = reinterpret_cast<::SSL_BallModelChipFixedLoss*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryModels.chip_fixed_loss)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::has_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.field_ != nullptr);
  return value;
}
inline void SSL_GeometryData::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.field_ != nullptr) _impl_.field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::_internal_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::SSL_GeometryFieldSize* p = _impl_.field_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryFieldSize&>(::_SSL_GeometryFieldSize_default_instance_);
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return _internal_field();
}
inline void SSL_GeometryData::unsafe_arena_set_allocated_field(::SSL_GeometryFieldSize* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.field_);
  }
  _impl_.field_ = reinterpret_cast<::SSL_GeometryFieldSize*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryData.field)
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryFieldSize* released = _impl_.field_;
  _impl_.field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::unsafe_arena_release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryFieldSize* temp = _impl_.field_;
  _impl_.field_ = nullptr;
  return temp;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::_internal_mutable_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::SSL_GeometryFieldSize>(GetArena());
    _impl_.field_ = reinterpret_cast<::SSL_GeometryFieldSize*>(p);
  }
  return _impl_.field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::SSL_GeometryFieldSize* _msg = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return _msg;
}
inline void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.field_ = reinterpret_cast<::SSL_GeometryFieldSize*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::_internal_calib_size() const {
  return _internal_calib().size();
}
inline int SSL_GeometryData::calib_size() const {
  return _internal_calib_size();
}
inline void SSL_GeometryData::clear_calib() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.calib_.Clear();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return _internal_mutable_calib()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>* SSL_GeometryData::mutable_calib()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_calib();
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return _internal_calib().Get(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_GeometryCameraCalibration* _add = _internal_mutable_calib()->Add();
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>& SSL_GeometryData::calib() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return _internal_calib();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>&
SSL_GeometryData::_internal_calib() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.calib_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_GeometryCameraCalibration>*
SSL_GeometryData::_internal_mutable_calib() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.calib_;
}

// optional .SSL_GeometryModels models = 3;
inline bool SSL_GeometryData::has_models() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.models_ != nullptr);
  return value;
}
inline void SSL_GeometryData::clear_models() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.models_ != nullptr) _impl_.models_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_GeometryModels& SSL_GeometryData::_internal_models() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::SSL_GeometryModels* p = _impl_.models_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryModels&>(::_SSL_GeometryModels_default_instance_);
}
inline const ::SSL_GeometryModels& SSL_GeometryData::models() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.models)
  return _internal_models();
}
inline void SSL_GeometryData::unsafe_arena_set_allocated_models(::SSL_GeometryModels* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.models_);
  }
  _impl_.models_ = reinterpret_cast<::SSL_GeometryModels*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryData.models)
}
inline ::SSL_GeometryModels* SSL_GeometryData::release_models() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryModels* released = _impl_.models_;
  _impl_.models_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::SSL_GeometryModels* SSL_GeometryData::unsafe_arena_release_models() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SSL_GeometryData.models)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryModels* temp = _impl_.models_;
  _impl_.models_ = nullptr;
  return temp;
}
inline ::SSL_GeometryModels* SSL_GeometryData::_internal_mutable_models() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.models_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::SSL_GeometryModels>(GetArena());
    _impl_.models_ = reinterpret_cast<::SSL_GeometryModels*>(p);
  }
  return _impl_.models_;
}
inline ::SSL_GeometryModels* SSL_GeometryData::mutable_models() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::SSL_GeometryModels* _msg = _internal_mutable_models();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.models)
  return _msg;
}
inline void SSL_GeometryData::set_allocated_models(::SSL_GeometryModels* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.models_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.models_ = reinterpret_cast<::SSL_GeometryModels*>(value);
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.models)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::SSL_FieldShapeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::SSL_FieldShapeType>() {
  return ::SSL_FieldShapeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto_2epb_2eh
