// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_gc_referee_message.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ssl_gc_game_event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5freferee_5fmessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto;
class GameEventProposalGroup;
struct GameEventProposalGroupDefaultTypeInternal;
extern GameEventProposalGroupDefaultTypeInternal _GameEventProposalGroup_default_instance_;
class Referee;
struct RefereeDefaultTypeInternal;
extern RefereeDefaultTypeInternal _Referee_default_instance_;
class Referee_Point;
struct Referee_PointDefaultTypeInternal;
extern Referee_PointDefaultTypeInternal _Referee_Point_default_instance_;
class Referee_TeamInfo;
struct Referee_TeamInfoDefaultTypeInternal;
extern Referee_TeamInfoDefaultTypeInternal _Referee_TeamInfo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Referee_Stage : int {
  Referee_Stage_NORMAL_FIRST_HALF_PRE = 0,
  Referee_Stage_NORMAL_FIRST_HALF = 1,
  Referee_Stage_NORMAL_HALF_TIME = 2,
  Referee_Stage_NORMAL_SECOND_HALF_PRE = 3,
  Referee_Stage_NORMAL_SECOND_HALF = 4,
  Referee_Stage_EXTRA_TIME_BREAK = 5,
  Referee_Stage_EXTRA_FIRST_HALF_PRE = 6,
  Referee_Stage_EXTRA_FIRST_HALF = 7,
  Referee_Stage_EXTRA_HALF_TIME = 8,
  Referee_Stage_EXTRA_SECOND_HALF_PRE = 9,
  Referee_Stage_EXTRA_SECOND_HALF = 10,
  Referee_Stage_PENALTY_SHOOTOUT_BREAK = 11,
  Referee_Stage_PENALTY_SHOOTOUT = 12,
  Referee_Stage_POST_GAME = 13,
};

bool Referee_Stage_IsValid(int value);
extern const uint32_t Referee_Stage_internal_data_[];
constexpr Referee_Stage Referee_Stage_Stage_MIN = static_cast<Referee_Stage>(0);
constexpr Referee_Stage Referee_Stage_Stage_MAX = static_cast<Referee_Stage>(13);
constexpr int Referee_Stage_Stage_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
Referee_Stage_descriptor();
template <typename T>
const std::string& Referee_Stage_Name(T value) {
  static_assert(std::is_same<T, Referee_Stage>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Stage_Name().");
  return Referee_Stage_Name(static_cast<Referee_Stage>(value));
}
template <>
inline const std::string& Referee_Stage_Name(Referee_Stage value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Referee_Stage_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool Referee_Stage_Parse(absl::string_view name, Referee_Stage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Referee_Stage>(
      Referee_Stage_descriptor(), name, value);
}
enum Referee_Command : int {
  Referee_Command_HALT = 0,
  Referee_Command_STOP = 1,
  Referee_Command_NORMAL_START = 2,
  Referee_Command_FORCE_START = 3,
  Referee_Command_PREPARE_KICKOFF_YELLOW = 4,
  Referee_Command_PREPARE_KICKOFF_BLUE = 5,
  Referee_Command_PREPARE_PENALTY_YELLOW = 6,
  Referee_Command_PREPARE_PENALTY_BLUE = 7,
  Referee_Command_DIRECT_FREE_YELLOW = 8,
  Referee_Command_DIRECT_FREE_BLUE = 9,
  Referee_Command_INDIRECT_FREE_YELLOW [[deprecated]] = 10,
  Referee_Command_INDIRECT_FREE_BLUE [[deprecated]] = 11,
  Referee_Command_TIMEOUT_YELLOW = 12,
  Referee_Command_TIMEOUT_BLUE = 13,
  Referee_Command_GOAL_YELLOW [[deprecated]] = 14,
  Referee_Command_GOAL_BLUE [[deprecated]] = 15,
  Referee_Command_BALL_PLACEMENT_YELLOW = 16,
  Referee_Command_BALL_PLACEMENT_BLUE = 17,
};

bool Referee_Command_IsValid(int value);
extern const uint32_t Referee_Command_internal_data_[];
constexpr Referee_Command Referee_Command_Command_MIN = static_cast<Referee_Command>(0);
constexpr Referee_Command Referee_Command_Command_MAX = static_cast<Referee_Command>(17);
constexpr int Referee_Command_Command_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
Referee_Command_descriptor();
template <typename T>
const std::string& Referee_Command_Name(T value) {
  static_assert(std::is_same<T, Referee_Command>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Command_Name().");
  return Referee_Command_Name(static_cast<Referee_Command>(value));
}
template <>
inline const std::string& Referee_Command_Name(Referee_Command value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Referee_Command_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool Referee_Command_Parse(absl::string_view name, Referee_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Referee_Command>(
      Referee_Command_descriptor(), name, value);
}
enum MatchType : int {
  UNKNOWN_MATCH = 0,
  GROUP_PHASE = 1,
  ELIMINATION_PHASE = 2,
  FRIENDLY = 3,
};

bool MatchType_IsValid(int value);
extern const uint32_t MatchType_internal_data_[];
constexpr MatchType MatchType_MIN = static_cast<MatchType>(0);
constexpr MatchType MatchType_MAX = static_cast<MatchType>(3);
constexpr int MatchType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MatchType_descriptor();
template <typename T>
const std::string& MatchType_Name(T value) {
  static_assert(std::is_same<T, MatchType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MatchType_Name().");
  return MatchType_Name(static_cast<MatchType>(value));
}
template <>
inline const std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MatchType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MatchType_Parse(absl::string_view name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
      MatchType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Referee_TeamInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Referee.TeamInfo) */ {
 public:
  inline Referee_TeamInfo() : Referee_TeamInfo(nullptr) {}
  ~Referee_TeamInfo() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Referee_TeamInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline Referee_TeamInfo(const Referee_TeamInfo& from) : Referee_TeamInfo(nullptr, from) {}
  inline Referee_TeamInfo(Referee_TeamInfo&& from) noexcept
      : Referee_TeamInfo(nullptr, std::move(from)) {}
  inline Referee_TeamInfo& operator=(const Referee_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_TeamInfo& operator=(Referee_TeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee_TeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const Referee_TeamInfo*>(
        &_Referee_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Referee_TeamInfo& a, Referee_TeamInfo& b) { a.Swap(&b); }
  inline void Swap(Referee_TeamInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_TeamInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee_TeamInfo* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Referee_TeamInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Referee_TeamInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Referee_TeamInfo& from) { Referee_TeamInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Referee_TeamInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Referee.TeamInfo"; }

 protected:
  explicit Referee_TeamInfo(::google::protobuf::Arena* arena);
  Referee_TeamInfo(::google::protobuf::Arena* arena, const Referee_TeamInfo& from);
  Referee_TeamInfo(::google::protobuf::Arena* arena, Referee_TeamInfo&& from) noexcept
      : Referee_TeamInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kYellowCardTimesFieldNumber = 4,
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
    kRedCardsFieldNumber = 3,
    kYellowCardsFieldNumber = 5,
    kTimeoutsFieldNumber = 6,
    kTimeoutTimeFieldNumber = 7,
    kGoalkeeperFieldNumber = 8,
    kFoulCounterFieldNumber = 9,
    kBallPlacementFailuresFieldNumber = 10,
    kMaxAllowedBotsFieldNumber = 13,
    kCanPlaceBallFieldNumber = 12,
    kBotSubstitutionIntentFieldNumber = 14,
    kBallPlacementFailuresReachedFieldNumber = 15,
    kBotSubstitutionAllowedFieldNumber = 16,
    kBotSubstitutionsLeftFieldNumber = 17,
    kBotSubstitutionTimeLeftFieldNumber = 18,
  };
  // repeated uint32 yellow_card_times = 4 [packed = true];
  int yellow_card_times_size() const;
  private:
  int _internal_yellow_card_times_size() const;

  public:
  void clear_yellow_card_times() ;
  ::uint32_t yellow_card_times(int index) const;
  void set_yellow_card_times(int index, ::uint32_t value);
  void add_yellow_card_times(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& yellow_card_times() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_yellow_card_times();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_yellow_card_times() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_yellow_card_times();

  public:
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // required uint32 score = 2;
  bool has_score() const;
  void clear_score() ;
  ::uint32_t score() const;
  void set_score(::uint32_t value);

  private:
  ::uint32_t _internal_score() const;
  void _internal_set_score(::uint32_t value);

  public:
  // required uint32 red_cards = 3;
  bool has_red_cards() const;
  void clear_red_cards() ;
  ::uint32_t red_cards() const;
  void set_red_cards(::uint32_t value);

  private:
  ::uint32_t _internal_red_cards() const;
  void _internal_set_red_cards(::uint32_t value);

  public:
  // required uint32 yellow_cards = 5;
  bool has_yellow_cards() const;
  void clear_yellow_cards() ;
  ::uint32_t yellow_cards() const;
  void set_yellow_cards(::uint32_t value);

  private:
  ::uint32_t _internal_yellow_cards() const;
  void _internal_set_yellow_cards(::uint32_t value);

  public:
  // required uint32 timeouts = 6;
  bool has_timeouts() const;
  void clear_timeouts() ;
  ::uint32_t timeouts() const;
  void set_timeouts(::uint32_t value);

  private:
  ::uint32_t _internal_timeouts() const;
  void _internal_set_timeouts(::uint32_t value);

  public:
  // required uint32 timeout_time = 7;
  bool has_timeout_time() const;
  void clear_timeout_time() ;
  ::uint32_t timeout_time() const;
  void set_timeout_time(::uint32_t value);

  private:
  ::uint32_t _internal_timeout_time() const;
  void _internal_set_timeout_time(::uint32_t value);

  public:
  // required uint32 goalkeeper = 8;
  bool has_goalkeeper() const;
  void clear_goalkeeper() ;
  ::uint32_t goalkeeper() const;
  void set_goalkeeper(::uint32_t value);

  private:
  ::uint32_t _internal_goalkeeper() const;
  void _internal_set_goalkeeper(::uint32_t value);

  public:
  // optional uint32 foul_counter = 9;
  bool has_foul_counter() const;
  void clear_foul_counter() ;
  ::uint32_t foul_counter() const;
  void set_foul_counter(::uint32_t value);

  private:
  ::uint32_t _internal_foul_counter() const;
  void _internal_set_foul_counter(::uint32_t value);

  public:
  // optional uint32 ball_placement_failures = 10;
  bool has_ball_placement_failures() const;
  void clear_ball_placement_failures() ;
  ::uint32_t ball_placement_failures() const;
  void set_ball_placement_failures(::uint32_t value);

  private:
  ::uint32_t _internal_ball_placement_failures() const;
  void _internal_set_ball_placement_failures(::uint32_t value);

  public:
  // optional uint32 max_allowed_bots = 13;
  bool has_max_allowed_bots() const;
  void clear_max_allowed_bots() ;
  ::uint32_t max_allowed_bots() const;
  void set_max_allowed_bots(::uint32_t value);

  private:
  ::uint32_t _internal_max_allowed_bots() const;
  void _internal_set_max_allowed_bots(::uint32_t value);

  public:
  // optional bool can_place_ball = 12;
  bool has_can_place_ball() const;
  void clear_can_place_ball() ;
  bool can_place_ball() const;
  void set_can_place_ball(bool value);

  private:
  bool _internal_can_place_ball() const;
  void _internal_set_can_place_ball(bool value);

  public:
  // optional bool bot_substitution_intent = 14;
  bool has_bot_substitution_intent() const;
  void clear_bot_substitution_intent() ;
  bool bot_substitution_intent() const;
  void set_bot_substitution_intent(bool value);

  private:
  bool _internal_bot_substitution_intent() const;
  void _internal_set_bot_substitution_intent(bool value);

  public:
  // optional bool ball_placement_failures_reached = 15;
  bool has_ball_placement_failures_reached() const;
  void clear_ball_placement_failures_reached() ;
  bool ball_placement_failures_reached() const;
  void set_ball_placement_failures_reached(bool value);

  private:
  bool _internal_ball_placement_failures_reached() const;
  void _internal_set_ball_placement_failures_reached(bool value);

  public:
  // optional bool bot_substitution_allowed = 16;
  bool has_bot_substitution_allowed() const;
  void clear_bot_substitution_allowed() ;
  bool bot_substitution_allowed() const;
  void set_bot_substitution_allowed(bool value);

  private:
  bool _internal_bot_substitution_allowed() const;
  void _internal_set_bot_substitution_allowed(bool value);

  public:
  // optional uint32 bot_substitutions_left = 17;
  bool has_bot_substitutions_left() const;
  void clear_bot_substitutions_left() ;
  ::uint32_t bot_substitutions_left() const;
  void set_bot_substitutions_left(::uint32_t value);

  private:
  ::uint32_t _internal_bot_substitutions_left() const;
  void _internal_set_bot_substitutions_left(::uint32_t value);

  public:
  // optional uint32 bot_substitution_time_left = 18;
  bool has_bot_substitution_time_left() const;
  void clear_bot_substitution_time_left() ;
  ::uint32_t bot_substitution_time_left() const;
  void set_bot_substitution_time_left(::uint32_t value);

  private:
  ::uint32_t _internal_bot_substitution_time_left() const;
  void _internal_set_bot_substitution_time_left(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Referee.TeamInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Referee_TeamInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Referee_TeamInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> yellow_card_times_;
    ::google::protobuf::internal::CachedSize _yellow_card_times_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t score_;
    ::uint32_t red_cards_;
    ::uint32_t yellow_cards_;
    ::uint32_t timeouts_;
    ::uint32_t timeout_time_;
    ::uint32_t goalkeeper_;
    ::uint32_t foul_counter_;
    ::uint32_t ball_placement_failures_;
    ::uint32_t max_allowed_bots_;
    bool can_place_ball_;
    bool bot_substitution_intent_;
    bool ball_placement_failures_reached_;
    bool bot_substitution_allowed_;
    ::uint32_t bot_substitutions_left_;
    ::uint32_t bot_substitution_time_left_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Referee_Point final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Referee.Point) */ {
 public:
  inline Referee_Point() : Referee_Point(nullptr) {}
  ~Referee_Point() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Referee_Point(
      ::google::protobuf::internal::ConstantInitialized);

  inline Referee_Point(const Referee_Point& from) : Referee_Point(nullptr, from) {}
  inline Referee_Point(Referee_Point&& from) noexcept
      : Referee_Point(nullptr, std::move(from)) {}
  inline Referee_Point& operator=(const Referee_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_Point& operator=(Referee_Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee_Point* internal_default_instance() {
    return reinterpret_cast<const Referee_Point*>(
        &_Referee_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Referee_Point& a, Referee_Point& b) { a.Swap(&b); }
  inline void Swap(Referee_Point* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee_Point* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Referee_Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Referee_Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Referee_Point& from) { Referee_Point::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Referee_Point* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Referee.Point"; }

 protected:
  explicit Referee_Point(::google::protobuf::Arena* arena);
  Referee_Point(::google::protobuf::Arena* arena, const Referee_Point& from);
  Referee_Point(::google::protobuf::Arena* arena, Referee_Point&& from) noexcept
      : Referee_Point(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // required float y = 2;
  bool has_y() const;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:Referee.Point)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Referee_Point_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Referee_Point& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GameEventProposalGroup final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEventProposalGroup) */ {
 public:
  inline GameEventProposalGroup() : GameEventProposalGroup(nullptr) {}
  ~GameEventProposalGroup() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEventProposalGroup(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEventProposalGroup(const GameEventProposalGroup& from) : GameEventProposalGroup(nullptr, from) {}
  inline GameEventProposalGroup(GameEventProposalGroup&& from) noexcept
      : GameEventProposalGroup(nullptr, std::move(from)) {}
  inline GameEventProposalGroup& operator=(const GameEventProposalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEventProposalGroup& operator=(GameEventProposalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEventProposalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEventProposalGroup* internal_default_instance() {
    return reinterpret_cast<const GameEventProposalGroup*>(
        &_GameEventProposalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GameEventProposalGroup& a, GameEventProposalGroup& b) { a.Swap(&b); }
  inline void Swap(GameEventProposalGroup* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEventProposalGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEventProposalGroup* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEventProposalGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEventProposalGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEventProposalGroup& from) { GameEventProposalGroup::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEventProposalGroup* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEventProposalGroup"; }

 protected:
  explicit GameEventProposalGroup(::google::protobuf::Arena* arena);
  GameEventProposalGroup(::google::protobuf::Arena* arena, const GameEventProposalGroup& from);
  GameEventProposalGroup(::google::protobuf::Arena* arena, GameEventProposalGroup&& from) noexcept
      : GameEventProposalGroup(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameEventsFieldNumber = 1,
    kIdFieldNumber = 3,
    kAcceptedFieldNumber = 2,
  };
  // repeated .GameEvent game_events = 1;
  int game_events_size() const;
  private:
  int _internal_game_events_size() const;

  public:
  void clear_game_events() ;
  ::GameEvent* mutable_game_events(int index);
  ::google::protobuf::RepeatedPtrField<::GameEvent>* mutable_game_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& _internal_game_events() const;
  ::google::protobuf::RepeatedPtrField<::GameEvent>* _internal_mutable_game_events();
  public:
  const ::GameEvent& game_events(int index) const;
  ::GameEvent* add_game_events();
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& game_events() const;
  // optional string id = 3;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // optional bool accepted = 2;
  bool has_accepted() const;
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:GameEventProposalGroup)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      33, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEventProposalGroup_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEventProposalGroup& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::GameEvent > game_events_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    bool accepted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Referee final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Referee) */ {
 public:
  inline Referee() : Referee(nullptr) {}
  ~Referee() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Referee(
      ::google::protobuf::internal::ConstantInitialized);

  inline Referee(const Referee& from) : Referee(nullptr, from) {}
  inline Referee(Referee&& from) noexcept
      : Referee(nullptr, std::move(from)) {}
  inline Referee& operator=(const Referee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee& operator=(Referee&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee* internal_default_instance() {
    return reinterpret_cast<const Referee*>(
        &_Referee_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Referee& a, Referee& b) { a.Swap(&b); }
  inline void Swap(Referee* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Referee>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Referee& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Referee& from) { Referee::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Referee* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Referee"; }

 protected:
  explicit Referee(::google::protobuf::Arena* arena);
  Referee(::google::protobuf::Arena* arena, const Referee& from);
  Referee(::google::protobuf::Arena* arena, Referee&& from) noexcept
      : Referee(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TeamInfo = Referee_TeamInfo;
  using Point = Referee_Point;
  using Stage = Referee_Stage;
  static constexpr Stage NORMAL_FIRST_HALF_PRE = Referee_Stage_NORMAL_FIRST_HALF_PRE;
  static constexpr Stage NORMAL_FIRST_HALF = Referee_Stage_NORMAL_FIRST_HALF;
  static constexpr Stage NORMAL_HALF_TIME = Referee_Stage_NORMAL_HALF_TIME;
  static constexpr Stage NORMAL_SECOND_HALF_PRE = Referee_Stage_NORMAL_SECOND_HALF_PRE;
  static constexpr Stage NORMAL_SECOND_HALF = Referee_Stage_NORMAL_SECOND_HALF;
  static constexpr Stage EXTRA_TIME_BREAK = Referee_Stage_EXTRA_TIME_BREAK;
  static constexpr Stage EXTRA_FIRST_HALF_PRE = Referee_Stage_EXTRA_FIRST_HALF_PRE;
  static constexpr Stage EXTRA_FIRST_HALF = Referee_Stage_EXTRA_FIRST_HALF;
  static constexpr Stage EXTRA_HALF_TIME = Referee_Stage_EXTRA_HALF_TIME;
  static constexpr Stage EXTRA_SECOND_HALF_PRE = Referee_Stage_EXTRA_SECOND_HALF_PRE;
  static constexpr Stage EXTRA_SECOND_HALF = Referee_Stage_EXTRA_SECOND_HALF;
  static constexpr Stage PENALTY_SHOOTOUT_BREAK = Referee_Stage_PENALTY_SHOOTOUT_BREAK;
  static constexpr Stage PENALTY_SHOOTOUT = Referee_Stage_PENALTY_SHOOTOUT;
  static constexpr Stage POST_GAME = Referee_Stage_POST_GAME;
  static inline bool Stage_IsValid(int value) {
    return Referee_Stage_IsValid(value);
  }
  static constexpr Stage Stage_MIN = Referee_Stage_Stage_MIN;
  static constexpr Stage Stage_MAX = Referee_Stage_Stage_MAX;
  static constexpr int Stage_ARRAYSIZE = Referee_Stage_Stage_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Stage_descriptor() {
    return Referee_Stage_descriptor();
  }
  template <typename T>
  static inline const std::string& Stage_Name(T value) {
    return Referee_Stage_Name(value);
  }
  static inline bool Stage_Parse(absl::string_view name, Stage* value) {
    return Referee_Stage_Parse(name, value);
  }
  using Command = Referee_Command;
  static constexpr Command HALT = Referee_Command_HALT;
  static constexpr Command STOP = Referee_Command_STOP;
  static constexpr Command NORMAL_START = Referee_Command_NORMAL_START;
  static constexpr Command FORCE_START = Referee_Command_FORCE_START;
  static constexpr Command PREPARE_KICKOFF_YELLOW = Referee_Command_PREPARE_KICKOFF_YELLOW;
  static constexpr Command PREPARE_KICKOFF_BLUE = Referee_Command_PREPARE_KICKOFF_BLUE;
  static constexpr Command PREPARE_PENALTY_YELLOW = Referee_Command_PREPARE_PENALTY_YELLOW;
  static constexpr Command PREPARE_PENALTY_BLUE = Referee_Command_PREPARE_PENALTY_BLUE;
  static constexpr Command DIRECT_FREE_YELLOW = Referee_Command_DIRECT_FREE_YELLOW;
  static constexpr Command DIRECT_FREE_BLUE = Referee_Command_DIRECT_FREE_BLUE;
  [[deprecated]] static constexpr Command INDIRECT_FREE_YELLOW = Referee_Command_INDIRECT_FREE_YELLOW;
  [[deprecated]] static constexpr Command INDIRECT_FREE_BLUE = Referee_Command_INDIRECT_FREE_BLUE;
  static constexpr Command TIMEOUT_YELLOW = Referee_Command_TIMEOUT_YELLOW;
  static constexpr Command TIMEOUT_BLUE = Referee_Command_TIMEOUT_BLUE;
  [[deprecated]] static constexpr Command GOAL_YELLOW = Referee_Command_GOAL_YELLOW;
  [[deprecated]] static constexpr Command GOAL_BLUE = Referee_Command_GOAL_BLUE;
  static constexpr Command BALL_PLACEMENT_YELLOW = Referee_Command_BALL_PLACEMENT_YELLOW;
  static constexpr Command BALL_PLACEMENT_BLUE = Referee_Command_BALL_PLACEMENT_BLUE;
  static inline bool Command_IsValid(int value) {
    return Referee_Command_IsValid(value);
  }
  static constexpr Command Command_MIN = Referee_Command_Command_MIN;
  static constexpr Command Command_MAX = Referee_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE = Referee_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Command_descriptor() {
    return Referee_Command_descriptor();
  }
  template <typename T>
  static inline const std::string& Command_Name(T value) {
    return Referee_Command_Name(value);
  }
  static inline bool Command_Parse(absl::string_view name, Command* value) {
    return Referee_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kGameEventsFieldNumber = 16,
    kGameEventProposalsFieldNumber = 17,
    kSourceIdentifierFieldNumber = 18,
    kStatusMessageFieldNumber = 20,
    kYellowFieldNumber = 7,
    kBlueFieldNumber = 8,
    kDesignatedPositionFieldNumber = 9,
    kPacketTimestampFieldNumber = 1,
    kStageTimeLeftFieldNumber = 3,
    kStageFieldNumber = 2,
    kCommandFieldNumber = 4,
    kCommandTimestampFieldNumber = 6,
    kCommandCounterFieldNumber = 5,
    kBlueTeamOnPositiveHalfFieldNumber = 10,
    kCurrentActionTimeRemainingFieldNumber = 15,
    kNextCommandFieldNumber = 12,
    kMatchTypeFieldNumber = 19,
  };
  // repeated .GameEvent game_events = 16;
  int game_events_size() const;
  private:
  int _internal_game_events_size() const;

  public:
  void clear_game_events() ;
  ::GameEvent* mutable_game_events(int index);
  ::google::protobuf::RepeatedPtrField<::GameEvent>* mutable_game_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& _internal_game_events() const;
  ::google::protobuf::RepeatedPtrField<::GameEvent>* _internal_mutable_game_events();
  public:
  const ::GameEvent& game_events(int index) const;
  ::GameEvent* add_game_events();
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& game_events() const;
  // repeated .GameEventProposalGroup game_event_proposals = 17;
  int game_event_proposals_size() const;
  private:
  int _internal_game_event_proposals_size() const;

  public:
  void clear_game_event_proposals() ;
  ::GameEventProposalGroup* mutable_game_event_proposals(int index);
  ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>* mutable_game_event_proposals();

  private:
  const ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>& _internal_game_event_proposals() const;
  ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>* _internal_mutable_game_event_proposals();
  public:
  const ::GameEventProposalGroup& game_event_proposals(int index) const;
  ::GameEventProposalGroup* add_game_event_proposals();
  const ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>& game_event_proposals() const;
  // optional string source_identifier = 18;
  bool has_source_identifier() const;
  void clear_source_identifier() ;
  const std::string& source_identifier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_source_identifier();
  PROTOBUF_NODISCARD std::string* release_source_identifier();
  void set_allocated_source_identifier(std::string* value);

  private:
  const std::string& _internal_source_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_identifier(
      const std::string& value);
  std::string* _internal_mutable_source_identifier();

  public:
  // optional string status_message = 20;
  bool has_status_message() const;
  void clear_status_message() ;
  const std::string& status_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_message(Arg_&& arg, Args_... args);
  std::string* mutable_status_message();
  PROTOBUF_NODISCARD std::string* release_status_message();
  void set_allocated_status_message(std::string* value);

  private:
  const std::string& _internal_status_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_message(
      const std::string& value);
  std::string* _internal_mutable_status_message();

  public:
  // required .Referee.TeamInfo yellow = 7;
  bool has_yellow() const;
  void clear_yellow() ;
  const ::Referee_TeamInfo& yellow() const;
  PROTOBUF_NODISCARD ::Referee_TeamInfo* release_yellow();
  ::Referee_TeamInfo* mutable_yellow();
  void set_allocated_yellow(::Referee_TeamInfo* value);
  void unsafe_arena_set_allocated_yellow(::Referee_TeamInfo* value);
  ::Referee_TeamInfo* unsafe_arena_release_yellow();

  private:
  const ::Referee_TeamInfo& _internal_yellow() const;
  ::Referee_TeamInfo* _internal_mutable_yellow();

  public:
  // required .Referee.TeamInfo blue = 8;
  bool has_blue() const;
  void clear_blue() ;
  const ::Referee_TeamInfo& blue() const;
  PROTOBUF_NODISCARD ::Referee_TeamInfo* release_blue();
  ::Referee_TeamInfo* mutable_blue();
  void set_allocated_blue(::Referee_TeamInfo* value);
  void unsafe_arena_set_allocated_blue(::Referee_TeamInfo* value);
  ::Referee_TeamInfo* unsafe_arena_release_blue();

  private:
  const ::Referee_TeamInfo& _internal_blue() const;
  ::Referee_TeamInfo* _internal_mutable_blue();

  public:
  // optional .Referee.Point designated_position = 9;
  bool has_designated_position() const;
  void clear_designated_position() ;
  const ::Referee_Point& designated_position() const;
  PROTOBUF_NODISCARD ::Referee_Point* release_designated_position();
  ::Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::Referee_Point* value);
  void unsafe_arena_set_allocated_designated_position(::Referee_Point* value);
  ::Referee_Point* unsafe_arena_release_designated_position();

  private:
  const ::Referee_Point& _internal_designated_position() const;
  ::Referee_Point* _internal_mutable_designated_position();

  public:
  // required uint64 packet_timestamp = 1;
  bool has_packet_timestamp() const;
  void clear_packet_timestamp() ;
  ::uint64_t packet_timestamp() const;
  void set_packet_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_packet_timestamp() const;
  void _internal_set_packet_timestamp(::uint64_t value);

  public:
  // optional sint64 stage_time_left = 3;
  bool has_stage_time_left() const;
  void clear_stage_time_left() ;
  ::int64_t stage_time_left() const;
  void set_stage_time_left(::int64_t value);

  private:
  ::int64_t _internal_stage_time_left() const;
  void _internal_set_stage_time_left(::int64_t value);

  public:
  // required .Referee.Stage stage = 2;
  bool has_stage() const;
  void clear_stage() ;
  ::Referee_Stage stage() const;
  void set_stage(::Referee_Stage value);

  private:
  ::Referee_Stage _internal_stage() const;
  void _internal_set_stage(::Referee_Stage value);

  public:
  // required .Referee.Command command = 4;
  bool has_command() const;
  void clear_command() ;
  ::Referee_Command command() const;
  void set_command(::Referee_Command value);

  private:
  ::Referee_Command _internal_command() const;
  void _internal_set_command(::Referee_Command value);

  public:
  // required uint64 command_timestamp = 6;
  bool has_command_timestamp() const;
  void clear_command_timestamp() ;
  ::uint64_t command_timestamp() const;
  void set_command_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_command_timestamp() const;
  void _internal_set_command_timestamp(::uint64_t value);

  public:
  // required uint32 command_counter = 5;
  bool has_command_counter() const;
  void clear_command_counter() ;
  ::uint32_t command_counter() const;
  void set_command_counter(::uint32_t value);

  private:
  ::uint32_t _internal_command_counter() const;
  void _internal_set_command_counter(::uint32_t value);

  public:
  // optional bool blue_team_on_positive_half = 10;
  bool has_blue_team_on_positive_half() const;
  void clear_blue_team_on_positive_half() ;
  bool blue_team_on_positive_half() const;
  void set_blue_team_on_positive_half(bool value);

  private:
  bool _internal_blue_team_on_positive_half() const;
  void _internal_set_blue_team_on_positive_half(bool value);

  public:
  // optional int64 current_action_time_remaining = 15;
  bool has_current_action_time_remaining() const;
  void clear_current_action_time_remaining() ;
  ::int64_t current_action_time_remaining() const;
  void set_current_action_time_remaining(::int64_t value);

  private:
  ::int64_t _internal_current_action_time_remaining() const;
  void _internal_set_current_action_time_remaining(::int64_t value);

  public:
  // optional .Referee.Command next_command = 12;
  bool has_next_command() const;
  void clear_next_command() ;
  ::Referee_Command next_command() const;
  void set_next_command(::Referee_Command value);

  private:
  ::Referee_Command _internal_next_command() const;
  void _internal_set_next_command(::Referee_Command value);

  public:
  // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
  bool has_match_type() const;
  void clear_match_type() ;
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);

  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);

  public:
  // @@protoc_insertion_point(class_scope:Referee)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 9,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Referee_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Referee& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::GameEvent > game_events_;
    ::google::protobuf::RepeatedPtrField< ::GameEventProposalGroup > game_event_proposals_;
    ::google::protobuf::internal::ArenaStringPtr source_identifier_;
    ::google::protobuf::internal::ArenaStringPtr status_message_;
    ::Referee_TeamInfo* yellow_;
    ::Referee_TeamInfo* blue_;
    ::Referee_Point* designated_position_;
    ::uint64_t packet_timestamp_;
    ::int64_t stage_time_left_;
    int stage_;
    int command_;
    ::uint64_t command_timestamp_;
    ::uint32_t command_counter_;
    bool blue_team_on_positive_half_;
    ::int64_t current_action_time_remaining_;
    int next_command_;
    int match_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Referee_TeamInfo

// required string name = 1;
inline bool Referee_TeamInfo::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Referee_TeamInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Referee_TeamInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.name)
}
inline std::string* Referee_TeamInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Referee.TeamInfo.name)
  return _s;
}
inline const std::string& Referee_TeamInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Referee_TeamInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Referee_TeamInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Referee_TeamInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.TeamInfo.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Referee_TeamInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Referee.TeamInfo.name)
}

// required uint32 score = 2;
inline bool Referee_TeamInfo::has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Referee_TeamInfo::score() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.score)
  return _internal_score();
}
inline void Referee_TeamInfo::set_score(::uint32_t value) {
  _internal_set_score(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.score)
}
inline ::uint32_t Referee_TeamInfo::_internal_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_;
}
inline void Referee_TeamInfo::_internal_set_score(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_ = value;
}

// required uint32 red_cards = 3;
inline bool Referee_TeamInfo::has_red_cards() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_red_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.red_cards_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Referee_TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.red_cards)
  return _internal_red_cards();
}
inline void Referee_TeamInfo::set_red_cards(::uint32_t value) {
  _internal_set_red_cards(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.red_cards)
}
inline ::uint32_t Referee_TeamInfo::_internal_red_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.red_cards_;
}
inline void Referee_TeamInfo::_internal_set_red_cards(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.red_cards_ = value;
}

// repeated uint32 yellow_card_times = 4 [packed = true];
inline int Referee_TeamInfo::_internal_yellow_card_times_size() const {
  return _internal_yellow_card_times().size();
}
inline int Referee_TeamInfo::yellow_card_times_size() const {
  return _internal_yellow_card_times_size();
}
inline void Referee_TeamInfo::clear_yellow_card_times() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yellow_card_times_.Clear();
}
inline ::uint32_t Referee_TeamInfo::yellow_card_times(int index) const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times().Get(index);
}
inline void Referee_TeamInfo::set_yellow_card_times(int index, ::uint32_t value) {
  _internal_mutable_yellow_card_times()->Set(index, value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_card_times)
}
inline void Referee_TeamInfo::add_yellow_card_times(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_yellow_card_times()->Add(value);
  // @@protoc_insertion_point(field_add:Referee.TeamInfo.yellow_card_times)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Referee_TeamInfo::yellow_card_times() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Referee_TeamInfo::mutable_yellow_card_times()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Referee.TeamInfo.yellow_card_times)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_yellow_card_times();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
Referee_TeamInfo::_internal_yellow_card_times() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yellow_card_times_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Referee_TeamInfo::_internal_mutable_yellow_card_times() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.yellow_card_times_;
}

// required uint32 yellow_cards = 5;
inline bool Referee_TeamInfo::has_yellow_cards() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_yellow_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yellow_cards_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Referee_TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_cards)
  return _internal_yellow_cards();
}
inline void Referee_TeamInfo::set_yellow_cards(::uint32_t value) {
  _internal_set_yellow_cards(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_cards)
}
inline ::uint32_t Referee_TeamInfo::_internal_yellow_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yellow_cards_;
}
inline void Referee_TeamInfo::_internal_set_yellow_cards(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yellow_cards_ = value;
}

// required uint32 timeouts = 6;
inline bool Referee_TeamInfo::has_timeouts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_timeouts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeouts_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Referee_TeamInfo::timeouts() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeouts)
  return _internal_timeouts();
}
inline void Referee_TeamInfo::set_timeouts(::uint32_t value) {
  _internal_set_timeouts(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeouts)
}
inline ::uint32_t Referee_TeamInfo::_internal_timeouts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeouts_;
}
inline void Referee_TeamInfo::_internal_set_timeouts(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeouts_ = value;
}

// required uint32 timeout_time = 7;
inline bool Referee_TeamInfo::has_timeout_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_timeout_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Referee_TeamInfo::timeout_time() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeout_time)
  return _internal_timeout_time();
}
inline void Referee_TeamInfo::set_timeout_time(::uint32_t value) {
  _internal_set_timeout_time(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeout_time)
}
inline ::uint32_t Referee_TeamInfo::_internal_timeout_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeout_time_;
}
inline void Referee_TeamInfo::_internal_set_timeout_time(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeout_time_ = value;
}

// required uint32 goalkeeper = 8;
inline bool Referee_TeamInfo::has_goalkeeper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_goalkeeper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goalkeeper_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Referee_TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.goalkeeper)
  return _internal_goalkeeper();
}
inline void Referee_TeamInfo::set_goalkeeper(::uint32_t value) {
  _internal_set_goalkeeper(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.goalkeeper)
}
inline ::uint32_t Referee_TeamInfo::_internal_goalkeeper() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.goalkeeper_;
}
inline void Referee_TeamInfo::_internal_set_goalkeeper(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.goalkeeper_ = value;
}

// optional uint32 foul_counter = 9;
inline bool Referee_TeamInfo::has_foul_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_foul_counter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foul_counter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Referee_TeamInfo::foul_counter() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.foul_counter)
  return _internal_foul_counter();
}
inline void Referee_TeamInfo::set_foul_counter(::uint32_t value) {
  _internal_set_foul_counter(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.foul_counter)
}
inline ::uint32_t Referee_TeamInfo::_internal_foul_counter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.foul_counter_;
}
inline void Referee_TeamInfo::_internal_set_foul_counter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.foul_counter_ = value;
}

// optional uint32 ball_placement_failures = 10;
inline bool Referee_TeamInfo::has_ball_placement_failures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_ball_placement_failures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ball_placement_failures_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Referee_TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures)
  return _internal_ball_placement_failures();
}
inline void Referee_TeamInfo::set_ball_placement_failures(::uint32_t value) {
  _internal_set_ball_placement_failures(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures)
}
inline ::uint32_t Referee_TeamInfo::_internal_ball_placement_failures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ball_placement_failures_;
}
inline void Referee_TeamInfo::_internal_set_ball_placement_failures(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ball_placement_failures_ = value;
}

// optional bool can_place_ball = 12;
inline bool Referee_TeamInfo::has_can_place_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_can_place_ball() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_place_ball_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Referee_TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.can_place_ball)
  return _internal_can_place_ball();
}
inline void Referee_TeamInfo::set_can_place_ball(bool value) {
  _internal_set_can_place_ball(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.can_place_ball)
}
inline bool Referee_TeamInfo::_internal_can_place_ball() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_place_ball_;
}
inline void Referee_TeamInfo::_internal_set_can_place_ball(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_place_ball_ = value;
}

// optional uint32 max_allowed_bots = 13;
inline bool Referee_TeamInfo::has_max_allowed_bots() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_max_allowed_bots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_allowed_bots_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t Referee_TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.max_allowed_bots)
  return _internal_max_allowed_bots();
}
inline void Referee_TeamInfo::set_max_allowed_bots(::uint32_t value) {
  _internal_set_max_allowed_bots(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.max_allowed_bots)
}
inline ::uint32_t Referee_TeamInfo::_internal_max_allowed_bots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_allowed_bots_;
}
inline void Referee_TeamInfo::_internal_set_max_allowed_bots(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_allowed_bots_ = value;
}

// optional bool bot_substitution_intent = 14;
inline bool Referee_TeamInfo::has_bot_substitution_intent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_bot_substitution_intent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_intent_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Referee_TeamInfo::bot_substitution_intent() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitution_intent)
  return _internal_bot_substitution_intent();
}
inline void Referee_TeamInfo::set_bot_substitution_intent(bool value) {
  _internal_set_bot_substitution_intent(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitution_intent)
}
inline bool Referee_TeamInfo::_internal_bot_substitution_intent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_substitution_intent_;
}
inline void Referee_TeamInfo::_internal_set_bot_substitution_intent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_intent_ = value;
}

// optional bool ball_placement_failures_reached = 15;
inline bool Referee_TeamInfo::has_ball_placement_failures_reached() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_ball_placement_failures_reached() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ball_placement_failures_reached_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Referee_TeamInfo::ball_placement_failures_reached() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures_reached)
  return _internal_ball_placement_failures_reached();
}
inline void Referee_TeamInfo::set_ball_placement_failures_reached(bool value) {
  _internal_set_ball_placement_failures_reached(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures_reached)
}
inline bool Referee_TeamInfo::_internal_ball_placement_failures_reached() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ball_placement_failures_reached_;
}
inline void Referee_TeamInfo::_internal_set_ball_placement_failures_reached(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ball_placement_failures_reached_ = value;
}

// optional bool bot_substitution_allowed = 16;
inline bool Referee_TeamInfo::has_bot_substitution_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_bot_substitution_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_allowed_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Referee_TeamInfo::bot_substitution_allowed() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitution_allowed)
  return _internal_bot_substitution_allowed();
}
inline void Referee_TeamInfo::set_bot_substitution_allowed(bool value) {
  _internal_set_bot_substitution_allowed(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitution_allowed)
}
inline bool Referee_TeamInfo::_internal_bot_substitution_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_substitution_allowed_;
}
inline void Referee_TeamInfo::_internal_set_bot_substitution_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_allowed_ = value;
}

// optional uint32 bot_substitutions_left = 17;
inline bool Referee_TeamInfo::has_bot_substitutions_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_bot_substitutions_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitutions_left_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t Referee_TeamInfo::bot_substitutions_left() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitutions_left)
  return _internal_bot_substitutions_left();
}
inline void Referee_TeamInfo::set_bot_substitutions_left(::uint32_t value) {
  _internal_set_bot_substitutions_left(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitutions_left)
}
inline ::uint32_t Referee_TeamInfo::_internal_bot_substitutions_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_substitutions_left_;
}
inline void Referee_TeamInfo::_internal_set_bot_substitutions_left(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitutions_left_ = value;
}

// optional uint32 bot_substitution_time_left = 18;
inline bool Referee_TeamInfo::has_bot_substitution_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Referee_TeamInfo::clear_bot_substitution_time_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_time_left_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t Referee_TeamInfo::bot_substitution_time_left() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitution_time_left)
  return _internal_bot_substitution_time_left();
}
inline void Referee_TeamInfo::set_bot_substitution_time_left(::uint32_t value) {
  _internal_set_bot_substitution_time_left(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitution_time_left)
}
inline ::uint32_t Referee_TeamInfo::_internal_bot_substitution_time_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_substitution_time_left_;
}
inline void Referee_TeamInfo::_internal_set_bot_substitution_time_left(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_substitution_time_left_ = value;
}

// -------------------------------------------------------------------

// Referee_Point

// required float x = 1;
inline bool Referee_Point::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Referee_Point::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Referee_Point::x() const {
  // @@protoc_insertion_point(field_get:Referee.Point.x)
  return _internal_x();
}
inline void Referee_Point::set_x(float value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:Referee.Point.x)
}
inline float Referee_Point::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Referee_Point::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// required float y = 2;
inline bool Referee_Point::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Referee_Point::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Referee_Point::y() const {
  // @@protoc_insertion_point(field_get:Referee.Point.y)
  return _internal_y();
}
inline void Referee_Point::set_y(float value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:Referee.Point.y)
}
inline float Referee_Point::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Referee_Point::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Referee

// optional string source_identifier = 18;
inline bool Referee::has_source_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Referee::clear_source_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Referee::source_identifier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.source_identifier)
  return _internal_source_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Referee::set_source_identifier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Referee.source_identifier)
}
inline std::string* Referee::mutable_source_identifier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_identifier();
  // @@protoc_insertion_point(field_mutable:Referee.source_identifier)
  return _s;
}
inline const std::string& Referee::_internal_source_identifier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_identifier_.Get();
}
inline void Referee::_internal_set_source_identifier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_identifier_.Set(value, GetArena());
}
inline std::string* Referee::_internal_mutable_source_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_identifier_.Mutable( GetArena());
}
inline std::string* Referee::release_source_identifier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.source_identifier)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_identifier_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_identifier_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Referee::set_allocated_source_identifier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_identifier_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_identifier_.IsDefault()) {
          _impl_.source_identifier_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Referee.source_identifier)
}

// optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
inline bool Referee::has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Referee::clear_match_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::MatchType Referee::match_type() const {
  // @@protoc_insertion_point(field_get:Referee.match_type)
  return _internal_match_type();
}
inline void Referee::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:Referee.match_type)
}
inline ::MatchType Referee::_internal_match_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MatchType>(_impl_.match_type_);
}
inline void Referee::_internal_set_match_type(::MatchType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::MatchType_IsValid(value));
  _impl_.match_type_ = value;
}

// required uint64 packet_timestamp = 1;
inline bool Referee::has_packet_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Referee::clear_packet_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Referee::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.packet_timestamp)
  return _internal_packet_timestamp();
}
inline void Referee::set_packet_timestamp(::uint64_t value) {
  _internal_set_packet_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:Referee.packet_timestamp)
}
inline ::uint64_t Referee::_internal_packet_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_timestamp_;
}
inline void Referee::_internal_set_packet_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_timestamp_ = value;
}

// required .Referee.Stage stage = 2;
inline bool Referee::has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Referee::clear_stage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::Referee_Stage Referee::stage() const {
  // @@protoc_insertion_point(field_get:Referee.stage)
  return _internal_stage();
}
inline void Referee::set_stage(::Referee_Stage value) {
  _internal_set_stage(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:Referee.stage)
}
inline ::Referee_Stage Referee::_internal_stage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Referee_Stage>(_impl_.stage_);
}
inline void Referee::_internal_set_stage(::Referee_Stage value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Referee_Stage_IsValid(value));
  _impl_.stage_ = value;
}

// optional sint64 stage_time_left = 3;
inline bool Referee::has_stage_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Referee::clear_stage_time_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_time_left_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Referee::stage_time_left() const {
  // @@protoc_insertion_point(field_get:Referee.stage_time_left)
  return _internal_stage_time_left();
}
inline void Referee::set_stage_time_left(::int64_t value) {
  _internal_set_stage_time_left(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:Referee.stage_time_left)
}
inline ::int64_t Referee::_internal_stage_time_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stage_time_left_;
}
inline void Referee::_internal_set_stage_time_left(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stage_time_left_ = value;
}

// required .Referee.Command command = 4;
inline bool Referee::has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Referee::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::Referee_Command Referee::command() const {
  // @@protoc_insertion_point(field_get:Referee.command)
  return _internal_command();
}
inline void Referee::set_command(::Referee_Command value) {
  _internal_set_command(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:Referee.command)
}
inline ::Referee_Command Referee::_internal_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Referee_Command>(_impl_.command_);
}
inline void Referee::_internal_set_command(::Referee_Command value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Referee_Command_IsValid(value));
  _impl_.command_ = value;
}

// required uint32 command_counter = 5;
inline bool Referee::has_command_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Referee::clear_command_counter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_counter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t Referee::command_counter() const {
  // @@protoc_insertion_point(field_get:Referee.command_counter)
  return _internal_command_counter();
}
inline void Referee::set_command_counter(::uint32_t value) {
  _internal_set_command_counter(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:Referee.command_counter)
}
inline ::uint32_t Referee::_internal_command_counter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_counter_;
}
inline void Referee::_internal_set_command_counter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_counter_ = value;
}

// required uint64 command_timestamp = 6;
inline bool Referee::has_command_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Referee::clear_command_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint64_t Referee::command_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.command_timestamp)
  return _internal_command_timestamp();
}
inline void Referee::set_command_timestamp(::uint64_t value) {
  _internal_set_command_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:Referee.command_timestamp)
}
inline ::uint64_t Referee::_internal_command_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.command_timestamp_;
}
inline void Referee::_internal_set_command_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.command_timestamp_ = value;
}

// required .Referee.TeamInfo yellow = 7;
inline bool Referee::has_yellow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yellow_ != nullptr);
  return value;
}
inline void Referee::clear_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.yellow_ != nullptr) _impl_.yellow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Referee_TeamInfo& Referee::_internal_yellow() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Referee_TeamInfo* p = _impl_.yellow_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_TeamInfo&>(::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::yellow() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.yellow)
  return _internal_yellow();
}
inline void Referee::unsafe_arena_set_allocated_yellow(::Referee_TeamInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yellow_);
  }
  _impl_.yellow_ = reinterpret_cast<::Referee_TeamInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.yellow)
}
inline ::Referee_TeamInfo* Referee::release_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Referee_TeamInfo* released = _impl_.yellow_;
  _impl_.yellow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.yellow)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Referee_TeamInfo* temp = _impl_.yellow_;
  _impl_.yellow_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.yellow_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Referee_TeamInfo>(GetArena());
    _impl_.yellow_ = reinterpret_cast<::Referee_TeamInfo*>(p);
  }
  return _impl_.yellow_;
}
inline ::Referee_TeamInfo* Referee::mutable_yellow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::Referee_TeamInfo* _msg = _internal_mutable_yellow();
  // @@protoc_insertion_point(field_mutable:Referee.yellow)
  return _msg;
}
inline void Referee::set_allocated_yellow(::Referee_TeamInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.yellow_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.yellow_ = reinterpret_cast<::Referee_TeamInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:Referee.yellow)
}

// required .Referee.TeamInfo blue = 8;
inline bool Referee::has_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blue_ != nullptr);
  return value;
}
inline void Referee::clear_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blue_ != nullptr) _impl_.blue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::Referee_TeamInfo& Referee::_internal_blue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Referee_TeamInfo* p = _impl_.blue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_TeamInfo&>(::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::blue() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.blue)
  return _internal_blue();
}
inline void Referee::unsafe_arena_set_allocated_blue(::Referee_TeamInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blue_);
  }
  _impl_.blue_ = reinterpret_cast<::Referee_TeamInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.blue)
}
inline ::Referee_TeamInfo* Referee::release_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Referee_TeamInfo* released = _impl_.blue_;
  _impl_.blue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.blue)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Referee_TeamInfo* temp = _impl_.blue_;
  _impl_.blue_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.blue_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Referee_TeamInfo>(GetArena());
    _impl_.blue_ = reinterpret_cast<::Referee_TeamInfo*>(p);
  }
  return _impl_.blue_;
}
inline ::Referee_TeamInfo* Referee::mutable_blue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::Referee_TeamInfo* _msg = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:Referee.blue)
  return _msg;
}
inline void Referee::set_allocated_blue(::Referee_TeamInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.blue_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.blue_ = reinterpret_cast<::Referee_TeamInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:Referee.blue)
}

// optional .Referee.Point designated_position = 9;
inline bool Referee::has_designated_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.designated_position_ != nullptr);
  return value;
}
inline void Referee::clear_designated_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.designated_position_ != nullptr) _impl_.designated_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::Referee_Point& Referee::_internal_designated_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Referee_Point* p = _impl_.designated_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_Point&>(::_Referee_Point_default_instance_);
}
inline const ::Referee_Point& Referee::designated_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.designated_position)
  return _internal_designated_position();
}
inline void Referee::unsafe_arena_set_allocated_designated_position(::Referee_Point* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.designated_position_);
  }
  _impl_.designated_position_ = reinterpret_cast<::Referee_Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.designated_position)
}
inline ::Referee_Point* Referee::release_designated_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Referee_Point* released = _impl_.designated_position_;
  _impl_.designated_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Referee_Point* Referee::unsafe_arena_release_designated_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.designated_position)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Referee_Point* temp = _impl_.designated_position_;
  _impl_.designated_position_ = nullptr;
  return temp;
}
inline ::Referee_Point* Referee::_internal_mutable_designated_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.designated_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Referee_Point>(GetArena());
    _impl_.designated_position_ = reinterpret_cast<::Referee_Point*>(p);
  }
  return _impl_.designated_position_;
}
inline ::Referee_Point* Referee::mutable_designated_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::Referee_Point* _msg = _internal_mutable_designated_position();
  // @@protoc_insertion_point(field_mutable:Referee.designated_position)
  return _msg;
}
inline void Referee::set_allocated_designated_position(::Referee_Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.designated_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.designated_position_ = reinterpret_cast<::Referee_Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:Referee.designated_position)
}

// optional bool blue_team_on_positive_half = 10;
inline bool Referee::has_blue_team_on_positive_half() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Referee::clear_blue_team_on_positive_half() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blue_team_on_positive_half_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Referee::blue_team_on_positive_half() const {
  // @@protoc_insertion_point(field_get:Referee.blue_team_on_positive_half)
  return _internal_blue_team_on_positive_half();
}
inline void Referee::set_blue_team_on_positive_half(bool value) {
  _internal_set_blue_team_on_positive_half(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:Referee.blue_team_on_positive_half)
}
inline bool Referee::_internal_blue_team_on_positive_half() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blue_team_on_positive_half_;
}
inline void Referee::_internal_set_blue_team_on_positive_half(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blue_team_on_positive_half_ = value;
}

// optional .Referee.Command next_command = 12;
inline bool Referee::has_next_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Referee::clear_next_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_command_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::Referee_Command Referee::next_command() const {
  // @@protoc_insertion_point(field_get:Referee.next_command)
  return _internal_next_command();
}
inline void Referee::set_next_command(::Referee_Command value) {
  _internal_set_next_command(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:Referee.next_command)
}
inline ::Referee_Command Referee::_internal_next_command() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Referee_Command>(_impl_.next_command_);
}
inline void Referee::_internal_set_next_command(::Referee_Command value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Referee_Command_IsValid(value));
  _impl_.next_command_ = value;
}

// repeated .GameEvent game_events = 16;
inline int Referee::_internal_game_events_size() const {
  return _internal_game_events().size();
}
inline int Referee::game_events_size() const {
  return _internal_game_events_size();
}
inline ::GameEvent* Referee::mutable_game_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Referee.game_events)
  return _internal_mutable_game_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>* Referee::mutable_game_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_game_events();
}
inline const ::GameEvent& Referee::game_events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.game_events)
  return _internal_game_events().Get(index);
}
inline ::GameEvent* Referee::add_game_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::GameEvent* _add = _internal_mutable_game_events()->Add();
  // @@protoc_insertion_point(field_add:Referee.game_events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>& Referee::game_events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Referee.game_events)
  return _internal_game_events();
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>&
Referee::_internal_game_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_events_;
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>*
Referee::_internal_mutable_game_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.game_events_;
}

// repeated .GameEventProposalGroup game_event_proposals = 17;
inline int Referee::_internal_game_event_proposals_size() const {
  return _internal_game_event_proposals().size();
}
inline int Referee::game_event_proposals_size() const {
  return _internal_game_event_proposals_size();
}
inline void Referee::clear_game_event_proposals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_event_proposals_.Clear();
}
inline ::GameEventProposalGroup* Referee::mutable_game_event_proposals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Referee.game_event_proposals)
  return _internal_mutable_game_event_proposals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>* Referee::mutable_game_event_proposals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_event_proposals)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_game_event_proposals();
}
inline const ::GameEventProposalGroup& Referee::game_event_proposals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.game_event_proposals)
  return _internal_game_event_proposals().Get(index);
}
inline ::GameEventProposalGroup* Referee::add_game_event_proposals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::GameEventProposalGroup* _add = _internal_mutable_game_event_proposals()->Add();
  // @@protoc_insertion_point(field_add:Referee.game_event_proposals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>& Referee::game_event_proposals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Referee.game_event_proposals)
  return _internal_game_event_proposals();
}
inline const ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>&
Referee::_internal_game_event_proposals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_event_proposals_;
}
inline ::google::protobuf::RepeatedPtrField<::GameEventProposalGroup>*
Referee::_internal_mutable_game_event_proposals() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.game_event_proposals_;
}

// optional int64 current_action_time_remaining = 15;
inline bool Referee::has_current_action_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Referee::clear_current_action_time_remaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_action_time_remaining_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Referee::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:Referee.current_action_time_remaining)
  return _internal_current_action_time_remaining();
}
inline void Referee::set_current_action_time_remaining(::int64_t value) {
  _internal_set_current_action_time_remaining(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:Referee.current_action_time_remaining)
}
inline ::int64_t Referee::_internal_current_action_time_remaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_action_time_remaining_;
}
inline void Referee::_internal_set_current_action_time_remaining(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_action_time_remaining_ = value;
}

// optional string status_message = 20;
inline bool Referee::has_status_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Referee::clear_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Referee::status_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Referee.status_message)
  return _internal_status_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Referee::set_status_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Referee.status_message)
}
inline std::string* Referee::mutable_status_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_message();
  // @@protoc_insertion_point(field_mutable:Referee.status_message)
  return _s;
}
inline const std::string& Referee::_internal_status_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_message_.Get();
}
inline void Referee::_internal_set_status_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_message_.Set(value, GetArena());
}
inline std::string* Referee::_internal_mutable_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.status_message_.Mutable( GetArena());
}
inline std::string* Referee::release_status_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Referee.status_message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.status_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Referee::set_allocated_status_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.status_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_message_.IsDefault()) {
          _impl_.status_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Referee.status_message)
}

// -------------------------------------------------------------------

// GameEventProposalGroup

// optional string id = 3;
inline bool GameEventProposalGroup::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEventProposalGroup::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEventProposalGroup::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEventProposalGroup.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEventProposalGroup::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEventProposalGroup.id)
}
inline std::string* GameEventProposalGroup::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:GameEventProposalGroup.id)
  return _s;
}
inline const std::string& GameEventProposalGroup::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void GameEventProposalGroup::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GameEventProposalGroup::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GameEventProposalGroup::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEventProposalGroup.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEventProposalGroup::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEventProposalGroup.id)
}

// repeated .GameEvent game_events = 1;
inline int GameEventProposalGroup::_internal_game_events_size() const {
  return _internal_game_events().size();
}
inline int GameEventProposalGroup::game_events_size() const {
  return _internal_game_events_size();
}
inline ::GameEvent* GameEventProposalGroup::mutable_game_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:GameEventProposalGroup.game_events)
  return _internal_mutable_game_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>* GameEventProposalGroup::mutable_game_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GameEventProposalGroup.game_events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_game_events();
}
inline const ::GameEvent& GameEventProposalGroup::game_events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEventProposalGroup.game_events)
  return _internal_game_events().Get(index);
}
inline ::GameEvent* GameEventProposalGroup::add_game_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::GameEvent* _add = _internal_mutable_game_events()->Add();
  // @@protoc_insertion_point(field_add:GameEventProposalGroup.game_events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>& GameEventProposalGroup::game_events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GameEventProposalGroup.game_events)
  return _internal_game_events();
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>&
GameEventProposalGroup::_internal_game_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_events_;
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>*
GameEventProposalGroup::_internal_mutable_game_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.game_events_;
}

// optional bool accepted = 2;
inline bool GameEventProposalGroup::has_accepted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEventProposalGroup::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool GameEventProposalGroup::accepted() const {
  // @@protoc_insertion_point(field_get:GameEventProposalGroup.accepted)
  return _internal_accepted();
}
inline void GameEventProposalGroup::set_accepted(bool value) {
  _internal_set_accepted(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEventProposalGroup.accepted)
}
inline bool GameEventProposalGroup::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void GameEventProposalGroup::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Referee_Stage> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Referee_Stage>() {
  return ::Referee_Stage_descriptor();
}
template <>
struct is_proto_enum<::Referee_Command> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Referee_Command>() {
  return ::Referee_Command_descriptor();
}
template <>
struct is_proto_enum<::MatchType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MatchType>() {
  return ::MatchType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto_2epb_2eh
