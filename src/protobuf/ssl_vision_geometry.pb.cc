// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_vision_geometry.proto
// Protobuf C++ Version: 5.29.0-dev

#include "ssl_vision_geometry.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Vector2f::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        x_{0},
        y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector2f::Vector2f(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;

inline constexpr SSL_GeometryCameraCalibration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        camera_id_{0u},
        focal_length_{0},
        principal_point_x_{0},
        principal_point_y_{0},
        distortion_{0},
        q0_{0},
        q1_{0},
        q2_{0},
        q3_{0},
        tx_{0},
        ty_{0},
        tz_{0},
        derived_camera_world_tx_{0},
        derived_camera_world_ty_{0},
        derived_camera_world_tz_{0},
        pixel_image_width_{0u},
        pixel_image_height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_GeometryCameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibrationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryCameraCalibrationDefaultTypeInternal() {}
  union {
    SSL_GeometryCameraCalibration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;

inline constexpr SSL_BallModelStraightTwoPhase::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        acc_slide_{0},
        acc_roll_{0},
        k_switch_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_BallModelStraightTwoPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_BallModelStraightTwoPhaseDefaultTypeInternal() {}
  union {
    SSL_BallModelStraightTwoPhase _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_BallModelStraightTwoPhaseDefaultTypeInternal _SSL_BallModelStraightTwoPhase_default_instance_;

inline constexpr SSL_BallModelChipFixedLoss::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        damping_xy_first_hop_{0},
        damping_xy_other_hops_{0},
        damping_z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_BallModelChipFixedLossDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLossDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_BallModelChipFixedLossDefaultTypeInternal() {}
  union {
    SSL_BallModelChipFixedLoss _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_BallModelChipFixedLossDefaultTypeInternal _SSL_BallModelChipFixedLoss_default_instance_;

inline constexpr SSL_GeometryModels::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        straight_two_phase_{nullptr},
        chip_fixed_loss_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_GeometryModels::SSL_GeometryModels(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_GeometryModelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryModelsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryModelsDefaultTypeInternal() {}
  union {
    SSL_GeometryModels _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryModelsDefaultTypeInternal _SSL_GeometryModels_default_instance_;

inline constexpr SSL_FieldLineSegment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        p1_{nullptr},
        p2_{nullptr},
        thickness_{0},
        type_{static_cast< ::SSL_FieldShapeType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_FieldLineSegment::SSL_FieldLineSegment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_FieldLineSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldLineSegmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldLineSegmentDefaultTypeInternal() {}
  union {
    SSL_FieldLineSegment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;

inline constexpr SSL_FieldCircularArc::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        center_{nullptr},
        radius_{0},
        a1_{0},
        a2_{0},
        thickness_{0},
        type_{static_cast< ::SSL_FieldShapeType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_FieldCircularArc::SSL_FieldCircularArc(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_FieldCircularArcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldCircularArcDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldCircularArcDefaultTypeInternal() {}
  union {
    SSL_FieldCircularArc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldCircularArcDefaultTypeInternal _SSL_FieldCircularArc_default_instance_;

inline constexpr SSL_GeometryFieldSize::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        field_lines_{},
        field_arcs_{},
        field_length_{0},
        field_width_{0},
        goal_width_{0},
        goal_depth_{0},
        boundary_width_{0},
        penalty_area_depth_{0},
        penalty_area_width_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_GeometryFieldSize::SSL_GeometryFieldSize(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_GeometryFieldSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryFieldSizeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryFieldSizeDefaultTypeInternal() {}
  union {
    SSL_GeometryFieldSize _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;

inline constexpr SSL_GeometryData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        calib_{},
        field_{nullptr},
        models_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_GeometryData::SSL_GeometryData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SSL_GeometryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryDataDefaultTypeInternal() {}
  union {
    SSL_GeometryData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ssl_5fvision_5fgeometry_2eproto = nullptr;
const ::uint32_t
    TableStruct_ssl_5fvision_5fgeometry_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Vector2f, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.y_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p1_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p2_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.thickness_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.type_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.center_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.radius_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.a1_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.a2_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.thickness_),
        PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.type_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_length_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_width_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_width_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_depth_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.boundary_width_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_lines_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_arcs_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.penalty_area_depth_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.penalty_area_width_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.camera_id_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.focal_length_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_x_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_y_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.distortion_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q0_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q1_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q2_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q3_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tx_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.ty_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tz_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tx_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_ty_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.pixel_image_width_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.pixel_image_height_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.acc_slide_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.acc_roll_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.k_switch_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_xy_other_hops_),
        PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_z_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_.straight_two_phase_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_.chip_fixed_loss_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.field_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.calib_),
        PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.models_),
        0,
        ~0u,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::Vector2f)},
        {12, 25, -1, sizeof(::SSL_FieldLineSegment)},
        {30, 45, -1, sizeof(::SSL_FieldCircularArc)},
        {52, 69, -1, sizeof(::SSL_GeometryFieldSize)},
        {78, 103, -1, sizeof(::SSL_GeometryCameraCalibration)},
        {120, 131, -1, sizeof(::SSL_BallModelStraightTwoPhase)},
        {134, 145, -1, sizeof(::SSL_BallModelChipFixedLoss)},
        {148, 158, -1, sizeof(::SSL_GeometryModels)},
        {160, 171, -1, sizeof(::SSL_GeometryData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Vector2f_default_instance_._instance,
    &::_SSL_FieldLineSegment_default_instance_._instance,
    &::_SSL_FieldCircularArc_default_instance_._instance,
    &::_SSL_GeometryFieldSize_default_instance_._instance,
    &::_SSL_GeometryCameraCalibration_default_instance_._instance,
    &::_SSL_BallModelStraightTwoPhase_default_instance_._instance,
    &::_SSL_BallModelChipFixedLoss_default_instance_._instance,
    &::_SSL_GeometryModels_default_instance_._instance,
    &::_SSL_GeometryData_default_instance_._instance,
};
const char descriptor_table_protodef_ssl_5fvision_5fgeometry_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031ssl_vision_geometry.proto\" \n\010Vector2f\022"
    "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\210\001\n\024SSL_FieldLineS"
    "egment\022\014\n\004name\030\001 \002(\t\022\025\n\002p1\030\002 \002(\0132\t.Vecto"
    "r2f\022\025\n\002p2\030\003 \002(\0132\t.Vector2f\022\021\n\tthickness\030"
    "\004 \002(\002\022!\n\004type\030\005 \001(\0162\023.SSL_FieldShapeType"
    "\"\235\001\n\024SSL_FieldCircularArc\022\014\n\004name\030\001 \002(\t\022"
    "\031\n\006center\030\002 \002(\0132\t.Vector2f\022\016\n\006radius\030\003 \002"
    "(\002\022\n\n\002a1\030\004 \002(\002\022\n\n\002a2\030\005 \002(\002\022\021\n\tthickness\030"
    "\006 \002(\002\022!\n\004type\030\007 \001(\0162\023.SSL_FieldShapeType"
    "\"\221\002\n\025SSL_GeometryFieldSize\022\024\n\014field_leng"
    "th\030\001 \002(\005\022\023\n\013field_width\030\002 \002(\005\022\022\n\ngoal_wi"
    "dth\030\003 \002(\005\022\022\n\ngoal_depth\030\004 \002(\005\022\026\n\016boundar"
    "y_width\030\005 \002(\005\022*\n\013field_lines\030\006 \003(\0132\025.SSL"
    "_FieldLineSegment\022)\n\nfield_arcs\030\007 \003(\0132\025."
    "SSL_FieldCircularArc\022\032\n\022penalty_area_dep"
    "th\030\010 \001(\005\022\032\n\022penalty_area_width\030\t \001(\005\"\200\003\n"
    "\035SSL_GeometryCameraCalibration\022\021\n\tcamera"
    "_id\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002\022\031\n\021princ"
    "ipal_point_x\030\003 \002(\002\022\031\n\021principal_point_y\030"
    "\004 \002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0\030\006 \002(\002\022\n\n"
    "\002q1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002(\002\022\n\n\002tx\030"
    "\n \002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037\n\027derived"
    "_camera_world_tx\030\r \001(\002\022\037\n\027derived_camera"
    "_world_ty\030\016 \001(\002\022\037\n\027derived_camera_world_"
    "tz\030\017 \001(\002\022\031\n\021pixel_image_width\030\020 \001(\r\022\032\n\022p"
    "ixel_image_height\030\021 \001(\r\"V\n\035SSL_BallModel"
    "StraightTwoPhase\022\021\n\tacc_slide\030\001 \002(\001\022\020\n\010a"
    "cc_roll\030\002 \002(\001\022\020\n\010k_switch\030\003 \002(\001\"l\n\032SSL_B"
    "allModelChipFixedLoss\022\034\n\024damping_xy_firs"
    "t_hop\030\001 \002(\001\022\035\n\025damping_xy_other_hops\030\002 \002"
    "(\001\022\021\n\tdamping_z\030\003 \002(\001\"\206\001\n\022SSL_GeometryMo"
    "dels\022:\n\022straight_two_phase\030\001 \001(\0132\036.SSL_B"
    "allModelStraightTwoPhase\0224\n\017chip_fixed_l"
    "oss\030\002 \001(\0132\033.SSL_BallModelChipFixedLoss\"\215"
    "\001\n\020SSL_GeometryData\022%\n\005field\030\001 \002(\0132\026.SSL"
    "_GeometryFieldSize\022-\n\005calib\030\002 \003(\0132\036.SSL_"
    "GeometryCameraCalibration\022#\n\006models\030\003 \001("
    "\0132\023.SSL_GeometryModels*\333\002\n\022SSL_FieldShap"
    "eType\022\r\n\tUndefined\020\000\022\020\n\014CenterCircle\020\001\022\020"
    "\n\014TopTouchLine\020\002\022\023\n\017BottomTouchLine\020\003\022\020\n"
    "\014LeftGoalLine\020\004\022\021\n\rRightGoalLine\020\005\022\017\n\013Ha"
    "lfwayLine\020\006\022\016\n\nCenterLine\020\007\022\026\n\022LeftPenal"
    "tyStretch\020\010\022\027\n\023RightPenaltyStretch\020\t\022\037\n\033"
    "LeftFieldLeftPenaltyStretch\020\n\022 \n\034LeftFie"
    "ldRightPenaltyStretch\020\013\022 \n\034RightFieldLef"
    "tPenaltyStretch\020\014\022!\n\035RightFieldRightPena"
    "ltyStretch\020\rB8Z6github.com/RoboCup-SSL/s"
    "sl-simulation-protocol/pkg/sim"
};
static ::absl::once_flag descriptor_table_ssl_5fvision_5fgeometry_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ssl_5fvision_5fgeometry_2eproto = {
    false,
    false,
    1910,
    descriptor_table_protodef_ssl_5fvision_5fgeometry_2eproto,
    "ssl_vision_geometry.proto",
    &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_ssl_5fvision_5fgeometry_2eproto::offsets,
    file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto,
    file_level_service_descriptors_ssl_5fvision_5fgeometry_2eproto,
};
const ::google::protobuf::EnumDescriptor* SSL_FieldShapeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ssl_5fvision_5fgeometry_2eproto);
  return file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SSL_FieldShapeType_internal_data_[] = {
    917504u, 0u, };
bool SSL_FieldShapeType_IsValid(int value) {
  return 0 <= value && value <= 13;
}
// ===================================================================

class Vector2f::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Vector2f>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Vector2f, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Vector2f::Vector2f(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vector2f)
}
Vector2f::Vector2f(
    ::google::protobuf::Arena* arena, const Vector2f& from)
    : Vector2f(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector2f::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector2f::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector2f::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    Vector2f::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_Vector2f_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            Vector2f::IsInitializedImpl,
            &Vector2f::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<Vector2f>(),
            ::google::protobuf::Message::GetNewImpl<Vector2f>(),
            ::google::protobuf::Message::GetClearImpl<Vector2f>(), &Vector2f::ByteSizeLong,
                &Vector2f::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(Vector2f, _impl_._cached_size_),
            false,
        },
        &Vector2f::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* Vector2f::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Vector2f::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Vector2f, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Vector2f>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // required float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)}},
    // required float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Vector2f::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Vector2f& this_ = static_cast<const Vector2f&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Vector2f::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Vector2f& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required float x = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // required float y = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Vector2f::ByteSizeLong(const MessageLite& base) {
          const Vector2f& this_ = static_cast<const Vector2f&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Vector2f::ByteSizeLong() const {
          const Vector2f& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Vector2f)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // required float x = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 5;
            }
            // required float y = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Vector2f::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector2f::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Vector2f&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Vector2f::InternalSwap(Vector2f* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_FieldLineSegment::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_FieldLineSegment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SSL_FieldLineSegment::SSL_FieldLineSegment(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldLineSegment)
}
inline PROTOBUF_NDEBUG_INLINE SSL_FieldLineSegment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_FieldLineSegment& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

SSL_FieldLineSegment::SSL_FieldLineSegment(
    ::google::protobuf::Arena* arena,
    const SSL_FieldLineSegment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SSL_FieldLineSegment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.p1_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2f>(
                              arena, *from._impl_.p1_)
                        : nullptr;
  _impl_.p2_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Vector2f>(
                              arena, *from._impl_.p2_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, thickness_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, thickness_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, thickness_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}
inline PROTOBUF_NDEBUG_INLINE SSL_FieldLineSegment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void SSL_FieldLineSegment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, p1_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, p1_) +
               sizeof(Impl_::type_));
}
SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_FieldLineSegment::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.p1_;
  delete _impl_.p2_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_FieldLineSegment::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_FieldLineSegment_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_FieldLineSegment::IsInitializedImpl,
            &SSL_FieldLineSegment::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_FieldLineSegment>(),
            ::google::protobuf::Message::GetNewImpl<SSL_FieldLineSegment>(),
            ::google::protobuf::Message::GetClearImpl<SSL_FieldLineSegment>(), &SSL_FieldLineSegment::ByteSizeLong,
                &SSL_FieldLineSegment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_._cached_size_),
            false,
        },
        &SSL_FieldLineSegment::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_FieldLineSegment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 33, 2> SSL_FieldLineSegment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_FieldLineSegment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.name_)}},
    // required .Vector2f p1 = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p1_)}},
    // required .Vector2f p2 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 1, PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p2_)}},
    // required float thickness = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.thickness_)}},
    // optional .SSL_FieldShapeType type = 5;
    {::_pbi::TcParser::FastEr0S1,
     {40, 4, 13, PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required string name = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required .Vector2f p1 = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p1_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required .Vector2f p2 = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p2_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required float thickness = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.thickness_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .SSL_FieldShapeType type = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.type_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2f>()},
    {::_pbi::TcParser::GetTable<::Vector2f>()},
    {0, 14},
  }}, {{
    "\24\4\0\0\0\0\0\0"
    "SSL_FieldLineSegment"
    "name"
  }},
};

PROTOBUF_NOINLINE void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.p1_ != nullptr);
      _impl_.p1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.p2_ != nullptr);
      _impl_.p2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.thickness_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.thickness_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_FieldLineSegment::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_FieldLineSegment& this_ = static_cast<const SSL_FieldLineSegment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_FieldLineSegment::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_FieldLineSegment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required string name = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "SSL_FieldLineSegment.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // required .Vector2f p1 = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.p1_, this_._impl_.p1_->GetCachedSize(), target,
                stream);
          }

          // required .Vector2f p2 = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.p2_, this_._impl_.p2_->GetCachedSize(), target,
                stream);
          }

          // required float thickness = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_thickness(), target);
          }

          // optional .SSL_FieldShapeType type = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_FieldLineSegment::ByteSizeLong(const MessageLite& base) {
          const SSL_FieldLineSegment& this_ = static_cast<const SSL_FieldLineSegment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_FieldLineSegment::ByteSizeLong() const {
          const SSL_FieldLineSegment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // required string name = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // required .Vector2f p1 = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p1_);
            }
            // required .Vector2f p2 = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p2_);
            }
            // required float thickness = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
           {
            // optional .SSL_FieldShapeType type = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_FieldLineSegment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_FieldLineSegment*>(&to_msg);
  auto& from = static_cast<const SSL_FieldLineSegment&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.p1_ != nullptr);
      if (_this->_impl_.p1_ == nullptr) {
        _this->_impl_.p1_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2f>(arena, *from._impl_.p1_);
      } else {
        _this->_impl_.p1_->MergeFrom(*from._impl_.p1_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.p2_ != nullptr);
      if (_this->_impl_.p2_ == nullptr) {
        _this->_impl_.p2_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2f>(arena, *from._impl_.p2_);
      } else {
        _this->_impl_.p2_->MergeFrom(*from._impl_.p2_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.thickness_ = from._impl_.thickness_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_FieldLineSegment::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_FieldLineSegment&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.p1_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._impl_.p2_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.type_)
      + sizeof(SSL_FieldLineSegment::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::google::protobuf::Metadata SSL_FieldLineSegment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_FieldCircularArc::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_FieldCircularArc>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

SSL_FieldCircularArc::SSL_FieldCircularArc(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldCircularArc)
}
inline PROTOBUF_NDEBUG_INLINE SSL_FieldCircularArc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_FieldCircularArc& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

SSL_FieldCircularArc::SSL_FieldCircularArc(
    ::google::protobuf::Arena* arena,
    const SSL_FieldCircularArc& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SSL_FieldCircularArc* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.center_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector2f>(
                              arena, *from._impl_.center_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, radius_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, radius_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, radius_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:SSL_FieldCircularArc)
}
inline PROTOBUF_NDEBUG_INLINE SSL_FieldCircularArc::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena) {}

inline void SSL_FieldCircularArc::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, center_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, center_) +
               sizeof(Impl_::type_));
}
SSL_FieldCircularArc::~SSL_FieldCircularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCircularArc)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_FieldCircularArc::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_FieldCircularArc::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_FieldCircularArc_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_FieldCircularArc::IsInitializedImpl,
            &SSL_FieldCircularArc::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_FieldCircularArc>(),
            ::google::protobuf::Message::GetNewImpl<SSL_FieldCircularArc>(),
            ::google::protobuf::Message::GetClearImpl<SSL_FieldCircularArc>(), &SSL_FieldCircularArc::ByteSizeLong,
                &SSL_FieldCircularArc::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_._cached_size_),
            false,
        },
        &SSL_FieldCircularArc::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_FieldCircularArc::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 33, 2> SSL_FieldCircularArc::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_FieldCircularArc>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.name_)}},
    // required .Vector2f center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.center_)}},
    // required float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.radius_)}},
    // required float a1 = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.a1_)}},
    // required float a2 = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.a2_)}},
    // required float thickness = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.thickness_)}},
    // optional .SSL_FieldShapeType type = 7;
    {::_pbi::TcParser::FastEr0S1,
     {56, 6, 13, PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required string name = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required .Vector2f center = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.center_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // required float radius = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.radius_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float a1 = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.a1_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float a2 = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.a2_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float thickness = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.thickness_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .SSL_FieldShapeType type = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.type_), _Internal::kHasBitsOffset + 6, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector2f>()},
    {0, 14},
  }}, {{
    "\24\4\0\0\0\0\0\0"
    "SSL_FieldCircularArc"
    "name"
  }},
};

PROTOBUF_NOINLINE void SSL_FieldCircularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCircularArc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.radius_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_FieldCircularArc::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_FieldCircularArc& this_ = static_cast<const SSL_FieldCircularArc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_FieldCircularArc::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_FieldCircularArc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCircularArc)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required string name = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "SSL_FieldCircularArc.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // required .Vector2f center = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.center_, this_._impl_.center_->GetCachedSize(), target,
                stream);
          }

          // required float radius = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_radius(), target);
          }

          // required float a1 = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_a1(), target);
          }

          // required float a2 = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_a2(), target);
          }

          // required float thickness = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_thickness(), target);
          }

          // optional .SSL_FieldShapeType type = 7;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCircularArc)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_FieldCircularArc::ByteSizeLong(const MessageLite& base) {
          const SSL_FieldCircularArc& this_ = static_cast<const SSL_FieldCircularArc&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_FieldCircularArc::ByteSizeLong() const {
          const SSL_FieldCircularArc& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_FieldCircularArc)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // required string name = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // required .Vector2f center = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.center_);
            }
            // required float radius = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // required float a1 = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // required float a2 = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // required float thickness = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
          }
           {
            // optional .SSL_FieldShapeType type = 7;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_FieldCircularArc::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_FieldCircularArc*>(&to_msg);
  auto& from = static_cast<const SSL_FieldCircularArc&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCircularArc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.center_ != nullptr);
      if (_this->_impl_.center_ == nullptr) {
        _this->_impl_.center_ =
            ::google::protobuf::Message::CopyConstruct<::Vector2f>(arena, *from._impl_.center_);
      } else {
        _this->_impl_.center_->MergeFrom(*from._impl_.center_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.a1_ = from._impl_.a1_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.a2_ = from._impl_.a2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.thickness_ = from._impl_.thickness_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldCircularArc::CopyFrom(const SSL_FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_FieldCircularArc::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_FieldCircularArc&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.center_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldCircularArc::InternalSwap(SSL_FieldCircularArc* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.type_)
      + sizeof(SSL_FieldCircularArc::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::google::protobuf::Metadata SSL_FieldCircularArc::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_GeometryFieldSize::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_GeometryFieldSize>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

SSL_GeometryFieldSize::SSL_GeometryFieldSize(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryFieldSize)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryFieldSize::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_GeometryFieldSize& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        field_lines_{visibility, arena, from.field_lines_},
        field_arcs_{visibility, arena, from.field_arcs_} {}

SSL_GeometryFieldSize::SSL_GeometryFieldSize(
    ::google::protobuf::Arena* arena,
    const SSL_GeometryFieldSize& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SSL_GeometryFieldSize* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_length_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, field_length_),
           offsetof(Impl_, penalty_area_width_) -
               offsetof(Impl_, field_length_) +
               sizeof(Impl_::penalty_area_width_));

  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryFieldSize::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        field_lines_{visibility, arena},
        field_arcs_{visibility, arena} {}

inline void SSL_GeometryFieldSize::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_length_),
           0,
           offsetof(Impl_, penalty_area_width_) -
               offsetof(Impl_, field_length_) +
               sizeof(Impl_::penalty_area_width_));
}
SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_GeometryFieldSize::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_GeometryFieldSize::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_GeometryFieldSize_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_GeometryFieldSize::IsInitializedImpl,
            &SSL_GeometryFieldSize::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_GeometryFieldSize>(),
            ::google::protobuf::Message::GetNewImpl<SSL_GeometryFieldSize>(),
            ::google::protobuf::Message::GetClearImpl<SSL_GeometryFieldSize>(), &SSL_GeometryFieldSize::ByteSizeLong,
                &SSL_GeometryFieldSize::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_._cached_size_),
            false,
        },
        &SSL_GeometryFieldSize::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_GeometryFieldSize::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 0, 2> SSL_GeometryFieldSize::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_GeometryFieldSize>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required int32 field_length = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.field_length_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_length_)}},
    // required int32 field_width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.field_width_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_width_)}},
    // required int32 goal_width = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.goal_width_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.goal_width_)}},
    // required int32 goal_depth = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.goal_depth_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.goal_depth_)}},
    // required int32 boundary_width = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.boundary_width_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.boundary_width_)}},
    // repeated .SSL_FieldLineSegment field_lines = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_lines_)}},
    // repeated .SSL_FieldCircularArc field_arcs = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 1, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_arcs_)}},
    // optional int32 penalty_area_depth = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.penalty_area_depth_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.penalty_area_depth_)}},
    // optional int32 penalty_area_width = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryFieldSize, _impl_.penalty_area_width_), 6>(),
     {72, 6, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.penalty_area_width_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 field_length = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_length_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required int32 field_width = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_width_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required int32 goal_width = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.goal_width_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required int32 goal_depth = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.goal_depth_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required int32 boundary_width = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.boundary_width_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .SSL_FieldLineSegment field_lines = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_lines_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .SSL_FieldCircularArc field_arcs = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_arcs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 penalty_area_depth = 8;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.penalty_area_depth_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 penalty_area_width = 9;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.penalty_area_width_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SSL_FieldLineSegment>()},
    {::_pbi::TcParser::GetTable<::SSL_FieldCircularArc>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_lines_.Clear();
  _impl_.field_arcs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.field_length_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_area_width_) -
        reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.penalty_area_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_GeometryFieldSize::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_GeometryFieldSize& this_ = static_cast<const SSL_GeometryFieldSize&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_GeometryFieldSize::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_GeometryFieldSize& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required int32 field_length = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_field_length(), target);
          }

          // required int32 field_width = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_field_width(), target);
          }

          // required int32 goal_width = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_goal_width(), target);
          }

          // required int32 goal_depth = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_goal_depth(), target);
          }

          // required int32 boundary_width = 5;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_boundary_width(), target);
          }

          // repeated .SSL_FieldLineSegment field_lines = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_field_lines_size());
               i < n; i++) {
            const auto& repfield = this_._internal_field_lines().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .SSL_FieldCircularArc field_arcs = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_field_arcs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_field_arcs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // optional int32 penalty_area_depth = 8;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_penalty_area_depth(), target);
          }

          // optional int32 penalty_area_width = 9;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_penalty_area_width(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_GeometryFieldSize::ByteSizeLong(const MessageLite& base) {
          const SSL_GeometryFieldSize& this_ = static_cast<const SSL_GeometryFieldSize&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_GeometryFieldSize::ByteSizeLong() const {
          const SSL_GeometryFieldSize& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .SSL_FieldLineSegment field_lines = 6;
             {
              total_size += 1UL * this_._internal_field_lines_size();
              for (const auto& msg : this_._internal_field_lines()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .SSL_FieldCircularArc field_arcs = 7;
             {
              total_size += 1UL * this_._internal_field_arcs_size();
              for (const auto& msg : this_._internal_field_arcs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // required int32 field_length = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_field_length());
            }
            // required int32 field_width = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_field_width());
            }
            // required int32 goal_width = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_goal_width());
            }
            // required int32 goal_depth = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_goal_depth());
            }
            // required int32 boundary_width = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_boundary_width());
            }
          }
          if (cached_has_bits & 0x00000060u) {
            // optional int32 penalty_area_depth = 8;
            if (cached_has_bits & 0x00000020u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_penalty_area_depth());
            }
            // optional int32 penalty_area_width = 9;
            if (cached_has_bits & 0x00000040u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_penalty_area_width());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_GeometryFieldSize::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_GeometryFieldSize*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryFieldSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field_lines()->MergeFrom(
      from._internal_field_lines());
  _this->_internal_mutable_field_arcs()->MergeFrom(
      from._internal_field_arcs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_length_ = from._impl_.field_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_width_ = from._impl_.field_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.goal_width_ = from._impl_.goal_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.goal_depth_ = from._impl_.goal_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boundary_width_ = from._impl_.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.penalty_area_depth_ = from._impl_.penalty_area_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.penalty_area_width_ = from._impl_.penalty_area_width_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_GeometryFieldSize::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_GeometryFieldSize&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_field_lines()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_field_arcs()))
    return false;
  return true;
}

void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.field_lines_.InternalSwap(&other->_impl_.field_lines_);
  _impl_.field_arcs_.InternalSwap(&other->_impl_.field_arcs_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.penalty_area_width_)
      + sizeof(SSL_GeometryFieldSize::_impl_.penalty_area_width_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_length_)>(
          reinterpret_cast<char*>(&_impl_.field_length_),
          reinterpret_cast<char*>(&other->_impl_.field_length_));
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_GeometryCameraCalibration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_GeometryCameraCalibration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(
    ::google::protobuf::Arena* arena, const SSL_GeometryCameraCalibration& from)
    : SSL_GeometryCameraCalibration(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryCameraCalibration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_GeometryCameraCalibration::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, camera_id_),
           0,
           offsetof(Impl_, pixel_image_height_) -
               offsetof(Impl_, camera_id_) +
               sizeof(Impl_::pixel_image_height_));
}
SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_GeometryCameraCalibration::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_GeometryCameraCalibration::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_GeometryCameraCalibration_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_GeometryCameraCalibration::IsInitializedImpl,
            &SSL_GeometryCameraCalibration::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_GeometryCameraCalibration>(),
            ::google::protobuf::Message::GetNewImpl<SSL_GeometryCameraCalibration>(),
            ::google::protobuf::Message::GetClearImpl<SSL_GeometryCameraCalibration>(), &SSL_GeometryCameraCalibration::ByteSizeLong,
                &SSL_GeometryCameraCalibration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_._cached_size_),
            false,
        },
        &SSL_GeometryCameraCalibration::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_GeometryCameraCalibration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 0, 0, 2> SSL_GeometryCameraCalibration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_GeometryCameraCalibration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint32 camera_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_GeometryCameraCalibration, _impl_.camera_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.camera_id_)}},
    // required float focal_length = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.focal_length_)}},
    // required float principal_point_x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.principal_point_x_)}},
    // required float principal_point_y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.principal_point_y_)}},
    // required float distortion = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.distortion_)}},
    // required float q0 = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q0_)}},
    // required float q1 = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q1_)}},
    // required float q2 = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q2_)}},
    // required float q3 = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 8, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q3_)}},
    // required float tx = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 9, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.tx_)}},
    // required float ty = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 10, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.ty_)}},
    // required float tz = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 11, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.tz_)}},
    // optional float derived_camera_world_tx = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 12, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tx_)}},
    // optional float derived_camera_world_ty = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 13, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_ty_)}},
    // optional float derived_camera_world_tz = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 14, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_)}},
    // optional uint32 pixel_image_width = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_width_)}},
    // optional uint32 pixel_image_height = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_height_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint32 camera_id = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.camera_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required float focal_length = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.focal_length_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float principal_point_x = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.principal_point_x_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float principal_point_y = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.principal_point_y_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float distortion = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.distortion_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float q0 = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q0_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float q1 = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q1_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float q2 = 8;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q2_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float q3 = 9;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.q3_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float tx = 10;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.tx_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float ty = 11;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.ty_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float tz = 12;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.tz_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float derived_camera_world_tx = 13;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tx_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float derived_camera_world_ty = 14;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_ty_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float derived_camera_world_tz = 15;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 pixel_image_width = 16;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_width_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 pixel_image_height = 17;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_height_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.camera_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.q2_) -
        reinterpret_cast<char*>(&_impl_.camera_id_)) + sizeof(_impl_.q2_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.q3_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pixel_image_width_) -
        reinterpret_cast<char*>(&_impl_.q3_)) + sizeof(_impl_.pixel_image_width_));
  }
  _impl_.pixel_image_height_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_GeometryCameraCalibration::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_GeometryCameraCalibration& this_ = static_cast<const SSL_GeometryCameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_GeometryCameraCalibration::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_GeometryCameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required uint32 camera_id = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_camera_id(), target);
          }

          // required float focal_length = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_focal_length(), target);
          }

          // required float principal_point_x = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_principal_point_x(), target);
          }

          // required float principal_point_y = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_principal_point_y(), target);
          }

          // required float distortion = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_distortion(), target);
          }

          // required float q0 = 6;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_q0(), target);
          }

          // required float q1 = 7;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_q1(), target);
          }

          // required float q2 = 8;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_q2(), target);
          }

          // required float q3 = 9;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_q3(), target);
          }

          // required float tx = 10;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                10, this_._internal_tx(), target);
          }

          // required float ty = 11;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_ty(), target);
          }

          // required float tz = 12;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_tz(), target);
          }

          // optional float derived_camera_world_tx = 13;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_derived_camera_world_tx(), target);
          }

          // optional float derived_camera_world_ty = 14;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_derived_camera_world_ty(), target);
          }

          // optional float derived_camera_world_tz = 15;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_derived_camera_world_tz(), target);
          }

          // optional uint32 pixel_image_width = 16;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                16, this_._internal_pixel_image_width(), target);
          }

          // optional uint32 pixel_image_height = 17;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal_pixel_image_height(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_GeometryCameraCalibration::ByteSizeLong(const MessageLite& base) {
          const SSL_GeometryCameraCalibration& this_ = static_cast<const SSL_GeometryCameraCalibration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
          const SSL_GeometryCameraCalibration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // required uint32 camera_id = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_camera_id());
            }
            // required float focal_length = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // required float principal_point_x = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // required float principal_point_y = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // required float distortion = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
            // required float q0 = 6;
            if (cached_has_bits & 0x00000020u) {
              total_size += 5;
            }
            // required float q1 = 7;
            if (cached_has_bits & 0x00000040u) {
              total_size += 5;
            }
            // required float q2 = 8;
            if (cached_has_bits & 0x00000080u) {
              total_size += 5;
            }
          }
          if (cached_has_bits & 0x00000f00u) {
            // required float q3 = 9;
            if (cached_has_bits & 0x00000100u) {
              total_size += 5;
            }
            // required float tx = 10;
            if (cached_has_bits & 0x00000200u) {
              total_size += 5;
            }
            // required float ty = 11;
            if (cached_has_bits & 0x00000400u) {
              total_size += 5;
            }
            // required float tz = 12;
            if (cached_has_bits & 0x00000800u) {
              total_size += 5;
            }
          }
          if (cached_has_bits & 0x0000f000u) {
            // optional float derived_camera_world_tx = 13;
            if (cached_has_bits & 0x00001000u) {
              total_size += 5;
            }
            // optional float derived_camera_world_ty = 14;
            if (cached_has_bits & 0x00002000u) {
              total_size += 5;
            }
            // optional float derived_camera_world_tz = 15;
            if (cached_has_bits & 0x00004000u) {
              total_size += 5;
            }
            // optional uint32 pixel_image_width = 16;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_pixel_image_width());
            }
          }
           {
            // optional uint32 pixel_image_height = 17;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_pixel_image_height());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_GeometryCameraCalibration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_GeometryCameraCalibration*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryCameraCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.focal_length_ = from._impl_.focal_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.principal_point_x_ = from._impl_.principal_point_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.principal_point_y_ = from._impl_.principal_point_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distortion_ = from._impl_.distortion_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.q0_ = from._impl_.q0_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.q1_ = from._impl_.q1_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.q2_ = from._impl_.q2_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.q3_ = from._impl_.q3_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tx_ = from._impl_.tx_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ty_ = from._impl_.ty_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tz_ = from._impl_.tz_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.derived_camera_world_tx_ = from._impl_.derived_camera_world_tx_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.derived_camera_world_ty_ = from._impl_.derived_camera_world_ty_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.derived_camera_world_tz_ = from._impl_.derived_camera_world_tz_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.pixel_image_width_ = from._impl_.pixel_image_width_;
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_impl_.pixel_image_height_ = from._impl_.pixel_image_height_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_GeometryCameraCalibration::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_GeometryCameraCalibration&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_height_)
      + sizeof(SSL_GeometryCameraCalibration::_impl_.pixel_image_height_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.camera_id_)>(
          reinterpret_cast<char*>(&_impl_.camera_id_),
          reinterpret_cast<char*>(&other->_impl_.camera_id_));
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_BallModelStraightTwoPhase::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_BallModelStraightTwoPhase>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_BallModelStraightTwoPhase)
}
SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(
    ::google::protobuf::Arena* arena, const SSL_BallModelStraightTwoPhase& from)
    : SSL_BallModelStraightTwoPhase(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_BallModelStraightTwoPhase::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_BallModelStraightTwoPhase::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, acc_slide_),
           0,
           offsetof(Impl_, k_switch_) -
               offsetof(Impl_, acc_slide_) +
               sizeof(Impl_::k_switch_));
}
SSL_BallModelStraightTwoPhase::~SSL_BallModelStraightTwoPhase() {
  // @@protoc_insertion_point(destructor:SSL_BallModelStraightTwoPhase)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_BallModelStraightTwoPhase::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_BallModelStraightTwoPhase::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_BallModelStraightTwoPhase_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_BallModelStraightTwoPhase::IsInitializedImpl,
            &SSL_BallModelStraightTwoPhase::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_BallModelStraightTwoPhase>(),
            ::google::protobuf::Message::GetNewImpl<SSL_BallModelStraightTwoPhase>(),
            ::google::protobuf::Message::GetClearImpl<SSL_BallModelStraightTwoPhase>(), &SSL_BallModelStraightTwoPhase::ByteSizeLong,
                &SSL_BallModelStraightTwoPhase::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_._cached_size_),
            false,
        },
        &SSL_BallModelStraightTwoPhase::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_BallModelStraightTwoPhase::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SSL_BallModelStraightTwoPhase::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_BallModelStraightTwoPhase>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required double acc_slide = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_slide_)}},
    // required double acc_roll = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_roll_)}},
    // required double k_switch = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.k_switch_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required double acc_slide = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_slide_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double acc_roll = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_roll_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double k_switch = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.k_switch_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_BallModelStraightTwoPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelStraightTwoPhase)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.acc_slide_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.k_switch_) -
        reinterpret_cast<char*>(&_impl_.acc_slide_)) + sizeof(_impl_.k_switch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_BallModelStraightTwoPhase::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_BallModelStraightTwoPhase& this_ = static_cast<const SSL_BallModelStraightTwoPhase&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_BallModelStraightTwoPhase::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_BallModelStraightTwoPhase& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelStraightTwoPhase)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required double acc_slide = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_acc_slide(), target);
          }

          // required double acc_roll = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_acc_roll(), target);
          }

          // required double k_switch = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_k_switch(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelStraightTwoPhase)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_BallModelStraightTwoPhase::ByteSizeLong(const MessageLite& base) {
          const SSL_BallModelStraightTwoPhase& this_ = static_cast<const SSL_BallModelStraightTwoPhase&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_BallModelStraightTwoPhase::ByteSizeLong() const {
          const SSL_BallModelStraightTwoPhase& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_BallModelStraightTwoPhase)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // required double acc_slide = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 9;
            }
            // required double acc_roll = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 9;
            }
            // required double k_switch = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_BallModelStraightTwoPhase::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_BallModelStraightTwoPhase*>(&to_msg);
  auto& from = static_cast<const SSL_BallModelStraightTwoPhase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelStraightTwoPhase)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.acc_slide_ = from._impl_.acc_slide_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.acc_roll_ = from._impl_.acc_roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.k_switch_ = from._impl_.k_switch_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_BallModelStraightTwoPhase::CopyFrom(const SSL_BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_BallModelStraightTwoPhase::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_BallModelStraightTwoPhase&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_BallModelStraightTwoPhase::InternalSwap(SSL_BallModelStraightTwoPhase* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.k_switch_)
      + sizeof(SSL_BallModelStraightTwoPhase::_impl_.k_switch_)
      - PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_slide_)>(
          reinterpret_cast<char*>(&_impl_.acc_slide_),
          reinterpret_cast<char*>(&other->_impl_.acc_slide_));
}

::google::protobuf::Metadata SSL_BallModelStraightTwoPhase::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_BallModelChipFixedLoss::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_BallModelChipFixedLoss>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_BallModelChipFixedLoss)
}
SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(
    ::google::protobuf::Arena* arena, const SSL_BallModelChipFixedLoss& from)
    : SSL_BallModelChipFixedLoss(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_BallModelChipFixedLoss::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_BallModelChipFixedLoss::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, damping_xy_first_hop_),
           0,
           offsetof(Impl_, damping_z_) -
               offsetof(Impl_, damping_xy_first_hop_) +
               sizeof(Impl_::damping_z_));
}
SSL_BallModelChipFixedLoss::~SSL_BallModelChipFixedLoss() {
  // @@protoc_insertion_point(destructor:SSL_BallModelChipFixedLoss)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_BallModelChipFixedLoss::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_BallModelChipFixedLoss::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_BallModelChipFixedLoss_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_BallModelChipFixedLoss::IsInitializedImpl,
            &SSL_BallModelChipFixedLoss::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_BallModelChipFixedLoss>(),
            ::google::protobuf::Message::GetNewImpl<SSL_BallModelChipFixedLoss>(),
            ::google::protobuf::Message::GetClearImpl<SSL_BallModelChipFixedLoss>(), &SSL_BallModelChipFixedLoss::ByteSizeLong,
                &SSL_BallModelChipFixedLoss::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_._cached_size_),
            false,
        },
        &SSL_BallModelChipFixedLoss::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_BallModelChipFixedLoss::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SSL_BallModelChipFixedLoss::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_BallModelChipFixedLoss>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required double damping_xy_first_hop = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_)}},
    // required double damping_xy_other_hops = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_other_hops_)}},
    // required double damping_z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required double damping_xy_first_hop = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double damping_xy_other_hops = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_other_hops_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double damping_z = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_z_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_BallModelChipFixedLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelChipFixedLoss)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.damping_xy_first_hop_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.damping_z_) -
        reinterpret_cast<char*>(&_impl_.damping_xy_first_hop_)) + sizeof(_impl_.damping_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_BallModelChipFixedLoss::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_BallModelChipFixedLoss& this_ = static_cast<const SSL_BallModelChipFixedLoss&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_BallModelChipFixedLoss::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_BallModelChipFixedLoss& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelChipFixedLoss)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required double damping_xy_first_hop = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_damping_xy_first_hop(), target);
          }

          // required double damping_xy_other_hops = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_damping_xy_other_hops(), target);
          }

          // required double damping_z = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_damping_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelChipFixedLoss)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_BallModelChipFixedLoss::ByteSizeLong(const MessageLite& base) {
          const SSL_BallModelChipFixedLoss& this_ = static_cast<const SSL_BallModelChipFixedLoss&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_BallModelChipFixedLoss::ByteSizeLong() const {
          const SSL_BallModelChipFixedLoss& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_BallModelChipFixedLoss)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // required double damping_xy_first_hop = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 9;
            }
            // required double damping_xy_other_hops = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 9;
            }
            // required double damping_z = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_BallModelChipFixedLoss::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_BallModelChipFixedLoss*>(&to_msg);
  auto& from = static_cast<const SSL_BallModelChipFixedLoss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelChipFixedLoss)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damping_xy_first_hop_ = from._impl_.damping_xy_first_hop_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damping_xy_other_hops_ = from._impl_.damping_xy_other_hops_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damping_z_ = from._impl_.damping_z_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_BallModelChipFixedLoss::CopyFrom(const SSL_BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_BallModelChipFixedLoss::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_BallModelChipFixedLoss&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_BallModelChipFixedLoss::InternalSwap(SSL_BallModelChipFixedLoss* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_z_)
      + sizeof(SSL_BallModelChipFixedLoss::_impl_.damping_z_)
      - PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_)>(
          reinterpret_cast<char*>(&_impl_.damping_xy_first_hop_),
          reinterpret_cast<char*>(&other->_impl_.damping_xy_first_hop_));
}

::google::protobuf::Metadata SSL_BallModelChipFixedLoss::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_GeometryModels::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_GeometryModels>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_._has_bits_);
};

SSL_GeometryModels::SSL_GeometryModels(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryModels)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryModels::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_GeometryModels& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SSL_GeometryModels::SSL_GeometryModels(
    ::google::protobuf::Arena* arena,
    const SSL_GeometryModels& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SSL_GeometryModels* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.straight_two_phase_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::SSL_BallModelStraightTwoPhase>(
                              arena, *from._impl_.straight_two_phase_)
                        : nullptr;
  _impl_.chip_fixed_loss_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::SSL_BallModelChipFixedLoss>(
                              arena, *from._impl_.chip_fixed_loss_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:SSL_GeometryModels)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryModels::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_GeometryModels::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, straight_two_phase_),
           0,
           offsetof(Impl_, chip_fixed_loss_) -
               offsetof(Impl_, straight_two_phase_) +
               sizeof(Impl_::chip_fixed_loss_));
}
SSL_GeometryModels::~SSL_GeometryModels() {
  // @@protoc_insertion_point(destructor:SSL_GeometryModels)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_GeometryModels::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.straight_two_phase_;
  delete _impl_.chip_fixed_loss_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_GeometryModels::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_GeometryModels_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_GeometryModels::IsInitializedImpl,
            &SSL_GeometryModels::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_GeometryModels>(),
            ::google::protobuf::Message::GetNewImpl<SSL_GeometryModels>(),
            ::google::protobuf::Message::GetClearImpl<SSL_GeometryModels>(), &SSL_GeometryModels::ByteSizeLong,
                &SSL_GeometryModels::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_._cached_size_),
            false,
        },
        &SSL_GeometryModels::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_GeometryModels::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SSL_GeometryModels::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_GeometryModels>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.chip_fixed_loss_)}},
    // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.straight_two_phase_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.straight_two_phase_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.chip_fixed_loss_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SSL_BallModelStraightTwoPhase>()},
    {::_pbi::TcParser::GetTable<::SSL_BallModelChipFixedLoss>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SSL_GeometryModels::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryModels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.straight_two_phase_ != nullptr);
      _impl_.straight_two_phase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.chip_fixed_loss_ != nullptr);
      _impl_.chip_fixed_loss_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_GeometryModels::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_GeometryModels& this_ = static_cast<const SSL_GeometryModels&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_GeometryModels::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_GeometryModels& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryModels)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.straight_two_phase_, this_._impl_.straight_two_phase_->GetCachedSize(), target,
                stream);
          }

          // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.chip_fixed_loss_, this_._impl_.chip_fixed_loss_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryModels)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_GeometryModels::ByteSizeLong(const MessageLite& base) {
          const SSL_GeometryModels& this_ = static_cast<const SSL_GeometryModels&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_GeometryModels::ByteSizeLong() const {
          const SSL_GeometryModels& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_GeometryModels)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.straight_two_phase_);
            }
            // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.chip_fixed_loss_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_GeometryModels::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_GeometryModels*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryModels&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryModels)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.straight_two_phase_ != nullptr);
      if (_this->_impl_.straight_two_phase_ == nullptr) {
        _this->_impl_.straight_two_phase_ =
            ::google::protobuf::Message::CopyConstruct<::SSL_BallModelStraightTwoPhase>(arena, *from._impl_.straight_two_phase_);
      } else {
        _this->_impl_.straight_two_phase_->MergeFrom(*from._impl_.straight_two_phase_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.chip_fixed_loss_ != nullptr);
      if (_this->_impl_.chip_fixed_loss_ == nullptr) {
        _this->_impl_.chip_fixed_loss_ =
            ::google::protobuf::Message::CopyConstruct<::SSL_BallModelChipFixedLoss>(arena, *from._impl_.chip_fixed_loss_);
      } else {
        _this->_impl_.chip_fixed_loss_->MergeFrom(*from._impl_.chip_fixed_loss_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryModels::CopyFrom(const SSL_GeometryModels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_GeometryModels::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_GeometryModels&>(msg);
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.straight_two_phase_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.chip_fixed_loss_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryModels::InternalSwap(SSL_GeometryModels* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.chip_fixed_loss_)
      + sizeof(SSL_GeometryModels::_impl_.chip_fixed_loss_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.straight_two_phase_)>(
          reinterpret_cast<char*>(&_impl_.straight_two_phase_),
          reinterpret_cast<char*>(&other->_impl_.straight_two_phase_));
}

::google::protobuf::Metadata SSL_GeometryModels::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_GeometryData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_GeometryData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SSL_GeometryData::SSL_GeometryData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryData)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_GeometryData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        calib_{visibility, arena, from.calib_} {}

SSL_GeometryData::SSL_GeometryData(
    ::google::protobuf::Arena* arena,
    const SSL_GeometryData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SSL_GeometryData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.field_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::SSL_GeometryFieldSize>(
                              arena, *from._impl_.field_)
                        : nullptr;
  _impl_.models_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::SSL_GeometryModels>(
                              arena, *from._impl_.models_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}
inline PROTOBUF_NDEBUG_INLINE SSL_GeometryData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        calib_{visibility, arena} {}

inline void SSL_GeometryData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_),
           0,
           offsetof(Impl_, models_) -
               offsetof(Impl_, field_) +
               sizeof(Impl_::models_));
}
SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_GeometryData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.field_;
  delete _impl_.models_;
  _impl_.~Impl_();
}

PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    SSL_GeometryData::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_SSL_GeometryData_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            SSL_GeometryData::IsInitializedImpl,
            &SSL_GeometryData::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<SSL_GeometryData>(),
            ::google::protobuf::Message::GetNewImpl<SSL_GeometryData>(),
            ::google::protobuf::Message::GetClearImpl<SSL_GeometryData>(), &SSL_GeometryData::ByteSizeLong,
                &SSL_GeometryData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_._cached_size_),
            false,
        },
        &SSL_GeometryData::kDescriptorMethods,
        &descriptor_table_ssl_5fvision_5fgeometry_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* SSL_GeometryData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> SSL_GeometryData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_GeometryData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required .SSL_GeometryFieldSize field = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.field_)}},
    // repeated .SSL_GeometryCameraCalibration calib = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.calib_)}},
    // optional .SSL_GeometryModels models = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.models_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required .SSL_GeometryFieldSize field = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.field_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .SSL_GeometryCameraCalibration calib = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.calib_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .SSL_GeometryModels models = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.models_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SSL_GeometryFieldSize>()},
    {::_pbi::TcParser::GetTable<::SSL_GeometryCameraCalibration>()},
    {::_pbi::TcParser::GetTable<::SSL_GeometryModels>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.calib_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.field_ != nullptr);
      _impl_.field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.models_ != nullptr);
      _impl_.models_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SSL_GeometryData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SSL_GeometryData& this_ = static_cast<const SSL_GeometryData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SSL_GeometryData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SSL_GeometryData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required .SSL_GeometryFieldSize field = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.field_, this_._impl_.field_->GetCachedSize(), target,
                stream);
          }

          // repeated .SSL_GeometryCameraCalibration calib = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_calib_size());
               i < n; i++) {
            const auto& repfield = this_._internal_calib().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // optional .SSL_GeometryModels models = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.models_, this_._impl_.models_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SSL_GeometryData::ByteSizeLong(const MessageLite& base) {
          const SSL_GeometryData& this_ = static_cast<const SSL_GeometryData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SSL_GeometryData::ByteSizeLong() const {
          const SSL_GeometryData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .SSL_GeometryCameraCalibration calib = 2;
             {
              total_size += 1UL * this_._internal_calib_size();
              for (const auto& msg : this_._internal_calib()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // required .SSL_GeometryFieldSize field = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.field_);
            }
          }
           {
            // optional .SSL_GeometryModels models = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.models_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SSL_GeometryData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_GeometryData*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_calib()->MergeFrom(
      from._internal_calib());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.field_ != nullptr);
      if (_this->_impl_.field_ == nullptr) {
        _this->_impl_.field_ =
            ::google::protobuf::Message::CopyConstruct<::SSL_GeometryFieldSize>(arena, *from._impl_.field_);
      } else {
        _this->_impl_.field_->MergeFrom(*from._impl_.field_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.models_ != nullptr);
      if (_this->_impl_.models_ == nullptr) {
        _this->_impl_.models_ =
            ::google::protobuf::Message::CopyConstruct<::SSL_GeometryModels>(arena, *from._impl_.models_);
      } else {
        _this->_impl_.models_->MergeFrom(*from._impl_.models_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_GeometryData::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_GeometryData&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_calib()))
    return false;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._impl_.field_->IsInitialized()) return false;
  }
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._impl_.models_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::InternalSwap(SSL_GeometryData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.calib_.InternalSwap(&other->_impl_.calib_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.models_)
      + sizeof(SSL_GeometryData::_impl_.models_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ssl_5fvision_5fgeometry_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
