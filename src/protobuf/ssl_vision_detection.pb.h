// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_vision_detection.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fdetection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ssl_5fvision_5fdetection_2eproto;
class SSL_DetectionBall;
struct SSL_DetectionBallDefaultTypeInternal;
extern SSL_DetectionBallDefaultTypeInternal _SSL_DetectionBall_default_instance_;
class SSL_DetectionFrame;
struct SSL_DetectionFrameDefaultTypeInternal;
extern SSL_DetectionFrameDefaultTypeInternal _SSL_DetectionFrame_default_instance_;
class SSL_DetectionRobot;
struct SSL_DetectionRobotDefaultTypeInternal;
extern SSL_DetectionRobotDefaultTypeInternal _SSL_DetectionRobot_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class SSL_DetectionRobot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_DetectionRobot) */ {
 public:
  inline SSL_DetectionRobot() : SSL_DetectionRobot(nullptr) {}
  ~SSL_DetectionRobot() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_DetectionRobot(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_DetectionRobot(const SSL_DetectionRobot& from) : SSL_DetectionRobot(nullptr, from) {}
  inline SSL_DetectionRobot(SSL_DetectionRobot&& from) noexcept
      : SSL_DetectionRobot(nullptr, std::move(from)) {}
  inline SSL_DetectionRobot& operator=(const SSL_DetectionRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionRobot& operator=(SSL_DetectionRobot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_DetectionRobot& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionRobot* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionRobot*>(
        &_SSL_DetectionRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SSL_DetectionRobot& a, SSL_DetectionRobot& b) { a.Swap(&b); }
  inline void Swap(SSL_DetectionRobot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionRobot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_DetectionRobot* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SSL_DetectionRobot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_DetectionRobot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_DetectionRobot& from) { SSL_DetectionRobot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_DetectionRobot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_DetectionRobot"; }

 protected:
  explicit SSL_DetectionRobot(::google::protobuf::Arena* arena);
  SSL_DetectionRobot(::google::protobuf::Arena* arena, const SSL_DetectionRobot& from);
  SSL_DetectionRobot(::google::protobuf::Arena* arena, SSL_DetectionRobot&& from) noexcept
      : SSL_DetectionRobot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 1,
    kRobotIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kPixelXFieldNumber = 6,
    kPixelYFieldNumber = 7,
    kHeightFieldNumber = 8,
  };
  // required float confidence = 1;
  bool has_confidence() const;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // optional uint32 robot_id = 2;
  bool has_robot_id() const;
  void clear_robot_id() ;
  ::uint32_t robot_id() const;
  void set_robot_id(::uint32_t value);

  private:
  ::uint32_t _internal_robot_id() const;
  void _internal_set_robot_id(::uint32_t value);

  public:
  // required float x = 3;
  bool has_x() const;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // required float y = 4;
  bool has_y() const;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // optional float orientation = 5;
  bool has_orientation() const;
  void clear_orientation() ;
  float orientation() const;
  void set_orientation(float value);

  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);

  public:
  // required float pixel_x = 6;
  bool has_pixel_x() const;
  void clear_pixel_x() ;
  float pixel_x() const;
  void set_pixel_x(float value);

  private:
  float _internal_pixel_x() const;
  void _internal_set_pixel_x(float value);

  public:
  // required float pixel_y = 7;
  bool has_pixel_y() const;
  void clear_pixel_y() ;
  float pixel_y() const;
  void set_pixel_y(float value);

  private:
  float _internal_pixel_y() const;
  void _internal_set_pixel_y(float value);

  public:
  // optional float height = 8;
  bool has_height() const;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_DetectionRobot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_DetectionRobot_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_DetectionRobot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float confidence_;
    ::uint32_t robot_id_;
    float x_;
    float y_;
    float orientation_;
    float pixel_x_;
    float pixel_y_;
    float height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class SSL_DetectionBall final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_DetectionBall) */ {
 public:
  inline SSL_DetectionBall() : SSL_DetectionBall(nullptr) {}
  ~SSL_DetectionBall() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_DetectionBall(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_DetectionBall(const SSL_DetectionBall& from) : SSL_DetectionBall(nullptr, from) {}
  inline SSL_DetectionBall(SSL_DetectionBall&& from) noexcept
      : SSL_DetectionBall(nullptr, std::move(from)) {}
  inline SSL_DetectionBall& operator=(const SSL_DetectionBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionBall& operator=(SSL_DetectionBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_DetectionBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionBall* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionBall*>(
        &_SSL_DetectionBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SSL_DetectionBall& a, SSL_DetectionBall& b) { a.Swap(&b); }
  inline void Swap(SSL_DetectionBall* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionBall* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_DetectionBall* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SSL_DetectionBall>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_DetectionBall& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_DetectionBall& from) { SSL_DetectionBall::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_DetectionBall* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_DetectionBall"; }

 protected:
  explicit SSL_DetectionBall(::google::protobuf::Arena* arena);
  SSL_DetectionBall(::google::protobuf::Arena* arena, const SSL_DetectionBall& from);
  SSL_DetectionBall(::google::protobuf::Arena* arena, SSL_DetectionBall&& from) noexcept
      : SSL_DetectionBall(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfidenceFieldNumber = 1,
    kAreaFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kPixelXFieldNumber = 6,
    kPixelYFieldNumber = 7,
  };
  // required float confidence = 1;
  bool has_confidence() const;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // optional uint32 area = 2;
  bool has_area() const;
  void clear_area() ;
  ::uint32_t area() const;
  void set_area(::uint32_t value);

  private:
  ::uint32_t _internal_area() const;
  void _internal_set_area(::uint32_t value);

  public:
  // required float x = 3;
  bool has_x() const;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // required float y = 4;
  bool has_y() const;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // optional float z = 5;
  bool has_z() const;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // required float pixel_x = 6;
  bool has_pixel_x() const;
  void clear_pixel_x() ;
  float pixel_x() const;
  void set_pixel_x(float value);

  private:
  float _internal_pixel_x() const;
  void _internal_set_pixel_x(float value);

  public:
  // required float pixel_y = 7;
  bool has_pixel_y() const;
  void clear_pixel_y() ;
  float pixel_y() const;
  void set_pixel_y(float value);

  private:
  float _internal_pixel_y() const;
  void _internal_set_pixel_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_DetectionBall)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_DetectionBall_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_DetectionBall& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float confidence_;
    ::uint32_t area_;
    float x_;
    float y_;
    float z_;
    float pixel_x_;
    float pixel_y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class SSL_DetectionFrame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SSL_DetectionFrame) */ {
 public:
  inline SSL_DetectionFrame() : SSL_DetectionFrame(nullptr) {}
  ~SSL_DetectionFrame() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SSL_DetectionFrame(
      ::google::protobuf::internal::ConstantInitialized);

  inline SSL_DetectionFrame(const SSL_DetectionFrame& from) : SSL_DetectionFrame(nullptr, from) {}
  inline SSL_DetectionFrame(SSL_DetectionFrame&& from) noexcept
      : SSL_DetectionFrame(nullptr, std::move(from)) {}
  inline SSL_DetectionFrame& operator=(const SSL_DetectionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_DetectionFrame& operator=(SSL_DetectionFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_DetectionFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_DetectionFrame* internal_default_instance() {
    return reinterpret_cast<const SSL_DetectionFrame*>(
        &_SSL_DetectionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SSL_DetectionFrame& a, SSL_DetectionFrame& b) { a.Swap(&b); }
  inline void Swap(SSL_DetectionFrame* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_DetectionFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_DetectionFrame* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<SSL_DetectionFrame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SSL_DetectionFrame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SSL_DetectionFrame& from) { SSL_DetectionFrame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SSL_DetectionFrame* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SSL_DetectionFrame"; }

 protected:
  explicit SSL_DetectionFrame(::google::protobuf::Arena* arena);
  SSL_DetectionFrame(::google::protobuf::Arena* arena, const SSL_DetectionFrame& from);
  SSL_DetectionFrame(::google::protobuf::Arena* arena, SSL_DetectionFrame&& from) noexcept
      : SSL_DetectionFrame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBallsFieldNumber = 5,
    kRobotsYellowFieldNumber = 6,
    kRobotsBlueFieldNumber = 7,
    kTCaptureFieldNumber = 2,
    kFrameNumberFieldNumber = 1,
    kCameraIdFieldNumber = 4,
    kTSentFieldNumber = 3,
  };
  // repeated .SSL_DetectionBall balls = 5;
  int balls_size() const;
  private:
  int _internal_balls_size() const;

  public:
  void clear_balls() ;
  ::SSL_DetectionBall* mutable_balls(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>* mutable_balls();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>& _internal_balls() const;
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>* _internal_mutable_balls();
  public:
  const ::SSL_DetectionBall& balls(int index) const;
  ::SSL_DetectionBall* add_balls();
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>& balls() const;
  // repeated .SSL_DetectionRobot robots_yellow = 6;
  int robots_yellow_size() const;
  private:
  int _internal_robots_yellow_size() const;

  public:
  void clear_robots_yellow() ;
  ::SSL_DetectionRobot* mutable_robots_yellow(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* mutable_robots_yellow();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& _internal_robots_yellow() const;
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* _internal_mutable_robots_yellow();
  public:
  const ::SSL_DetectionRobot& robots_yellow(int index) const;
  ::SSL_DetectionRobot* add_robots_yellow();
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& robots_yellow() const;
  // repeated .SSL_DetectionRobot robots_blue = 7;
  int robots_blue_size() const;
  private:
  int _internal_robots_blue_size() const;

  public:
  void clear_robots_blue() ;
  ::SSL_DetectionRobot* mutable_robots_blue(int index);
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* mutable_robots_blue();

  private:
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& _internal_robots_blue() const;
  ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* _internal_mutable_robots_blue();
  public:
  const ::SSL_DetectionRobot& robots_blue(int index) const;
  ::SSL_DetectionRobot* add_robots_blue();
  const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& robots_blue() const;
  // required double t_capture = 2;
  bool has_t_capture() const;
  void clear_t_capture() ;
  double t_capture() const;
  void set_t_capture(double value);

  private:
  double _internal_t_capture() const;
  void _internal_set_t_capture(double value);

  public:
  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  void clear_frame_number() ;
  ::uint32_t frame_number() const;
  void set_frame_number(::uint32_t value);

  private:
  ::uint32_t _internal_frame_number() const;
  void _internal_set_frame_number(::uint32_t value);

  public:
  // required uint32 camera_id = 4;
  bool has_camera_id() const;
  void clear_camera_id() ;
  ::uint32_t camera_id() const;
  void set_camera_id(::uint32_t value);

  private:
  ::uint32_t _internal_camera_id() const;
  void _internal_set_camera_id(::uint32_t value);

  public:
  // required double t_sent = 3;
  bool has_t_sent() const;
  void clear_t_sent() ;
  double t_sent() const;
  void set_t_sent(double value);

  private:
  double _internal_t_sent() const;
  void _internal_set_t_sent(double value);

  public:
  // @@protoc_insertion_point(class_scope:SSL_DetectionFrame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SSL_DetectionFrame_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SSL_DetectionFrame& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall > balls_;
    ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot > robots_yellow_;
    ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot > robots_blue_;
    double t_capture_;
    ::uint32_t frame_number_;
    ::uint32_t camera_id_;
    double t_sent_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SSL_DetectionBall

// required float confidence = 1;
inline bool SSL_DetectionBall::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SSL_DetectionBall::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.confidence)
  return _internal_confidence();
}
inline void SSL_DetectionBall::set_confidence(float value) {
  _internal_set_confidence(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.confidence)
}
inline float SSL_DetectionBall::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void SSL_DetectionBall::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// optional uint32 area = 2;
inline bool SSL_DetectionBall::has_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.area_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SSL_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.area)
  return _internal_area();
}
inline void SSL_DetectionBall::set_area(::uint32_t value) {
  _internal_set_area(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.area)
}
inline ::uint32_t SSL_DetectionBall::_internal_area() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.area_;
}
inline void SSL_DetectionBall::_internal_set_area(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.area_ = value;
}

// required float x = 3;
inline bool SSL_DetectionBall::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.x)
  return _internal_x();
}
inline void SSL_DetectionBall::set_x(float value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.x)
}
inline float SSL_DetectionBall::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void SSL_DetectionBall::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// required float y = 4;
inline bool SSL_DetectionBall::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.y)
  return _internal_y();
}
inline void SSL_DetectionBall::set_y(float value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.y)
}
inline float SSL_DetectionBall::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void SSL_DetectionBall::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// optional float z = 5;
inline bool SSL_DetectionBall::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_DetectionBall::z() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.z)
  return _internal_z();
}
inline void SSL_DetectionBall::set_z(float value) {
  _internal_set_z(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.z)
}
inline float SSL_DetectionBall::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void SSL_DetectionBall::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// required float pixel_x = 6;
inline bool SSL_DetectionBall::has_pixel_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_pixel_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_DetectionBall::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_x)
  return _internal_pixel_x();
}
inline void SSL_DetectionBall::set_pixel_x(float value) {
  _internal_set_pixel_x(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_x)
}
inline float SSL_DetectionBall::_internal_pixel_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_x_;
}
inline void SSL_DetectionBall::_internal_set_pixel_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_x_ = value;
}

// required float pixel_y = 7;
inline bool SSL_DetectionBall::has_pixel_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SSL_DetectionBall::clear_pixel_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float SSL_DetectionBall::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_y)
  return _internal_pixel_y();
}
inline void SSL_DetectionBall::set_pixel_y(float value) {
  _internal_set_pixel_y(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_y)
}
inline float SSL_DetectionBall::_internal_pixel_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_y_;
}
inline void SSL_DetectionBall::_internal_set_pixel_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_y_ = value;
}

// -------------------------------------------------------------------

// SSL_DetectionRobot

// required float confidence = 1;
inline bool SSL_DetectionRobot::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float SSL_DetectionRobot::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.confidence)
  return _internal_confidence();
}
inline void SSL_DetectionRobot::set_confidence(float value) {
  _internal_set_confidence(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.confidence)
}
inline float SSL_DetectionRobot::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void SSL_DetectionRobot::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// optional uint32 robot_id = 2;
inline bool SSL_DetectionRobot::has_robot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_robot_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SSL_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.robot_id)
  return _internal_robot_id();
}
inline void SSL_DetectionRobot::set_robot_id(::uint32_t value) {
  _internal_set_robot_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.robot_id)
}
inline ::uint32_t SSL_DetectionRobot::_internal_robot_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.robot_id_;
}
inline void SSL_DetectionRobot::_internal_set_robot_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robot_id_ = value;
}

// required float x = 3;
inline bool SSL_DetectionRobot::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.x)
  return _internal_x();
}
inline void SSL_DetectionRobot::set_x(float value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.x)
}
inline float SSL_DetectionRobot::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void SSL_DetectionRobot::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// required float y = 4;
inline bool SSL_DetectionRobot::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.y)
  return _internal_y();
}
inline void SSL_DetectionRobot::set_y(float value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.y)
}
inline float SSL_DetectionRobot::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void SSL_DetectionRobot::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// optional float orientation = 5;
inline bool SSL_DetectionRobot::has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.orientation)
  return _internal_orientation();
}
inline void SSL_DetectionRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.orientation)
}
inline float SSL_DetectionRobot::_internal_orientation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orientation_;
}
inline void SSL_DetectionRobot::_internal_set_orientation(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orientation_ = value;
}

// required float pixel_x = 6;
inline bool SSL_DetectionRobot::has_pixel_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_pixel_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_DetectionRobot::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_x)
  return _internal_pixel_x();
}
inline void SSL_DetectionRobot::set_pixel_x(float value) {
  _internal_set_pixel_x(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_x)
}
inline float SSL_DetectionRobot::_internal_pixel_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_x_;
}
inline void SSL_DetectionRobot::_internal_set_pixel_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_x_ = value;
}

// required float pixel_y = 7;
inline bool SSL_DetectionRobot::has_pixel_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_pixel_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float SSL_DetectionRobot::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_y)
  return _internal_pixel_y();
}
inline void SSL_DetectionRobot::set_pixel_y(float value) {
  _internal_set_pixel_y(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_y)
}
inline float SSL_DetectionRobot::_internal_pixel_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixel_y_;
}
inline void SSL_DetectionRobot::_internal_set_pixel_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixel_y_ = value;
}

// optional float height = 8;
inline bool SSL_DetectionRobot::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SSL_DetectionRobot::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float SSL_DetectionRobot::height() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.height)
  return _internal_height();
}
inline void SSL_DetectionRobot::set_height(float value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.height)
}
inline float SSL_DetectionRobot::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void SSL_DetectionRobot::_internal_set_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// SSL_DetectionFrame

// required uint32 frame_number = 1;
inline bool SSL_DetectionFrame::has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SSL_DetectionFrame::clear_frame_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SSL_DetectionFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.frame_number)
  return _internal_frame_number();
}
inline void SSL_DetectionFrame::set_frame_number(::uint32_t value) {
  _internal_set_frame_number(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.frame_number)
}
inline ::uint32_t SSL_DetectionFrame::_internal_frame_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_number_;
}
inline void SSL_DetectionFrame::_internal_set_frame_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = value;
}

// required double t_capture = 2;
inline bool SSL_DetectionFrame::has_t_capture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SSL_DetectionFrame::clear_t_capture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_capture_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SSL_DetectionFrame::t_capture() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_capture)
  return _internal_t_capture();
}
inline void SSL_DetectionFrame::set_t_capture(double value) {
  _internal_set_t_capture(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_capture)
}
inline double SSL_DetectionFrame::_internal_t_capture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.t_capture_;
}
inline void SSL_DetectionFrame::_internal_set_t_capture(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_capture_ = value;
}

// required double t_sent = 3;
inline bool SSL_DetectionFrame::has_t_sent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SSL_DetectionFrame::clear_t_sent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_sent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SSL_DetectionFrame::t_sent() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_sent)
  return _internal_t_sent();
}
inline void SSL_DetectionFrame::set_t_sent(double value) {
  _internal_set_t_sent(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_sent)
}
inline double SSL_DetectionFrame::_internal_t_sent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.t_sent_;
}
inline void SSL_DetectionFrame::_internal_set_t_sent(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.t_sent_ = value;
}

// required uint32 camera_id = 4;
inline bool SSL_DetectionFrame::has_camera_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SSL_DetectionFrame::clear_camera_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SSL_DetectionFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.camera_id)
  return _internal_camera_id();
}
inline void SSL_DetectionFrame::set_camera_id(::uint32_t value) {
  _internal_set_camera_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.camera_id)
}
inline ::uint32_t SSL_DetectionFrame::_internal_camera_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.camera_id_;
}
inline void SSL_DetectionFrame::_internal_set_camera_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.camera_id_ = value;
}

// repeated .SSL_DetectionBall balls = 5;
inline int SSL_DetectionFrame::_internal_balls_size() const {
  return _internal_balls().size();
}
inline int SSL_DetectionFrame::balls_size() const {
  return _internal_balls_size();
}
inline void SSL_DetectionFrame::clear_balls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balls_.Clear();
}
inline ::SSL_DetectionBall* SSL_DetectionFrame::mutable_balls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.balls)
  return _internal_mutable_balls()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>* SSL_DetectionFrame::mutable_balls()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.balls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_balls();
}
inline const ::SSL_DetectionBall& SSL_DetectionFrame::balls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.balls)
  return _internal_balls().Get(index);
}
inline ::SSL_DetectionBall* SSL_DetectionFrame::add_balls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_DetectionBall* _add = _internal_mutable_balls()->Add();
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.balls)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>& SSL_DetectionFrame::balls() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.balls)
  return _internal_balls();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>&
SSL_DetectionFrame::_internal_balls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.balls_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionBall>*
SSL_DetectionFrame::_internal_mutable_balls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.balls_;
}

// repeated .SSL_DetectionRobot robots_yellow = 6;
inline int SSL_DetectionFrame::_internal_robots_yellow_size() const {
  return _internal_robots_yellow().size();
}
inline int SSL_DetectionFrame::robots_yellow_size() const {
  return _internal_robots_yellow_size();
}
inline void SSL_DetectionFrame::clear_robots_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robots_yellow_.Clear();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_yellow(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_yellow)
  return _internal_mutable_robots_yellow()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* SSL_DetectionFrame::mutable_robots_yellow()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_yellow)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_robots_yellow();
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_yellow(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_yellow)
  return _internal_robots_yellow().Get(index);
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_yellow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_DetectionRobot* _add = _internal_mutable_robots_yellow()->Add();
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_yellow)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& SSL_DetectionFrame::robots_yellow() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_yellow)
  return _internal_robots_yellow();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>&
SSL_DetectionFrame::_internal_robots_yellow() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.robots_yellow_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>*
SSL_DetectionFrame::_internal_mutable_robots_yellow() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.robots_yellow_;
}

// repeated .SSL_DetectionRobot robots_blue = 7;
inline int SSL_DetectionFrame::_internal_robots_blue_size() const {
  return _internal_robots_blue().size();
}
inline int SSL_DetectionFrame::robots_blue_size() const {
  return _internal_robots_blue_size();
}
inline void SSL_DetectionFrame::clear_robots_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.robots_blue_.Clear();
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_blue(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_blue)
  return _internal_mutable_robots_blue()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>* SSL_DetectionFrame::mutable_robots_blue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_blue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_robots_blue();
}
inline const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_blue(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_blue)
  return _internal_robots_blue().Get(index);
}
inline ::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_blue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SSL_DetectionRobot* _add = _internal_mutable_robots_blue()->Add();
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_blue)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>& SSL_DetectionFrame::robots_blue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_blue)
  return _internal_robots_blue();
}
inline const ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>&
SSL_DetectionFrame::_internal_robots_blue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.robots_blue_;
}
inline ::google::protobuf::RepeatedPtrField<::SSL_DetectionRobot>*
SSL_DetectionFrame::_internal_mutable_robots_blue() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.robots_blue_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_2eproto_2epb_2eh
