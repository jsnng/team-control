// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_gc_game_event.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fgame_5fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fgame_5fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ssl_gc_common.pb.h"
#include "ssl_gc_geometry.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgame_5fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgc_5fgame_5fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto;
class GameEvent;
struct GameEventDefaultTypeInternal;
extern GameEventDefaultTypeInternal _GameEvent_default_instance_;
class GameEvent_AimlessKick;
struct GameEvent_AimlessKickDefaultTypeInternal;
extern GameEvent_AimlessKickDefaultTypeInternal _GameEvent_AimlessKick_default_instance_;
class GameEvent_AttackerDoubleTouchedBall;
struct GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal;
extern GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal _GameEvent_AttackerDoubleTouchedBall_default_instance_;
class GameEvent_AttackerTooCloseToDefenseArea;
struct GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
class GameEvent_AttackerTouchedBallInDefenseArea;
struct GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
class GameEvent_AttackerTouchedOpponentInDefenseArea;
struct GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal;
extern GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
class GameEvent_BallLeftField;
struct GameEvent_BallLeftFieldDefaultTypeInternal;
extern GameEvent_BallLeftFieldDefaultTypeInternal _GameEvent_BallLeftField_default_instance_;
class GameEvent_BotCrashDrawn;
struct GameEvent_BotCrashDrawnDefaultTypeInternal;
extern GameEvent_BotCrashDrawnDefaultTypeInternal _GameEvent_BotCrashDrawn_default_instance_;
class GameEvent_BotCrashUnique;
struct GameEvent_BotCrashUniqueDefaultTypeInternal;
extern GameEvent_BotCrashUniqueDefaultTypeInternal _GameEvent_BotCrashUnique_default_instance_;
class GameEvent_BotDribbledBallTooFar;
struct GameEvent_BotDribbledBallTooFarDefaultTypeInternal;
extern GameEvent_BotDribbledBallTooFarDefaultTypeInternal _GameEvent_BotDribbledBallTooFar_default_instance_;
class GameEvent_BotDroppedParts;
struct GameEvent_BotDroppedPartsDefaultTypeInternal;
extern GameEvent_BotDroppedPartsDefaultTypeInternal _GameEvent_BotDroppedParts_default_instance_;
class GameEvent_BotHeldBallDeliberately;
struct GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal;
extern GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal _GameEvent_BotHeldBallDeliberately_default_instance_;
class GameEvent_BotInterferedPlacement;
struct GameEvent_BotInterferedPlacementDefaultTypeInternal;
extern GameEvent_BotInterferedPlacementDefaultTypeInternal _GameEvent_BotInterferedPlacement_default_instance_;
class GameEvent_BotKickedBallTooFast;
struct GameEvent_BotKickedBallTooFastDefaultTypeInternal;
extern GameEvent_BotKickedBallTooFastDefaultTypeInternal _GameEvent_BotKickedBallTooFast_default_instance_;
class GameEvent_BotPushedBot;
struct GameEvent_BotPushedBotDefaultTypeInternal;
extern GameEvent_BotPushedBotDefaultTypeInternal _GameEvent_BotPushedBot_default_instance_;
class GameEvent_BotSubstitution;
struct GameEvent_BotSubstitutionDefaultTypeInternal;
extern GameEvent_BotSubstitutionDefaultTypeInternal _GameEvent_BotSubstitution_default_instance_;
class GameEvent_BotTippedOver;
struct GameEvent_BotTippedOverDefaultTypeInternal;
extern GameEvent_BotTippedOverDefaultTypeInternal _GameEvent_BotTippedOver_default_instance_;
class GameEvent_BotTooFastInStop;
struct GameEvent_BotTooFastInStopDefaultTypeInternal;
extern GameEvent_BotTooFastInStopDefaultTypeInternal _GameEvent_BotTooFastInStop_default_instance_;
class GameEvent_BoundaryCrossing;
struct GameEvent_BoundaryCrossingDefaultTypeInternal;
extern GameEvent_BoundaryCrossingDefaultTypeInternal _GameEvent_BoundaryCrossing_default_instance_;
class GameEvent_ChallengeFlag;
struct GameEvent_ChallengeFlagDefaultTypeInternal;
extern GameEvent_ChallengeFlagDefaultTypeInternal _GameEvent_ChallengeFlag_default_instance_;
class GameEvent_ChallengeFlagHandled;
struct GameEvent_ChallengeFlagHandledDefaultTypeInternal;
extern GameEvent_ChallengeFlagHandledDefaultTypeInternal _GameEvent_ChallengeFlagHandled_default_instance_;
class GameEvent_ChippedGoal;
struct GameEvent_ChippedGoalDefaultTypeInternal;
extern GameEvent_ChippedGoalDefaultTypeInternal _GameEvent_ChippedGoal_default_instance_;
class GameEvent_DefenderInDefenseArea;
struct GameEvent_DefenderInDefenseAreaDefaultTypeInternal;
extern GameEvent_DefenderInDefenseAreaDefaultTypeInternal _GameEvent_DefenderInDefenseArea_default_instance_;
class GameEvent_DefenderInDefenseAreaPartially;
struct GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal;
extern GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
class GameEvent_DefenderTooCloseToKickPoint;
struct GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal;
extern GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
class GameEvent_EmergencyStop;
struct GameEvent_EmergencyStopDefaultTypeInternal;
extern GameEvent_EmergencyStopDefaultTypeInternal _GameEvent_EmergencyStop_default_instance_;
class GameEvent_ExcessiveBotSubstitution;
struct GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal;
extern GameEvent_ExcessiveBotSubstitutionDefaultTypeInternal _GameEvent_ExcessiveBotSubstitution_default_instance_;
class GameEvent_Goal;
struct GameEvent_GoalDefaultTypeInternal;
extern GameEvent_GoalDefaultTypeInternal _GameEvent_Goal_default_instance_;
class GameEvent_IndirectGoal;
struct GameEvent_IndirectGoalDefaultTypeInternal;
extern GameEvent_IndirectGoalDefaultTypeInternal _GameEvent_IndirectGoal_default_instance_;
class GameEvent_KeeperHeldBall;
struct GameEvent_KeeperHeldBallDefaultTypeInternal;
extern GameEvent_KeeperHeldBallDefaultTypeInternal _GameEvent_KeeperHeldBall_default_instance_;
class GameEvent_KickTimeout;
struct GameEvent_KickTimeoutDefaultTypeInternal;
extern GameEvent_KickTimeoutDefaultTypeInternal _GameEvent_KickTimeout_default_instance_;
class GameEvent_MultipleCards;
struct GameEvent_MultipleCardsDefaultTypeInternal;
extern GameEvent_MultipleCardsDefaultTypeInternal _GameEvent_MultipleCards_default_instance_;
class GameEvent_MultipleFouls;
struct GameEvent_MultipleFoulsDefaultTypeInternal;
extern GameEvent_MultipleFoulsDefaultTypeInternal _GameEvent_MultipleFouls_default_instance_;
class GameEvent_MultiplePlacementFailures;
struct GameEvent_MultiplePlacementFailuresDefaultTypeInternal;
extern GameEvent_MultiplePlacementFailuresDefaultTypeInternal _GameEvent_MultiplePlacementFailures_default_instance_;
class GameEvent_NoProgressInGame;
struct GameEvent_NoProgressInGameDefaultTypeInternal;
extern GameEvent_NoProgressInGameDefaultTypeInternal _GameEvent_NoProgressInGame_default_instance_;
class GameEvent_PenaltyKickFailed;
struct GameEvent_PenaltyKickFailedDefaultTypeInternal;
extern GameEvent_PenaltyKickFailedDefaultTypeInternal _GameEvent_PenaltyKickFailed_default_instance_;
class GameEvent_PlacementFailed;
struct GameEvent_PlacementFailedDefaultTypeInternal;
extern GameEvent_PlacementFailedDefaultTypeInternal _GameEvent_PlacementFailed_default_instance_;
class GameEvent_PlacementSucceeded;
struct GameEvent_PlacementSucceededDefaultTypeInternal;
extern GameEvent_PlacementSucceededDefaultTypeInternal _GameEvent_PlacementSucceeded_default_instance_;
class GameEvent_Prepared;
struct GameEvent_PreparedDefaultTypeInternal;
extern GameEvent_PreparedDefaultTypeInternal _GameEvent_Prepared_default_instance_;
class GameEvent_TooManyRobots;
struct GameEvent_TooManyRobotsDefaultTypeInternal;
extern GameEvent_TooManyRobotsDefaultTypeInternal _GameEvent_TooManyRobots_default_instance_;
class GameEvent_UnsportingBehaviorMajor;
struct GameEvent_UnsportingBehaviorMajorDefaultTypeInternal;
extern GameEvent_UnsportingBehaviorMajorDefaultTypeInternal _GameEvent_UnsportingBehaviorMajor_default_instance_;
class GameEvent_UnsportingBehaviorMinor;
struct GameEvent_UnsportingBehaviorMinorDefaultTypeInternal;
extern GameEvent_UnsportingBehaviorMinorDefaultTypeInternal _GameEvent_UnsportingBehaviorMinor_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum GameEvent_Type : int {
  GameEvent_Type_UNKNOWN_GAME_EVENT_TYPE = 0,
  GameEvent_Type_BALL_LEFT_FIELD_TOUCH_LINE = 6,
  GameEvent_Type_BALL_LEFT_FIELD_GOAL_LINE = 7,
  GameEvent_Type_AIMLESS_KICK = 11,
  GameEvent_Type_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19,
  GameEvent_Type_DEFENDER_IN_DEFENSE_AREA = 31,
  GameEvent_Type_BOUNDARY_CROSSING = 41,
  GameEvent_Type_KEEPER_HELD_BALL = 13,
  GameEvent_Type_BOT_DRIBBLED_BALL_TOO_FAR = 17,
  GameEvent_Type_BOT_PUSHED_BOT = 24,
  GameEvent_Type_BOT_HELD_BALL_DELIBERATELY = 26,
  GameEvent_Type_BOT_TIPPED_OVER = 27,
  GameEvent_Type_BOT_DROPPED_PARTS = 47,
  GameEvent_Type_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15,
  GameEvent_Type_BOT_KICKED_BALL_TOO_FAST = 18,
  GameEvent_Type_BOT_CRASH_UNIQUE = 22,
  GameEvent_Type_BOT_CRASH_DRAWN = 21,
  GameEvent_Type_DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29,
  GameEvent_Type_BOT_TOO_FAST_IN_STOP = 28,
  GameEvent_Type_BOT_INTERFERED_PLACEMENT = 20,
  GameEvent_Type_EXCESSIVE_BOT_SUBSTITUTION = 48,
  GameEvent_Type_POSSIBLE_GOAL = 39,
  GameEvent_Type_GOAL = 8,
  GameEvent_Type_INVALID_GOAL = 42,
  GameEvent_Type_ATTACKER_DOUBLE_TOUCHED_BALL = 14,
  GameEvent_Type_PLACEMENT_SUCCEEDED = 5,
  GameEvent_Type_PENALTY_KICK_FAILED = 43,
  GameEvent_Type_NO_PROGRESS_IN_GAME = 2,
  GameEvent_Type_PLACEMENT_FAILED = 3,
  GameEvent_Type_MULTIPLE_CARDS = 32,
  GameEvent_Type_MULTIPLE_FOULS = 34,
  GameEvent_Type_BOT_SUBSTITUTION = 37,
  GameEvent_Type_TOO_MANY_ROBOTS = 38,
  GameEvent_Type_CHALLENGE_FLAG = 44,
  GameEvent_Type_CHALLENGE_FLAG_HANDLED = 46,
  GameEvent_Type_EMERGENCY_STOP = 45,
  GameEvent_Type_UNSPORTING_BEHAVIOR_MINOR = 35,
  GameEvent_Type_UNSPORTING_BEHAVIOR_MAJOR = 36,
  GameEvent_Type_PREPARED [[deprecated]] = 1,
  GameEvent_Type_INDIRECT_GOAL [[deprecated]] = 9,
  GameEvent_Type_CHIPPED_GOAL [[deprecated]] = 10,
  GameEvent_Type_KICK_TIMEOUT [[deprecated]] = 12,
  GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA [[deprecated]] = 16,
  GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED [[deprecated]] = 40,
  GameEvent_Type_BOT_CRASH_UNIQUE_SKIPPED [[deprecated]] = 23,
  GameEvent_Type_BOT_PUSHED_BOT_SKIPPED [[deprecated]] = 25,
  GameEvent_Type_DEFENDER_IN_DEFENSE_AREA_PARTIALLY [[deprecated]] = 30,
  GameEvent_Type_MULTIPLE_PLACEMENT_FAILURES [[deprecated]] = 33,
};

bool GameEvent_Type_IsValid(int value);
extern const uint32_t GameEvent_Type_internal_data_[];
constexpr GameEvent_Type GameEvent_Type_Type_MIN = static_cast<GameEvent_Type>(0);
constexpr GameEvent_Type GameEvent_Type_Type_MAX = static_cast<GameEvent_Type>(48);
constexpr int GameEvent_Type_Type_ARRAYSIZE = 48 + 1;
const ::google::protobuf::EnumDescriptor*
GameEvent_Type_descriptor();
template <typename T>
const std::string& GameEvent_Type_Name(T value) {
  static_assert(std::is_same<T, GameEvent_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return GameEvent_Type_Name(static_cast<GameEvent_Type>(value));
}
template <>
inline const std::string& GameEvent_Type_Name(GameEvent_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameEvent_Type_descriptor,
                                                 0, 48>(
      static_cast<int>(value));
}
inline bool GameEvent_Type_Parse(absl::string_view name, GameEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEvent_Type>(
      GameEvent_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GameEvent_UnsportingBehaviorMinor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.UnsportingBehaviorMinor) */ {
 public:
  inline GameEvent_UnsportingBehaviorMinor() : GameEvent_UnsportingBehaviorMinor(nullptr) {}
  ~GameEvent_UnsportingBehaviorMinor() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMinor(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from) : GameEvent_UnsportingBehaviorMinor(nullptr, from) {}
  inline GameEvent_UnsportingBehaviorMinor(GameEvent_UnsportingBehaviorMinor&& from) noexcept
      : GameEvent_UnsportingBehaviorMinor(nullptr, std::move(from)) {}
  inline GameEvent_UnsportingBehaviorMinor& operator=(const GameEvent_UnsportingBehaviorMinor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_UnsportingBehaviorMinor& operator=(GameEvent_UnsportingBehaviorMinor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_UnsportingBehaviorMinor& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_UnsportingBehaviorMinor* internal_default_instance() {
    return reinterpret_cast<const GameEvent_UnsportingBehaviorMinor*>(
        &_GameEvent_UnsportingBehaviorMinor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(GameEvent_UnsportingBehaviorMinor& a, GameEvent_UnsportingBehaviorMinor& b) { a.Swap(&b); }
  inline void Swap(GameEvent_UnsportingBehaviorMinor* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_UnsportingBehaviorMinor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_UnsportingBehaviorMinor* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_UnsportingBehaviorMinor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_UnsportingBehaviorMinor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_UnsportingBehaviorMinor& from) { GameEvent_UnsportingBehaviorMinor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_UnsportingBehaviorMinor* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.UnsportingBehaviorMinor"; }

 protected:
  explicit GameEvent_UnsportingBehaviorMinor(::google::protobuf::Arena* arena);
  GameEvent_UnsportingBehaviorMinor(::google::protobuf::Arena* arena, const GameEvent_UnsportingBehaviorMinor& from);
  GameEvent_UnsportingBehaviorMinor(::google::protobuf::Arena* arena, GameEvent_UnsportingBehaviorMinor&& from) noexcept
      : GameEvent_UnsportingBehaviorMinor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kByTeamFieldNumber = 1,
  };
  // required string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.UnsportingBehaviorMinor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_UnsportingBehaviorMinor_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_UnsportingBehaviorMinor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_UnsportingBehaviorMajor final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.UnsportingBehaviorMajor) */ {
 public:
  inline GameEvent_UnsportingBehaviorMajor() : GameEvent_UnsportingBehaviorMajor(nullptr) {}
  ~GameEvent_UnsportingBehaviorMajor() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMajor(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from) : GameEvent_UnsportingBehaviorMajor(nullptr, from) {}
  inline GameEvent_UnsportingBehaviorMajor(GameEvent_UnsportingBehaviorMajor&& from) noexcept
      : GameEvent_UnsportingBehaviorMajor(nullptr, std::move(from)) {}
  inline GameEvent_UnsportingBehaviorMajor& operator=(const GameEvent_UnsportingBehaviorMajor& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_UnsportingBehaviorMajor& operator=(GameEvent_UnsportingBehaviorMajor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_UnsportingBehaviorMajor& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_UnsportingBehaviorMajor* internal_default_instance() {
    return reinterpret_cast<const GameEvent_UnsportingBehaviorMajor*>(
        &_GameEvent_UnsportingBehaviorMajor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(GameEvent_UnsportingBehaviorMajor& a, GameEvent_UnsportingBehaviorMajor& b) { a.Swap(&b); }
  inline void Swap(GameEvent_UnsportingBehaviorMajor* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_UnsportingBehaviorMajor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_UnsportingBehaviorMajor* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_UnsportingBehaviorMajor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_UnsportingBehaviorMajor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_UnsportingBehaviorMajor& from) { GameEvent_UnsportingBehaviorMajor::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_UnsportingBehaviorMajor* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.UnsportingBehaviorMajor"; }

 protected:
  explicit GameEvent_UnsportingBehaviorMajor(::google::protobuf::Arena* arena);
  GameEvent_UnsportingBehaviorMajor(::google::protobuf::Arena* arena, const GameEvent_UnsportingBehaviorMajor& from);
  GameEvent_UnsportingBehaviorMajor(::google::protobuf::Arena* arena, GameEvent_UnsportingBehaviorMajor&& from) noexcept
      : GameEvent_UnsportingBehaviorMajor(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kByTeamFieldNumber = 1,
  };
  // required string reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.UnsportingBehaviorMajor)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_UnsportingBehaviorMajor_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_UnsportingBehaviorMajor& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_Prepared final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.Prepared) */ {
 public:
  inline GameEvent_Prepared() : GameEvent_Prepared(nullptr) {}
  ~GameEvent_Prepared() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_Prepared(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_Prepared(const GameEvent_Prepared& from) : GameEvent_Prepared(nullptr, from) {}
  inline GameEvent_Prepared(GameEvent_Prepared&& from) noexcept
      : GameEvent_Prepared(nullptr, std::move(from)) {}
  inline GameEvent_Prepared& operator=(const GameEvent_Prepared& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_Prepared& operator=(GameEvent_Prepared&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_Prepared& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_Prepared* internal_default_instance() {
    return reinterpret_cast<const GameEvent_Prepared*>(
        &_GameEvent_Prepared_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(GameEvent_Prepared& a, GameEvent_Prepared& b) { a.Swap(&b); }
  inline void Swap(GameEvent_Prepared* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_Prepared* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_Prepared* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_Prepared>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_Prepared& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_Prepared& from) { GameEvent_Prepared::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_Prepared* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.Prepared"; }

 protected:
  explicit GameEvent_Prepared(::google::protobuf::Arena* arena);
  GameEvent_Prepared(::google::protobuf::Arena* arena, const GameEvent_Prepared& from);
  GameEvent_Prepared(::google::protobuf::Arena* arena, GameEvent_Prepared&& from) noexcept
      : GameEvent_Prepared(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeTakenFieldNumber = 1,
  };
  // optional float time_taken = 1;
  bool has_time_taken() const;
  void clear_time_taken() ;
  float time_taken() const;
  void set_time_taken(float value);

  private:
  float _internal_time_taken() const;
  void _internal_set_time_taken(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.Prepared)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_Prepared_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_Prepared& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float time_taken_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_PlacementSucceeded final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.PlacementSucceeded) */ {
 public:
  inline GameEvent_PlacementSucceeded() : GameEvent_PlacementSucceeded(nullptr) {}
  ~GameEvent_PlacementSucceeded() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_PlacementSucceeded(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from) : GameEvent_PlacementSucceeded(nullptr, from) {}
  inline GameEvent_PlacementSucceeded(GameEvent_PlacementSucceeded&& from) noexcept
      : GameEvent_PlacementSucceeded(nullptr, std::move(from)) {}
  inline GameEvent_PlacementSucceeded& operator=(const GameEvent_PlacementSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_PlacementSucceeded& operator=(GameEvent_PlacementSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_PlacementSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_PlacementSucceeded* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PlacementSucceeded*>(
        &_GameEvent_PlacementSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(GameEvent_PlacementSucceeded& a, GameEvent_PlacementSucceeded& b) { a.Swap(&b); }
  inline void Swap(GameEvent_PlacementSucceeded* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_PlacementSucceeded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_PlacementSucceeded* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_PlacementSucceeded>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_PlacementSucceeded& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_PlacementSucceeded& from) { GameEvent_PlacementSucceeded::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_PlacementSucceeded* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.PlacementSucceeded"; }

 protected:
  explicit GameEvent_PlacementSucceeded(::google::protobuf::Arena* arena);
  GameEvent_PlacementSucceeded(::google::protobuf::Arena* arena, const GameEvent_PlacementSucceeded& from);
  GameEvent_PlacementSucceeded(::google::protobuf::Arena* arena, GameEvent_PlacementSucceeded&& from) noexcept
      : GameEvent_PlacementSucceeded(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
    kTimeTakenFieldNumber = 2,
    kPrecisionFieldNumber = 3,
    kDistanceFieldNumber = 4,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional float time_taken = 2;
  bool has_time_taken() const;
  void clear_time_taken() ;
  float time_taken() const;
  void set_time_taken(float value);

  private:
  float _internal_time_taken() const;
  void _internal_set_time_taken(float value);

  public:
  // optional float precision = 3;
  bool has_precision() const;
  void clear_precision() ;
  float precision() const;
  void set_precision(float value);

  private:
  float _internal_precision() const;
  void _internal_set_precision(float value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.PlacementSucceeded)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_PlacementSucceeded_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_PlacementSucceeded& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    float time_taken_;
    float precision_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_PlacementFailed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.PlacementFailed) */ {
 public:
  inline GameEvent_PlacementFailed() : GameEvent_PlacementFailed(nullptr) {}
  ~GameEvent_PlacementFailed() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_PlacementFailed(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from) : GameEvent_PlacementFailed(nullptr, from) {}
  inline GameEvent_PlacementFailed(GameEvent_PlacementFailed&& from) noexcept
      : GameEvent_PlacementFailed(nullptr, std::move(from)) {}
  inline GameEvent_PlacementFailed& operator=(const GameEvent_PlacementFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_PlacementFailed& operator=(GameEvent_PlacementFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_PlacementFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_PlacementFailed* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PlacementFailed*>(
        &_GameEvent_PlacementFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(GameEvent_PlacementFailed& a, GameEvent_PlacementFailed& b) { a.Swap(&b); }
  inline void Swap(GameEvent_PlacementFailed* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_PlacementFailed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_PlacementFailed* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_PlacementFailed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_PlacementFailed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_PlacementFailed& from) { GameEvent_PlacementFailed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_PlacementFailed* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.PlacementFailed"; }

 protected:
  explicit GameEvent_PlacementFailed(::google::protobuf::Arena* arena);
  GameEvent_PlacementFailed(::google::protobuf::Arena* arena, const GameEvent_PlacementFailed& from);
  GameEvent_PlacementFailed(::google::protobuf::Arena* arena, GameEvent_PlacementFailed&& from) noexcept
      : GameEvent_PlacementFailed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
    kRemainingDistanceFieldNumber = 2,
    kNearestOwnBotDistanceFieldNumber = 3,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional float remaining_distance = 2;
  bool has_remaining_distance() const;
  void clear_remaining_distance() ;
  float remaining_distance() const;
  void set_remaining_distance(float value);

  private:
  float _internal_remaining_distance() const;
  void _internal_set_remaining_distance(float value);

  public:
  // optional float nearest_own_bot_distance = 3;
  bool has_nearest_own_bot_distance() const;
  void clear_nearest_own_bot_distance() ;
  float nearest_own_bot_distance() const;
  void set_nearest_own_bot_distance(float value);

  private:
  float _internal_nearest_own_bot_distance() const;
  void _internal_set_nearest_own_bot_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.PlacementFailed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_PlacementFailed_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_PlacementFailed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    float remaining_distance_;
    float nearest_own_bot_distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_MultiplePlacementFailures final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.MultiplePlacementFailures) */ {
 public:
  inline GameEvent_MultiplePlacementFailures() : GameEvent_MultiplePlacementFailures(nullptr) {}
  ~GameEvent_MultiplePlacementFailures() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_MultiplePlacementFailures(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from) : GameEvent_MultiplePlacementFailures(nullptr, from) {}
  inline GameEvent_MultiplePlacementFailures(GameEvent_MultiplePlacementFailures&& from) noexcept
      : GameEvent_MultiplePlacementFailures(nullptr, std::move(from)) {}
  inline GameEvent_MultiplePlacementFailures& operator=(const GameEvent_MultiplePlacementFailures& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_MultiplePlacementFailures& operator=(GameEvent_MultiplePlacementFailures&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_MultiplePlacementFailures& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_MultiplePlacementFailures* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultiplePlacementFailures*>(
        &_GameEvent_MultiplePlacementFailures_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(GameEvent_MultiplePlacementFailures& a, GameEvent_MultiplePlacementFailures& b) { a.Swap(&b); }
  inline void Swap(GameEvent_MultiplePlacementFailures* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_MultiplePlacementFailures* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_MultiplePlacementFailures* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_MultiplePlacementFailures>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_MultiplePlacementFailures& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_MultiplePlacementFailures& from) { GameEvent_MultiplePlacementFailures::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_MultiplePlacementFailures* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.MultiplePlacementFailures"; }

 protected:
  explicit GameEvent_MultiplePlacementFailures(::google::protobuf::Arena* arena);
  GameEvent_MultiplePlacementFailures(::google::protobuf::Arena* arena, const GameEvent_MultiplePlacementFailures& from);
  GameEvent_MultiplePlacementFailures(::google::protobuf::Arena* arena, GameEvent_MultiplePlacementFailures&& from) noexcept
      : GameEvent_MultiplePlacementFailures(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.MultiplePlacementFailures)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_MultiplePlacementFailures_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_MultiplePlacementFailures& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_MultipleCards final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.MultipleCards) */ {
 public:
  inline GameEvent_MultipleCards() : GameEvent_MultipleCards(nullptr) {}
  ~GameEvent_MultipleCards() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_MultipleCards(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_MultipleCards(const GameEvent_MultipleCards& from) : GameEvent_MultipleCards(nullptr, from) {}
  inline GameEvent_MultipleCards(GameEvent_MultipleCards&& from) noexcept
      : GameEvent_MultipleCards(nullptr, std::move(from)) {}
  inline GameEvent_MultipleCards& operator=(const GameEvent_MultipleCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_MultipleCards& operator=(GameEvent_MultipleCards&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_MultipleCards& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_MultipleCards* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultipleCards*>(
        &_GameEvent_MultipleCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(GameEvent_MultipleCards& a, GameEvent_MultipleCards& b) { a.Swap(&b); }
  inline void Swap(GameEvent_MultipleCards* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_MultipleCards* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_MultipleCards* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_MultipleCards>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_MultipleCards& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_MultipleCards& from) { GameEvent_MultipleCards::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_MultipleCards* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.MultipleCards"; }

 protected:
  explicit GameEvent_MultipleCards(::google::protobuf::Arena* arena);
  GameEvent_MultipleCards(::google::protobuf::Arena* arena, const GameEvent_MultipleCards& from);
  GameEvent_MultipleCards(::google::protobuf::Arena* arena, GameEvent_MultipleCards&& from) noexcept
      : GameEvent_MultipleCards(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.MultipleCards)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_MultipleCards_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_MultipleCards& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_ExcessiveBotSubstitution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.ExcessiveBotSubstitution) */ {
 public:
  inline GameEvent_ExcessiveBotSubstitution() : GameEvent_ExcessiveBotSubstitution(nullptr) {}
  ~GameEvent_ExcessiveBotSubstitution() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_ExcessiveBotSubstitution(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_ExcessiveBotSubstitution(const GameEvent_ExcessiveBotSubstitution& from) : GameEvent_ExcessiveBotSubstitution(nullptr, from) {}
  inline GameEvent_ExcessiveBotSubstitution(GameEvent_ExcessiveBotSubstitution&& from) noexcept
      : GameEvent_ExcessiveBotSubstitution(nullptr, std::move(from)) {}
  inline GameEvent_ExcessiveBotSubstitution& operator=(const GameEvent_ExcessiveBotSubstitution& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_ExcessiveBotSubstitution& operator=(GameEvent_ExcessiveBotSubstitution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_ExcessiveBotSubstitution& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_ExcessiveBotSubstitution* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ExcessiveBotSubstitution*>(
        &_GameEvent_ExcessiveBotSubstitution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(GameEvent_ExcessiveBotSubstitution& a, GameEvent_ExcessiveBotSubstitution& b) { a.Swap(&b); }
  inline void Swap(GameEvent_ExcessiveBotSubstitution* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_ExcessiveBotSubstitution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_ExcessiveBotSubstitution* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_ExcessiveBotSubstitution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_ExcessiveBotSubstitution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_ExcessiveBotSubstitution& from) { GameEvent_ExcessiveBotSubstitution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_ExcessiveBotSubstitution* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.ExcessiveBotSubstitution"; }

 protected:
  explicit GameEvent_ExcessiveBotSubstitution(::google::protobuf::Arena* arena);
  GameEvent_ExcessiveBotSubstitution(::google::protobuf::Arena* arena, const GameEvent_ExcessiveBotSubstitution& from);
  GameEvent_ExcessiveBotSubstitution(::google::protobuf::Arena* arena, GameEvent_ExcessiveBotSubstitution&& from) noexcept
      : GameEvent_ExcessiveBotSubstitution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.ExcessiveBotSubstitution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_ExcessiveBotSubstitution_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_ExcessiveBotSubstitution& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_EmergencyStop final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.EmergencyStop) */ {
 public:
  inline GameEvent_EmergencyStop() : GameEvent_EmergencyStop(nullptr) {}
  ~GameEvent_EmergencyStop() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_EmergencyStop(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_EmergencyStop(const GameEvent_EmergencyStop& from) : GameEvent_EmergencyStop(nullptr, from) {}
  inline GameEvent_EmergencyStop(GameEvent_EmergencyStop&& from) noexcept
      : GameEvent_EmergencyStop(nullptr, std::move(from)) {}
  inline GameEvent_EmergencyStop& operator=(const GameEvent_EmergencyStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_EmergencyStop& operator=(GameEvent_EmergencyStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_EmergencyStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_EmergencyStop* internal_default_instance() {
    return reinterpret_cast<const GameEvent_EmergencyStop*>(
        &_GameEvent_EmergencyStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(GameEvent_EmergencyStop& a, GameEvent_EmergencyStop& b) { a.Swap(&b); }
  inline void Swap(GameEvent_EmergencyStop* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_EmergencyStop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_EmergencyStop* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_EmergencyStop>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_EmergencyStop& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_EmergencyStop& from) { GameEvent_EmergencyStop::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_EmergencyStop* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.EmergencyStop"; }

 protected:
  explicit GameEvent_EmergencyStop(::google::protobuf::Arena* arena);
  GameEvent_EmergencyStop(::google::protobuf::Arena* arena, const GameEvent_EmergencyStop& from);
  GameEvent_EmergencyStop(::google::protobuf::Arena* arena, GameEvent_EmergencyStop&& from) noexcept
      : GameEvent_EmergencyStop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.EmergencyStop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_EmergencyStop_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_EmergencyStop& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_ChallengeFlagHandled final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.ChallengeFlagHandled) */ {
 public:
  inline GameEvent_ChallengeFlagHandled() : GameEvent_ChallengeFlagHandled(nullptr) {}
  ~GameEvent_ChallengeFlagHandled() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_ChallengeFlagHandled(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_ChallengeFlagHandled(const GameEvent_ChallengeFlagHandled& from) : GameEvent_ChallengeFlagHandled(nullptr, from) {}
  inline GameEvent_ChallengeFlagHandled(GameEvent_ChallengeFlagHandled&& from) noexcept
      : GameEvent_ChallengeFlagHandled(nullptr, std::move(from)) {}
  inline GameEvent_ChallengeFlagHandled& operator=(const GameEvent_ChallengeFlagHandled& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_ChallengeFlagHandled& operator=(GameEvent_ChallengeFlagHandled&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_ChallengeFlagHandled& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_ChallengeFlagHandled* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ChallengeFlagHandled*>(
        &_GameEvent_ChallengeFlagHandled_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(GameEvent_ChallengeFlagHandled& a, GameEvent_ChallengeFlagHandled& b) { a.Swap(&b); }
  inline void Swap(GameEvent_ChallengeFlagHandled* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_ChallengeFlagHandled* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_ChallengeFlagHandled* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_ChallengeFlagHandled>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_ChallengeFlagHandled& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_ChallengeFlagHandled& from) { GameEvent_ChallengeFlagHandled::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_ChallengeFlagHandled* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.ChallengeFlagHandled"; }

 protected:
  explicit GameEvent_ChallengeFlagHandled(::google::protobuf::Arena* arena);
  GameEvent_ChallengeFlagHandled(::google::protobuf::Arena* arena, const GameEvent_ChallengeFlagHandled& from);
  GameEvent_ChallengeFlagHandled(::google::protobuf::Arena* arena, GameEvent_ChallengeFlagHandled&& from) noexcept
      : GameEvent_ChallengeFlagHandled(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
    kAcceptedFieldNumber = 2,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // required bool accepted = 2;
  bool has_accepted() const;
  void clear_accepted() ;
  bool accepted() const;
  void set_accepted(bool value);

  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.ChallengeFlagHandled)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_ChallengeFlagHandled_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_ChallengeFlagHandled& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    bool accepted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_ChallengeFlag final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.ChallengeFlag) */ {
 public:
  inline GameEvent_ChallengeFlag() : GameEvent_ChallengeFlag(nullptr) {}
  ~GameEvent_ChallengeFlag() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_ChallengeFlag(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_ChallengeFlag(const GameEvent_ChallengeFlag& from) : GameEvent_ChallengeFlag(nullptr, from) {}
  inline GameEvent_ChallengeFlag(GameEvent_ChallengeFlag&& from) noexcept
      : GameEvent_ChallengeFlag(nullptr, std::move(from)) {}
  inline GameEvent_ChallengeFlag& operator=(const GameEvent_ChallengeFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_ChallengeFlag& operator=(GameEvent_ChallengeFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_ChallengeFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_ChallengeFlag* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ChallengeFlag*>(
        &_GameEvent_ChallengeFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(GameEvent_ChallengeFlag& a, GameEvent_ChallengeFlag& b) { a.Swap(&b); }
  inline void Swap(GameEvent_ChallengeFlag* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_ChallengeFlag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_ChallengeFlag* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_ChallengeFlag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_ChallengeFlag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_ChallengeFlag& from) { GameEvent_ChallengeFlag::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_ChallengeFlag* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.ChallengeFlag"; }

 protected:
  explicit GameEvent_ChallengeFlag(::google::protobuf::Arena* arena);
  GameEvent_ChallengeFlag(::google::protobuf::Arena* arena, const GameEvent_ChallengeFlag& from);
  GameEvent_ChallengeFlag(::google::protobuf::Arena* arena, GameEvent_ChallengeFlag&& from) noexcept
      : GameEvent_ChallengeFlag(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.ChallengeFlag)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_ChallengeFlag_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_ChallengeFlag& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotSubstitution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotSubstitution) */ {
 public:
  inline GameEvent_BotSubstitution() : GameEvent_BotSubstitution(nullptr) {}
  ~GameEvent_BotSubstitution() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotSubstitution(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from) : GameEvent_BotSubstitution(nullptr, from) {}
  inline GameEvent_BotSubstitution(GameEvent_BotSubstitution&& from) noexcept
      : GameEvent_BotSubstitution(nullptr, std::move(from)) {}
  inline GameEvent_BotSubstitution& operator=(const GameEvent_BotSubstitution& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotSubstitution& operator=(GameEvent_BotSubstitution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotSubstitution& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotSubstitution* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotSubstitution*>(
        &_GameEvent_BotSubstitution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(GameEvent_BotSubstitution& a, GameEvent_BotSubstitution& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotSubstitution* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotSubstitution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotSubstitution* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotSubstitution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotSubstitution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotSubstitution& from) { GameEvent_BotSubstitution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotSubstitution* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotSubstitution"; }

 protected:
  explicit GameEvent_BotSubstitution(::google::protobuf::Arena* arena);
  GameEvent_BotSubstitution(::google::protobuf::Arena* arena, const GameEvent_BotSubstitution& from);
  GameEvent_BotSubstitution(::google::protobuf::Arena* arena, GameEvent_BotSubstitution&& from) noexcept
      : GameEvent_BotSubstitution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kByTeamFieldNumber = 1,
  };
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotSubstitution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotSubstitution_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotSubstitution& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_TooManyRobots final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.TooManyRobots) */ {
 public:
  inline GameEvent_TooManyRobots() : GameEvent_TooManyRobots(nullptr) {}
  ~GameEvent_TooManyRobots() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_TooManyRobots(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from) : GameEvent_TooManyRobots(nullptr, from) {}
  inline GameEvent_TooManyRobots(GameEvent_TooManyRobots&& from) noexcept
      : GameEvent_TooManyRobots(nullptr, std::move(from)) {}
  inline GameEvent_TooManyRobots& operator=(const GameEvent_TooManyRobots& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_TooManyRobots& operator=(GameEvent_TooManyRobots&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_TooManyRobots& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_TooManyRobots* internal_default_instance() {
    return reinterpret_cast<const GameEvent_TooManyRobots*>(
        &_GameEvent_TooManyRobots_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(GameEvent_TooManyRobots& a, GameEvent_TooManyRobots& b) { a.Swap(&b); }
  inline void Swap(GameEvent_TooManyRobots* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_TooManyRobots* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_TooManyRobots* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_TooManyRobots>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_TooManyRobots& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_TooManyRobots& from) { GameEvent_TooManyRobots::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_TooManyRobots* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.TooManyRobots"; }

 protected:
  explicit GameEvent_TooManyRobots(::google::protobuf::Arena* arena);
  GameEvent_TooManyRobots(::google::protobuf::Arena* arena, const GameEvent_TooManyRobots& from);
  GameEvent_TooManyRobots(::google::protobuf::Arena* arena, GameEvent_TooManyRobots&& from) noexcept
      : GameEvent_TooManyRobots(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBallLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kNumRobotsAllowedFieldNumber = 2,
    kNumRobotsOnFieldFieldNumber = 3,
  };
  // optional .Vector2 ball_location = 4;
  bool has_ball_location() const;
  void clear_ball_location() ;
  const ::Vector2& ball_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_ball_location();
  ::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::Vector2* value);
  void unsafe_arena_set_allocated_ball_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_ball_location();

  private:
  const ::Vector2& _internal_ball_location() const;
  ::Vector2* _internal_mutable_ball_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional int32 num_robots_allowed = 2;
  bool has_num_robots_allowed() const;
  void clear_num_robots_allowed() ;
  ::int32_t num_robots_allowed() const;
  void set_num_robots_allowed(::int32_t value);

  private:
  ::int32_t _internal_num_robots_allowed() const;
  void _internal_set_num_robots_allowed(::int32_t value);

  public:
  // optional int32 num_robots_on_field = 3;
  bool has_num_robots_on_field() const;
  void clear_num_robots_on_field() ;
  ::int32_t num_robots_on_field() const;
  void set_num_robots_on_field(::int32_t value);

  private:
  ::int32_t _internal_num_robots_on_field() const;
  void _internal_set_num_robots_on_field(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.TooManyRobots)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_TooManyRobots_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_TooManyRobots& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* ball_location_;
    int by_team_;
    ::int32_t num_robots_allowed_;
    ::int32_t num_robots_on_field_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_PenaltyKickFailed final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.PenaltyKickFailed) */ {
 public:
  inline GameEvent_PenaltyKickFailed() : GameEvent_PenaltyKickFailed(nullptr) {}
  ~GameEvent_PenaltyKickFailed() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_PenaltyKickFailed(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_PenaltyKickFailed(const GameEvent_PenaltyKickFailed& from) : GameEvent_PenaltyKickFailed(nullptr, from) {}
  inline GameEvent_PenaltyKickFailed(GameEvent_PenaltyKickFailed&& from) noexcept
      : GameEvent_PenaltyKickFailed(nullptr, std::move(from)) {}
  inline GameEvent_PenaltyKickFailed& operator=(const GameEvent_PenaltyKickFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_PenaltyKickFailed& operator=(GameEvent_PenaltyKickFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_PenaltyKickFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_PenaltyKickFailed* internal_default_instance() {
    return reinterpret_cast<const GameEvent_PenaltyKickFailed*>(
        &_GameEvent_PenaltyKickFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(GameEvent_PenaltyKickFailed& a, GameEvent_PenaltyKickFailed& b) { a.Swap(&b); }
  inline void Swap(GameEvent_PenaltyKickFailed* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_PenaltyKickFailed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_PenaltyKickFailed* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_PenaltyKickFailed>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_PenaltyKickFailed& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_PenaltyKickFailed& from) { GameEvent_PenaltyKickFailed::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_PenaltyKickFailed* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.PenaltyKickFailed"; }

 protected:
  explicit GameEvent_PenaltyKickFailed(::google::protobuf::Arena* arena);
  GameEvent_PenaltyKickFailed(::google::protobuf::Arena* arena, const GameEvent_PenaltyKickFailed& from);
  GameEvent_PenaltyKickFailed(::google::protobuf::Arena* arena, GameEvent_PenaltyKickFailed&& from) noexcept
      : GameEvent_PenaltyKickFailed(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 3,
    kLocationFieldNumber = 2,
    kByTeamFieldNumber = 1,
  };
  // optional string reason = 3;
  bool has_reason() const;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // optional .Vector2 location = 2;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.PenaltyKickFailed)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_PenaltyKickFailed_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_PenaltyKickFailed& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::Vector2* location_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_NoProgressInGame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.NoProgressInGame) */ {
 public:
  inline GameEvent_NoProgressInGame() : GameEvent_NoProgressInGame(nullptr) {}
  ~GameEvent_NoProgressInGame() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_NoProgressInGame(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from) : GameEvent_NoProgressInGame(nullptr, from) {}
  inline GameEvent_NoProgressInGame(GameEvent_NoProgressInGame&& from) noexcept
      : GameEvent_NoProgressInGame(nullptr, std::move(from)) {}
  inline GameEvent_NoProgressInGame& operator=(const GameEvent_NoProgressInGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_NoProgressInGame& operator=(GameEvent_NoProgressInGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_NoProgressInGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_NoProgressInGame* internal_default_instance() {
    return reinterpret_cast<const GameEvent_NoProgressInGame*>(
        &_GameEvent_NoProgressInGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(GameEvent_NoProgressInGame& a, GameEvent_NoProgressInGame& b) { a.Swap(&b); }
  inline void Swap(GameEvent_NoProgressInGame* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_NoProgressInGame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_NoProgressInGame* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_NoProgressInGame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_NoProgressInGame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_NoProgressInGame& from) { GameEvent_NoProgressInGame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_NoProgressInGame* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.NoProgressInGame"; }

 protected:
  explicit GameEvent_NoProgressInGame(::google::protobuf::Arena* arena);
  GameEvent_NoProgressInGame(::google::protobuf::Arena* arena, const GameEvent_NoProgressInGame& from);
  GameEvent_NoProgressInGame(::google::protobuf::Arena* arena, GameEvent_NoProgressInGame&& from) noexcept
      : GameEvent_NoProgressInGame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // optional .Vector2 location = 1;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional float time = 2;
  bool has_time() const;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.NoProgressInGame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_NoProgressInGame_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_NoProgressInGame& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    float time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_KickTimeout final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.KickTimeout) */ {
 public:
  inline GameEvent_KickTimeout() : GameEvent_KickTimeout(nullptr) {}
  ~GameEvent_KickTimeout() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_KickTimeout(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_KickTimeout(const GameEvent_KickTimeout& from) : GameEvent_KickTimeout(nullptr, from) {}
  inline GameEvent_KickTimeout(GameEvent_KickTimeout&& from) noexcept
      : GameEvent_KickTimeout(nullptr, std::move(from)) {}
  inline GameEvent_KickTimeout& operator=(const GameEvent_KickTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_KickTimeout& operator=(GameEvent_KickTimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_KickTimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_KickTimeout* internal_default_instance() {
    return reinterpret_cast<const GameEvent_KickTimeout*>(
        &_GameEvent_KickTimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(GameEvent_KickTimeout& a, GameEvent_KickTimeout& b) { a.Swap(&b); }
  inline void Swap(GameEvent_KickTimeout* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_KickTimeout* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_KickTimeout* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_KickTimeout>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_KickTimeout& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_KickTimeout& from) { GameEvent_KickTimeout::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_KickTimeout* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.KickTimeout"; }

 protected:
  explicit GameEvent_KickTimeout(::google::protobuf::Arena* arena);
  GameEvent_KickTimeout(::google::protobuf::Arena* arena, const GameEvent_KickTimeout& from);
  GameEvent_KickTimeout(::google::protobuf::Arena* arena, GameEvent_KickTimeout&& from) noexcept
      : GameEvent_KickTimeout(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 2,
    kByTeamFieldNumber = 1,
    kTimeFieldNumber = 3,
  };
  // optional .Vector2 location = 2;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional float time = 3;
  bool has_time() const;
  void clear_time() ;
  float time() const;
  void set_time(float value);

  private:
  float _internal_time() const;
  void _internal_set_time(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.KickTimeout)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_KickTimeout_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_KickTimeout& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    float time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_KeeperHeldBall final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.KeeperHeldBall) */ {
 public:
  inline GameEvent_KeeperHeldBall() : GameEvent_KeeperHeldBall(nullptr) {}
  ~GameEvent_KeeperHeldBall() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_KeeperHeldBall(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from) : GameEvent_KeeperHeldBall(nullptr, from) {}
  inline GameEvent_KeeperHeldBall(GameEvent_KeeperHeldBall&& from) noexcept
      : GameEvent_KeeperHeldBall(nullptr, std::move(from)) {}
  inline GameEvent_KeeperHeldBall& operator=(const GameEvent_KeeperHeldBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_KeeperHeldBall& operator=(GameEvent_KeeperHeldBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_KeeperHeldBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_KeeperHeldBall* internal_default_instance() {
    return reinterpret_cast<const GameEvent_KeeperHeldBall*>(
        &_GameEvent_KeeperHeldBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(GameEvent_KeeperHeldBall& a, GameEvent_KeeperHeldBall& b) { a.Swap(&b); }
  inline void Swap(GameEvent_KeeperHeldBall* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_KeeperHeldBall* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_KeeperHeldBall* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_KeeperHeldBall>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_KeeperHeldBall& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_KeeperHeldBall& from) { GameEvent_KeeperHeldBall::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_KeeperHeldBall* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.KeeperHeldBall"; }

 protected:
  explicit GameEvent_KeeperHeldBall(::google::protobuf::Arena* arena);
  GameEvent_KeeperHeldBall(::google::protobuf::Arena* arena, const GameEvent_KeeperHeldBall& from);
  GameEvent_KeeperHeldBall(::google::protobuf::Arena* arena, GameEvent_KeeperHeldBall&& from) noexcept
      : GameEvent_KeeperHeldBall(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 2,
    kByTeamFieldNumber = 1,
    kDurationFieldNumber = 3,
  };
  // optional .Vector2 location = 2;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional float duration = 3;
  bool has_duration() const;
  void clear_duration() ;
  float duration() const;
  void set_duration(float value);

  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.KeeperHeldBall)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_KeeperHeldBall_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_KeeperHeldBall& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    float duration_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_IndirectGoal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.IndirectGoal) */ {
 public:
  inline GameEvent_IndirectGoal() : GameEvent_IndirectGoal(nullptr) {}
  ~GameEvent_IndirectGoal() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_IndirectGoal(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from) : GameEvent_IndirectGoal(nullptr, from) {}
  inline GameEvent_IndirectGoal(GameEvent_IndirectGoal&& from) noexcept
      : GameEvent_IndirectGoal(nullptr, std::move(from)) {}
  inline GameEvent_IndirectGoal& operator=(const GameEvent_IndirectGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_IndirectGoal& operator=(GameEvent_IndirectGoal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_IndirectGoal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_IndirectGoal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_IndirectGoal*>(
        &_GameEvent_IndirectGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GameEvent_IndirectGoal& a, GameEvent_IndirectGoal& b) { a.Swap(&b); }
  inline void Swap(GameEvent_IndirectGoal* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_IndirectGoal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_IndirectGoal* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_IndirectGoal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_IndirectGoal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_IndirectGoal& from) { GameEvent_IndirectGoal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_IndirectGoal* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.IndirectGoal"; }

 protected:
  explicit GameEvent_IndirectGoal(::google::protobuf::Arena* arena);
  GameEvent_IndirectGoal(::google::protobuf::Arena* arena, const GameEvent_IndirectGoal& from);
  GameEvent_IndirectGoal(::google::protobuf::Arena* arena, GameEvent_IndirectGoal&& from) noexcept
      : GameEvent_IndirectGoal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kKickLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location() ;
  const ::Vector2& kick_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_kick_location();
  ::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::Vector2* value);
  void unsafe_arena_set_allocated_kick_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_kick_location();

  private:
  const ::Vector2& _internal_kick_location() const;
  ::Vector2* _internal_mutable_kick_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.IndirectGoal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_IndirectGoal_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_IndirectGoal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* kick_location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_Goal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.Goal) */ {
 public:
  inline GameEvent_Goal() : GameEvent_Goal(nullptr) {}
  ~GameEvent_Goal() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_Goal(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_Goal(const GameEvent_Goal& from) : GameEvent_Goal(nullptr, from) {}
  inline GameEvent_Goal(GameEvent_Goal&& from) noexcept
      : GameEvent_Goal(nullptr, std::move(from)) {}
  inline GameEvent_Goal& operator=(const GameEvent_Goal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_Goal& operator=(GameEvent_Goal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_Goal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_Goal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_Goal*>(
        &_GameEvent_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GameEvent_Goal& a, GameEvent_Goal& b) { a.Swap(&b); }
  inline void Swap(GameEvent_Goal* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_Goal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_Goal* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_Goal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_Goal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_Goal& from) { GameEvent_Goal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_Goal* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.Goal"; }

 protected:
  explicit GameEvent_Goal(::google::protobuf::Arena* arena);
  GameEvent_Goal(::google::protobuf::Arena* arena, const GameEvent_Goal& from);
  GameEvent_Goal(::google::protobuf::Arena* arena, GameEvent_Goal&& from) noexcept
      : GameEvent_Goal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 9,
    kLocationFieldNumber = 3,
    kKickLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kKickingBotFieldNumber = 2,
    kMaxBallHeightFieldNumber = 5,
    kKickingTeamFieldNumber = 6,
    kLastTouchByTeamFieldNumber = 8,
    kNumRobotsByTeamFieldNumber = 7,
  };
  // optional string message = 9;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location() ;
  const ::Vector2& kick_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_kick_location();
  ::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::Vector2* value);
  void unsafe_arena_set_allocated_kick_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_kick_location();

  private:
  const ::Vector2& _internal_kick_location() const;
  ::Vector2* _internal_mutable_kick_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 kicking_bot = 2;
  bool has_kicking_bot() const;
  void clear_kicking_bot() ;
  ::uint32_t kicking_bot() const;
  void set_kicking_bot(::uint32_t value);

  private:
  ::uint32_t _internal_kicking_bot() const;
  void _internal_set_kicking_bot(::uint32_t value);

  public:
  // optional float max_ball_height = 5;
  bool has_max_ball_height() const;
  void clear_max_ball_height() ;
  float max_ball_height() const;
  void set_max_ball_height(float value);

  private:
  float _internal_max_ball_height() const;
  void _internal_set_max_ball_height(float value);

  public:
  // optional .Team kicking_team = 6;
  bool has_kicking_team() const;
  void clear_kicking_team() ;
  ::Team kicking_team() const;
  void set_kicking_team(::Team value);

  private:
  ::Team _internal_kicking_team() const;
  void _internal_set_kicking_team(::Team value);

  public:
  // optional uint64 last_touch_by_team = 8;
  bool has_last_touch_by_team() const;
  void clear_last_touch_by_team() ;
  ::uint64_t last_touch_by_team() const;
  void set_last_touch_by_team(::uint64_t value);

  private:
  ::uint64_t _internal_last_touch_by_team() const;
  void _internal_set_last_touch_by_team(::uint64_t value);

  public:
  // optional uint32 num_robots_by_team = 7;
  bool has_num_robots_by_team() const;
  void clear_num_robots_by_team() ;
  ::uint32_t num_robots_by_team() const;
  void set_num_robots_by_team(::uint32_t value);

  private:
  ::uint32_t _internal_num_robots_by_team() const;
  void _internal_set_num_robots_by_team(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.Goal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 4,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_Goal_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_Goal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::Vector2* location_;
    ::Vector2* kick_location_;
    int by_team_;
    ::uint32_t kicking_bot_;
    float max_ball_height_;
    int kicking_team_;
    ::uint64_t last_touch_by_team_;
    ::uint32_t num_robots_by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_DefenderTooCloseToKickPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.DefenderTooCloseToKickPoint) */ {
 public:
  inline GameEvent_DefenderTooCloseToKickPoint() : GameEvent_DefenderTooCloseToKickPoint(nullptr) {}
  ~GameEvent_DefenderTooCloseToKickPoint() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_DefenderTooCloseToKickPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from) : GameEvent_DefenderTooCloseToKickPoint(nullptr, from) {}
  inline GameEvent_DefenderTooCloseToKickPoint(GameEvent_DefenderTooCloseToKickPoint&& from) noexcept
      : GameEvent_DefenderTooCloseToKickPoint(nullptr, std::move(from)) {}
  inline GameEvent_DefenderTooCloseToKickPoint& operator=(const GameEvent_DefenderTooCloseToKickPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_DefenderTooCloseToKickPoint& operator=(GameEvent_DefenderTooCloseToKickPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_DefenderTooCloseToKickPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_DefenderTooCloseToKickPoint* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderTooCloseToKickPoint*>(
        &_GameEvent_DefenderTooCloseToKickPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GameEvent_DefenderTooCloseToKickPoint& a, GameEvent_DefenderTooCloseToKickPoint& b) { a.Swap(&b); }
  inline void Swap(GameEvent_DefenderTooCloseToKickPoint* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_DefenderTooCloseToKickPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_DefenderTooCloseToKickPoint* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_DefenderTooCloseToKickPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_DefenderTooCloseToKickPoint& from) { GameEvent_DefenderTooCloseToKickPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.DefenderTooCloseToKickPoint"; }

 protected:
  explicit GameEvent_DefenderTooCloseToKickPoint(::google::protobuf::Arena* arena);
  GameEvent_DefenderTooCloseToKickPoint(::google::protobuf::Arena* arena, const GameEvent_DefenderTooCloseToKickPoint& from);
  GameEvent_DefenderTooCloseToKickPoint(::google::protobuf::Arena* arena, GameEvent_DefenderTooCloseToKickPoint&& from) noexcept
      : GameEvent_DefenderTooCloseToKickPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.DefenderTooCloseToKickPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_DefenderTooCloseToKickPoint_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_DefenderTooCloseToKickPoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_DefenderInDefenseAreaPartially final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.DefenderInDefenseAreaPartially) */ {
 public:
  inline GameEvent_DefenderInDefenseAreaPartially() : GameEvent_DefenderInDefenseAreaPartially(nullptr) {}
  ~GameEvent_DefenderInDefenseAreaPartially() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaPartially(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from) : GameEvent_DefenderInDefenseAreaPartially(nullptr, from) {}
  inline GameEvent_DefenderInDefenseAreaPartially(GameEvent_DefenderInDefenseAreaPartially&& from) noexcept
      : GameEvent_DefenderInDefenseAreaPartially(nullptr, std::move(from)) {}
  inline GameEvent_DefenderInDefenseAreaPartially& operator=(const GameEvent_DefenderInDefenseAreaPartially& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_DefenderInDefenseAreaPartially& operator=(GameEvent_DefenderInDefenseAreaPartially&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_DefenderInDefenseAreaPartially& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_DefenderInDefenseAreaPartially* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderInDefenseAreaPartially*>(
        &_GameEvent_DefenderInDefenseAreaPartially_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GameEvent_DefenderInDefenseAreaPartially& a, GameEvent_DefenderInDefenseAreaPartially& b) { a.Swap(&b); }
  inline void Swap(GameEvent_DefenderInDefenseAreaPartially* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_DefenderInDefenseAreaPartially* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_DefenderInDefenseAreaPartially* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_DefenderInDefenseAreaPartially>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_DefenderInDefenseAreaPartially& from) { GameEvent_DefenderInDefenseAreaPartially::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.DefenderInDefenseAreaPartially"; }

 protected:
  explicit GameEvent_DefenderInDefenseAreaPartially(::google::protobuf::Arena* arena);
  GameEvent_DefenderInDefenseAreaPartially(::google::protobuf::Arena* arena, const GameEvent_DefenderInDefenseAreaPartially& from);
  GameEvent_DefenderInDefenseAreaPartially(::google::protobuf::Arena* arena, GameEvent_DefenderInDefenseAreaPartially&& from) noexcept
      : GameEvent_DefenderInDefenseAreaPartially(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kBallLocationFieldNumber = 5,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 ball_location = 5;
  bool has_ball_location() const;
  void clear_ball_location() ;
  const ::Vector2& ball_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_ball_location();
  ::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::Vector2* value);
  void unsafe_arena_set_allocated_ball_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_ball_location();

  private:
  const ::Vector2& _internal_ball_location() const;
  ::Vector2* _internal_mutable_ball_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.DefenderInDefenseAreaPartially)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_DefenderInDefenseAreaPartially_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_DefenderInDefenseAreaPartially& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* ball_location_;
    int by_team_;
    ::uint32_t by_bot_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_DefenderInDefenseArea final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.DefenderInDefenseArea) */ {
 public:
  inline GameEvent_DefenderInDefenseArea() : GameEvent_DefenderInDefenseArea(nullptr) {}
  ~GameEvent_DefenderInDefenseArea() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseArea(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from) : GameEvent_DefenderInDefenseArea(nullptr, from) {}
  inline GameEvent_DefenderInDefenseArea(GameEvent_DefenderInDefenseArea&& from) noexcept
      : GameEvent_DefenderInDefenseArea(nullptr, std::move(from)) {}
  inline GameEvent_DefenderInDefenseArea& operator=(const GameEvent_DefenderInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_DefenderInDefenseArea& operator=(GameEvent_DefenderInDefenseArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_DefenderInDefenseArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_DefenderInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_DefenderInDefenseArea*>(
        &_GameEvent_DefenderInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(GameEvent_DefenderInDefenseArea& a, GameEvent_DefenderInDefenseArea& b) { a.Swap(&b); }
  inline void Swap(GameEvent_DefenderInDefenseArea* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_DefenderInDefenseArea* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_DefenderInDefenseArea* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_DefenderInDefenseArea>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_DefenderInDefenseArea& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_DefenderInDefenseArea& from) { GameEvent_DefenderInDefenseArea::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_DefenderInDefenseArea* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.DefenderInDefenseArea"; }

 protected:
  explicit GameEvent_DefenderInDefenseArea(::google::protobuf::Arena* arena);
  GameEvent_DefenderInDefenseArea(::google::protobuf::Arena* arena, const GameEvent_DefenderInDefenseArea& from);
  GameEvent_DefenderInDefenseArea(::google::protobuf::Arena* arena, GameEvent_DefenderInDefenseArea&& from) noexcept
      : GameEvent_DefenderInDefenseArea(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.DefenderInDefenseArea)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_DefenderInDefenseArea_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_DefenderInDefenseArea& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_ChippedGoal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.ChippedGoal) */ {
 public:
  inline GameEvent_ChippedGoal() : GameEvent_ChippedGoal(nullptr) {}
  ~GameEvent_ChippedGoal() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_ChippedGoal(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from) : GameEvent_ChippedGoal(nullptr, from) {}
  inline GameEvent_ChippedGoal(GameEvent_ChippedGoal&& from) noexcept
      : GameEvent_ChippedGoal(nullptr, std::move(from)) {}
  inline GameEvent_ChippedGoal& operator=(const GameEvent_ChippedGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_ChippedGoal& operator=(GameEvent_ChippedGoal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_ChippedGoal& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_ChippedGoal* internal_default_instance() {
    return reinterpret_cast<const GameEvent_ChippedGoal*>(
        &_GameEvent_ChippedGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GameEvent_ChippedGoal& a, GameEvent_ChippedGoal& b) { a.Swap(&b); }
  inline void Swap(GameEvent_ChippedGoal* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_ChippedGoal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_ChippedGoal* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_ChippedGoal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_ChippedGoal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_ChippedGoal& from) { GameEvent_ChippedGoal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_ChippedGoal* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.ChippedGoal"; }

 protected:
  explicit GameEvent_ChippedGoal(::google::protobuf::Arena* arena);
  GameEvent_ChippedGoal(::google::protobuf::Arena* arena, const GameEvent_ChippedGoal& from);
  GameEvent_ChippedGoal(::google::protobuf::Arena* arena, GameEvent_ChippedGoal&& from) noexcept
      : GameEvent_ChippedGoal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kKickLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kMaxBallHeightFieldNumber = 5,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location() ;
  const ::Vector2& kick_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_kick_location();
  ::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::Vector2* value);
  void unsafe_arena_set_allocated_kick_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_kick_location();

  private:
  const ::Vector2& _internal_kick_location() const;
  ::Vector2* _internal_mutable_kick_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float max_ball_height = 5;
  bool has_max_ball_height() const;
  void clear_max_ball_height() ;
  float max_ball_height() const;
  void set_max_ball_height(float value);

  private:
  float _internal_max_ball_height() const;
  void _internal_set_max_ball_height(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.ChippedGoal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_ChippedGoal_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_ChippedGoal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* kick_location_;
    int by_team_;
    ::uint32_t by_bot_;
    float max_ball_height_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BoundaryCrossing final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BoundaryCrossing) */ {
 public:
  inline GameEvent_BoundaryCrossing() : GameEvent_BoundaryCrossing(nullptr) {}
  ~GameEvent_BoundaryCrossing() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BoundaryCrossing(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BoundaryCrossing(const GameEvent_BoundaryCrossing& from) : GameEvent_BoundaryCrossing(nullptr, from) {}
  inline GameEvent_BoundaryCrossing(GameEvent_BoundaryCrossing&& from) noexcept
      : GameEvent_BoundaryCrossing(nullptr, std::move(from)) {}
  inline GameEvent_BoundaryCrossing& operator=(const GameEvent_BoundaryCrossing& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BoundaryCrossing& operator=(GameEvent_BoundaryCrossing&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BoundaryCrossing& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BoundaryCrossing* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BoundaryCrossing*>(
        &_GameEvent_BoundaryCrossing_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(GameEvent_BoundaryCrossing& a, GameEvent_BoundaryCrossing& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BoundaryCrossing* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BoundaryCrossing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BoundaryCrossing* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BoundaryCrossing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BoundaryCrossing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BoundaryCrossing& from) { GameEvent_BoundaryCrossing::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BoundaryCrossing* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BoundaryCrossing"; }

 protected:
  explicit GameEvent_BoundaryCrossing(::google::protobuf::Arena* arena);
  GameEvent_BoundaryCrossing(::google::protobuf::Arena* arena, const GameEvent_BoundaryCrossing& from);
  GameEvent_BoundaryCrossing(::google::protobuf::Arena* arena, GameEvent_BoundaryCrossing&& from) noexcept
      : GameEvent_BoundaryCrossing(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 2,
    kByTeamFieldNumber = 1,
  };
  // optional .Vector2 location = 2;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BoundaryCrossing)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BoundaryCrossing_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BoundaryCrossing& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotTooFastInStop final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotTooFastInStop) */ {
 public:
  inline GameEvent_BotTooFastInStop() : GameEvent_BotTooFastInStop(nullptr) {}
  ~GameEvent_BotTooFastInStop() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotTooFastInStop(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from) : GameEvent_BotTooFastInStop(nullptr, from) {}
  inline GameEvent_BotTooFastInStop(GameEvent_BotTooFastInStop&& from) noexcept
      : GameEvent_BotTooFastInStop(nullptr, std::move(from)) {}
  inline GameEvent_BotTooFastInStop& operator=(const GameEvent_BotTooFastInStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotTooFastInStop& operator=(GameEvent_BotTooFastInStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotTooFastInStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotTooFastInStop* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotTooFastInStop*>(
        &_GameEvent_BotTooFastInStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GameEvent_BotTooFastInStop& a, GameEvent_BotTooFastInStop& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotTooFastInStop* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotTooFastInStop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotTooFastInStop* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotTooFastInStop>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotTooFastInStop& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotTooFastInStop& from) { GameEvent_BotTooFastInStop::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotTooFastInStop* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotTooFastInStop"; }

 protected:
  explicit GameEvent_BotTooFastInStop(::google::protobuf::Arena* arena);
  GameEvent_BotTooFastInStop(::google::protobuf::Arena* arena, const GameEvent_BotTooFastInStop& from);
  GameEvent_BotTooFastInStop(::google::protobuf::Arena* arena, GameEvent_BotTooFastInStop&& from) noexcept
      : GameEvent_BotTooFastInStop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kSpeedFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float speed = 4;
  bool has_speed() const;
  void clear_speed() ;
  float speed() const;
  void set_speed(float value);

  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotTooFastInStop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotTooFastInStop_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotTooFastInStop& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float speed_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotTippedOver final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotTippedOver) */ {
 public:
  inline GameEvent_BotTippedOver() : GameEvent_BotTippedOver(nullptr) {}
  ~GameEvent_BotTippedOver() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotTippedOver(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from) : GameEvent_BotTippedOver(nullptr, from) {}
  inline GameEvent_BotTippedOver(GameEvent_BotTippedOver&& from) noexcept
      : GameEvent_BotTippedOver(nullptr, std::move(from)) {}
  inline GameEvent_BotTippedOver& operator=(const GameEvent_BotTippedOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotTippedOver& operator=(GameEvent_BotTippedOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotTippedOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotTippedOver* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotTippedOver*>(
        &_GameEvent_BotTippedOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(GameEvent_BotTippedOver& a, GameEvent_BotTippedOver& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotTippedOver* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotTippedOver* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotTippedOver* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotTippedOver>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotTippedOver& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotTippedOver& from) { GameEvent_BotTippedOver::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotTippedOver* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotTippedOver"; }

 protected:
  explicit GameEvent_BotTippedOver(::google::protobuf::Arena* arena);
  GameEvent_BotTippedOver(::google::protobuf::Arena* arena, const GameEvent_BotTippedOver& from);
  GameEvent_BotTippedOver(::google::protobuf::Arena* arena, GameEvent_BotTippedOver&& from) noexcept
      : GameEvent_BotTippedOver(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kBallLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 ball_location = 4;
  bool has_ball_location() const;
  void clear_ball_location() ;
  const ::Vector2& ball_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_ball_location();
  ::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::Vector2* value);
  void unsafe_arena_set_allocated_ball_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_ball_location();

  private:
  const ::Vector2& _internal_ball_location() const;
  ::Vector2* _internal_mutable_ball_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotTippedOver)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotTippedOver_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotTippedOver& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* ball_location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotPushedBot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotPushedBot) */ {
 public:
  inline GameEvent_BotPushedBot() : GameEvent_BotPushedBot(nullptr) {}
  ~GameEvent_BotPushedBot() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotPushedBot(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from) : GameEvent_BotPushedBot(nullptr, from) {}
  inline GameEvent_BotPushedBot(GameEvent_BotPushedBot&& from) noexcept
      : GameEvent_BotPushedBot(nullptr, std::move(from)) {}
  inline GameEvent_BotPushedBot& operator=(const GameEvent_BotPushedBot& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotPushedBot& operator=(GameEvent_BotPushedBot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotPushedBot& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotPushedBot* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotPushedBot*>(
        &_GameEvent_BotPushedBot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(GameEvent_BotPushedBot& a, GameEvent_BotPushedBot& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotPushedBot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotPushedBot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotPushedBot* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotPushedBot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotPushedBot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotPushedBot& from) { GameEvent_BotPushedBot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotPushedBot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotPushedBot"; }

 protected:
  explicit GameEvent_BotPushedBot(::google::protobuf::Arena* arena);
  GameEvent_BotPushedBot(::google::protobuf::Arena* arena, const GameEvent_BotPushedBot& from);
  GameEvent_BotPushedBot(::google::protobuf::Arena* arena, GameEvent_BotPushedBot&& from) noexcept
      : GameEvent_BotPushedBot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kViolatorFieldNumber = 2,
    kVictimFieldNumber = 3,
    kPushedDistanceFieldNumber = 5,
  };
  // optional .Vector2 location = 4;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 violator = 2;
  bool has_violator() const;
  void clear_violator() ;
  ::uint32_t violator() const;
  void set_violator(::uint32_t value);

  private:
  ::uint32_t _internal_violator() const;
  void _internal_set_violator(::uint32_t value);

  public:
  // optional uint32 victim = 3;
  bool has_victim() const;
  void clear_victim() ;
  ::uint32_t victim() const;
  void set_victim(::uint32_t value);

  private:
  ::uint32_t _internal_victim() const;
  void _internal_set_victim(::uint32_t value);

  public:
  // optional float pushed_distance = 5;
  bool has_pushed_distance() const;
  void clear_pushed_distance() ;
  float pushed_distance() const;
  void set_pushed_distance(float value);

  private:
  float _internal_pushed_distance() const;
  void _internal_set_pushed_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotPushedBot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotPushedBot_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotPushedBot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t violator_;
    ::uint32_t victim_;
    float pushed_distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotKickedBallTooFast final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotKickedBallTooFast) */ {
 public:
  inline GameEvent_BotKickedBallTooFast() : GameEvent_BotKickedBallTooFast(nullptr) {}
  ~GameEvent_BotKickedBallTooFast() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotKickedBallTooFast(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from) : GameEvent_BotKickedBallTooFast(nullptr, from) {}
  inline GameEvent_BotKickedBallTooFast(GameEvent_BotKickedBallTooFast&& from) noexcept
      : GameEvent_BotKickedBallTooFast(nullptr, std::move(from)) {}
  inline GameEvent_BotKickedBallTooFast& operator=(const GameEvent_BotKickedBallTooFast& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotKickedBallTooFast& operator=(GameEvent_BotKickedBallTooFast&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotKickedBallTooFast& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotKickedBallTooFast* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotKickedBallTooFast*>(
        &_GameEvent_BotKickedBallTooFast_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(GameEvent_BotKickedBallTooFast& a, GameEvent_BotKickedBallTooFast& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotKickedBallTooFast* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotKickedBallTooFast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotKickedBallTooFast* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotKickedBallTooFast>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotKickedBallTooFast& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotKickedBallTooFast& from) { GameEvent_BotKickedBallTooFast::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotKickedBallTooFast* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotKickedBallTooFast"; }

 protected:
  explicit GameEvent_BotKickedBallTooFast(::google::protobuf::Arena* arena);
  GameEvent_BotKickedBallTooFast(::google::protobuf::Arena* arena, const GameEvent_BotKickedBallTooFast& from);
  GameEvent_BotKickedBallTooFast(::google::protobuf::Arena* arena, GameEvent_BotKickedBallTooFast&& from) noexcept
      : GameEvent_BotKickedBallTooFast(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kInitialBallSpeedFieldNumber = 4,
    kChippedFieldNumber = 5,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float initial_ball_speed = 4;
  bool has_initial_ball_speed() const;
  void clear_initial_ball_speed() ;
  float initial_ball_speed() const;
  void set_initial_ball_speed(float value);

  private:
  float _internal_initial_ball_speed() const;
  void _internal_set_initial_ball_speed(float value);

  public:
  // optional bool chipped = 5;
  bool has_chipped() const;
  void clear_chipped() ;
  bool chipped() const;
  void set_chipped(bool value);

  private:
  bool _internal_chipped() const;
  void _internal_set_chipped(bool value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotKickedBallTooFast)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotKickedBallTooFast_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotKickedBallTooFast& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float initial_ball_speed_;
    bool chipped_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotInterferedPlacement final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotInterferedPlacement) */ {
 public:
  inline GameEvent_BotInterferedPlacement() : GameEvent_BotInterferedPlacement(nullptr) {}
  ~GameEvent_BotInterferedPlacement() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotInterferedPlacement(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from) : GameEvent_BotInterferedPlacement(nullptr, from) {}
  inline GameEvent_BotInterferedPlacement(GameEvent_BotInterferedPlacement&& from) noexcept
      : GameEvent_BotInterferedPlacement(nullptr, std::move(from)) {}
  inline GameEvent_BotInterferedPlacement& operator=(const GameEvent_BotInterferedPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotInterferedPlacement& operator=(GameEvent_BotInterferedPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotInterferedPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotInterferedPlacement* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotInterferedPlacement*>(
        &_GameEvent_BotInterferedPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(GameEvent_BotInterferedPlacement& a, GameEvent_BotInterferedPlacement& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotInterferedPlacement* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotInterferedPlacement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotInterferedPlacement* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotInterferedPlacement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotInterferedPlacement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotInterferedPlacement& from) { GameEvent_BotInterferedPlacement::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotInterferedPlacement* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotInterferedPlacement"; }

 protected:
  explicit GameEvent_BotInterferedPlacement(::google::protobuf::Arena* arena);
  GameEvent_BotInterferedPlacement(::google::protobuf::Arena* arena, const GameEvent_BotInterferedPlacement& from);
  GameEvent_BotInterferedPlacement(::google::protobuf::Arena* arena, GameEvent_BotInterferedPlacement&& from) noexcept
      : GameEvent_BotInterferedPlacement(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotInterferedPlacement)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotInterferedPlacement_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotInterferedPlacement& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotHeldBallDeliberately final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotHeldBallDeliberately) */ {
 public:
  inline GameEvent_BotHeldBallDeliberately() : GameEvent_BotHeldBallDeliberately(nullptr) {}
  ~GameEvent_BotHeldBallDeliberately() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotHeldBallDeliberately(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from) : GameEvent_BotHeldBallDeliberately(nullptr, from) {}
  inline GameEvent_BotHeldBallDeliberately(GameEvent_BotHeldBallDeliberately&& from) noexcept
      : GameEvent_BotHeldBallDeliberately(nullptr, std::move(from)) {}
  inline GameEvent_BotHeldBallDeliberately& operator=(const GameEvent_BotHeldBallDeliberately& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotHeldBallDeliberately& operator=(GameEvent_BotHeldBallDeliberately&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotHeldBallDeliberately& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotHeldBallDeliberately* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotHeldBallDeliberately*>(
        &_GameEvent_BotHeldBallDeliberately_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(GameEvent_BotHeldBallDeliberately& a, GameEvent_BotHeldBallDeliberately& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotHeldBallDeliberately* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotHeldBallDeliberately* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotHeldBallDeliberately* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotHeldBallDeliberately>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotHeldBallDeliberately& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotHeldBallDeliberately& from) { GameEvent_BotHeldBallDeliberately::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotHeldBallDeliberately* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotHeldBallDeliberately"; }

 protected:
  explicit GameEvent_BotHeldBallDeliberately(::google::protobuf::Arena* arena);
  GameEvent_BotHeldBallDeliberately(::google::protobuf::Arena* arena, const GameEvent_BotHeldBallDeliberately& from);
  GameEvent_BotHeldBallDeliberately(::google::protobuf::Arena* arena, GameEvent_BotHeldBallDeliberately&& from) noexcept
      : GameEvent_BotHeldBallDeliberately(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDurationFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float duration = 4;
  bool has_duration() const;
  void clear_duration() ;
  float duration() const;
  void set_duration(float value);

  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotHeldBallDeliberately)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotHeldBallDeliberately_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotHeldBallDeliberately& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float duration_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotDroppedParts final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotDroppedParts) */ {
 public:
  inline GameEvent_BotDroppedParts() : GameEvent_BotDroppedParts(nullptr) {}
  ~GameEvent_BotDroppedParts() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotDroppedParts(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotDroppedParts(const GameEvent_BotDroppedParts& from) : GameEvent_BotDroppedParts(nullptr, from) {}
  inline GameEvent_BotDroppedParts(GameEvent_BotDroppedParts&& from) noexcept
      : GameEvent_BotDroppedParts(nullptr, std::move(from)) {}
  inline GameEvent_BotDroppedParts& operator=(const GameEvent_BotDroppedParts& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotDroppedParts& operator=(GameEvent_BotDroppedParts&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotDroppedParts& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotDroppedParts* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotDroppedParts*>(
        &_GameEvent_BotDroppedParts_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(GameEvent_BotDroppedParts& a, GameEvent_BotDroppedParts& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotDroppedParts* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotDroppedParts* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotDroppedParts* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotDroppedParts>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotDroppedParts& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotDroppedParts& from) { GameEvent_BotDroppedParts::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotDroppedParts* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotDroppedParts"; }

 protected:
  explicit GameEvent_BotDroppedParts(::google::protobuf::Arena* arena);
  GameEvent_BotDroppedParts(::google::protobuf::Arena* arena, const GameEvent_BotDroppedParts& from);
  GameEvent_BotDroppedParts(::google::protobuf::Arena* arena, GameEvent_BotDroppedParts&& from) noexcept
      : GameEvent_BotDroppedParts(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kBallLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 ball_location = 4;
  bool has_ball_location() const;
  void clear_ball_location() ;
  const ::Vector2& ball_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_ball_location();
  ::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::Vector2* value);
  void unsafe_arena_set_allocated_ball_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_ball_location();

  private:
  const ::Vector2& _internal_ball_location() const;
  ::Vector2* _internal_mutable_ball_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotDroppedParts)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotDroppedParts_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotDroppedParts& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* ball_location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotDribbledBallTooFar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotDribbledBallTooFar) */ {
 public:
  inline GameEvent_BotDribbledBallTooFar() : GameEvent_BotDribbledBallTooFar(nullptr) {}
  ~GameEvent_BotDribbledBallTooFar() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotDribbledBallTooFar(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from) : GameEvent_BotDribbledBallTooFar(nullptr, from) {}
  inline GameEvent_BotDribbledBallTooFar(GameEvent_BotDribbledBallTooFar&& from) noexcept
      : GameEvent_BotDribbledBallTooFar(nullptr, std::move(from)) {}
  inline GameEvent_BotDribbledBallTooFar& operator=(const GameEvent_BotDribbledBallTooFar& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotDribbledBallTooFar& operator=(GameEvent_BotDribbledBallTooFar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotDribbledBallTooFar& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotDribbledBallTooFar* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotDribbledBallTooFar*>(
        &_GameEvent_BotDribbledBallTooFar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(GameEvent_BotDribbledBallTooFar& a, GameEvent_BotDribbledBallTooFar& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotDribbledBallTooFar* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotDribbledBallTooFar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotDribbledBallTooFar* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotDribbledBallTooFar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotDribbledBallTooFar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotDribbledBallTooFar& from) { GameEvent_BotDribbledBallTooFar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotDribbledBallTooFar* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotDribbledBallTooFar"; }

 protected:
  explicit GameEvent_BotDribbledBallTooFar(::google::protobuf::Arena* arena);
  GameEvent_BotDribbledBallTooFar(::google::protobuf::Arena* arena, const GameEvent_BotDribbledBallTooFar& from);
  GameEvent_BotDribbledBallTooFar(::google::protobuf::Arena* arena, GameEvent_BotDribbledBallTooFar&& from) noexcept
      : GameEvent_BotDribbledBallTooFar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 3,
    kEndFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 start = 3;
  bool has_start() const;
  void clear_start() ;
  const ::Vector2& start() const;
  PROTOBUF_NODISCARD ::Vector2* release_start();
  ::Vector2* mutable_start();
  void set_allocated_start(::Vector2* value);
  void unsafe_arena_set_allocated_start(::Vector2* value);
  ::Vector2* unsafe_arena_release_start();

  private:
  const ::Vector2& _internal_start() const;
  ::Vector2* _internal_mutable_start();

  public:
  // optional .Vector2 end = 4;
  bool has_end() const;
  void clear_end() ;
  const ::Vector2& end() const;
  PROTOBUF_NODISCARD ::Vector2* release_end();
  ::Vector2* mutable_end();
  void set_allocated_end(::Vector2* value);
  void unsafe_arena_set_allocated_end(::Vector2* value);
  ::Vector2* unsafe_arena_release_end();

  private:
  const ::Vector2& _internal_end() const;
  ::Vector2* _internal_mutable_end();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotDribbledBallTooFar)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotDribbledBallTooFar_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotDribbledBallTooFar& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* start_;
    ::Vector2* end_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotCrashUnique final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotCrashUnique) */ {
 public:
  inline GameEvent_BotCrashUnique() : GameEvent_BotCrashUnique(nullptr) {}
  ~GameEvent_BotCrashUnique() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotCrashUnique(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from) : GameEvent_BotCrashUnique(nullptr, from) {}
  inline GameEvent_BotCrashUnique(GameEvent_BotCrashUnique&& from) noexcept
      : GameEvent_BotCrashUnique(nullptr, std::move(from)) {}
  inline GameEvent_BotCrashUnique& operator=(const GameEvent_BotCrashUnique& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotCrashUnique& operator=(GameEvent_BotCrashUnique&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotCrashUnique& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotCrashUnique* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotCrashUnique*>(
        &_GameEvent_BotCrashUnique_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GameEvent_BotCrashUnique& a, GameEvent_BotCrashUnique& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotCrashUnique* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotCrashUnique* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotCrashUnique* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotCrashUnique>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotCrashUnique& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotCrashUnique& from) { GameEvent_BotCrashUnique::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotCrashUnique* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotCrashUnique"; }

 protected:
  explicit GameEvent_BotCrashUnique(::google::protobuf::Arena* arena);
  GameEvent_BotCrashUnique(::google::protobuf::Arena* arena, const GameEvent_BotCrashUnique& from);
  GameEvent_BotCrashUnique(::google::protobuf::Arena* arena, GameEvent_BotCrashUnique&& from) noexcept
      : GameEvent_BotCrashUnique(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kViolatorFieldNumber = 2,
    kVictimFieldNumber = 3,
    kCrashSpeedFieldNumber = 5,
    kSpeedDiffFieldNumber = 6,
    kCrashAngleFieldNumber = 7,
  };
  // optional .Vector2 location = 4;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 violator = 2;
  bool has_violator() const;
  void clear_violator() ;
  ::uint32_t violator() const;
  void set_violator(::uint32_t value);

  private:
  ::uint32_t _internal_violator() const;
  void _internal_set_violator(::uint32_t value);

  public:
  // optional uint32 victim = 3;
  bool has_victim() const;
  void clear_victim() ;
  ::uint32_t victim() const;
  void set_victim(::uint32_t value);

  private:
  ::uint32_t _internal_victim() const;
  void _internal_set_victim(::uint32_t value);

  public:
  // optional float crash_speed = 5;
  bool has_crash_speed() const;
  void clear_crash_speed() ;
  float crash_speed() const;
  void set_crash_speed(float value);

  private:
  float _internal_crash_speed() const;
  void _internal_set_crash_speed(float value);

  public:
  // optional float speed_diff = 6;
  bool has_speed_diff() const;
  void clear_speed_diff() ;
  float speed_diff() const;
  void set_speed_diff(float value);

  private:
  float _internal_speed_diff() const;
  void _internal_set_speed_diff(float value);

  public:
  // optional float crash_angle = 7;
  bool has_crash_angle() const;
  void clear_crash_angle() ;
  float crash_angle() const;
  void set_crash_angle(float value);

  private:
  float _internal_crash_angle() const;
  void _internal_set_crash_angle(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotCrashUnique)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotCrashUnique_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotCrashUnique& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t violator_;
    ::uint32_t victim_;
    float crash_speed_;
    float speed_diff_;
    float crash_angle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BotCrashDrawn final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BotCrashDrawn) */ {
 public:
  inline GameEvent_BotCrashDrawn() : GameEvent_BotCrashDrawn(nullptr) {}
  ~GameEvent_BotCrashDrawn() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BotCrashDrawn(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from) : GameEvent_BotCrashDrawn(nullptr, from) {}
  inline GameEvent_BotCrashDrawn(GameEvent_BotCrashDrawn&& from) noexcept
      : GameEvent_BotCrashDrawn(nullptr, std::move(from)) {}
  inline GameEvent_BotCrashDrawn& operator=(const GameEvent_BotCrashDrawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BotCrashDrawn& operator=(GameEvent_BotCrashDrawn&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BotCrashDrawn& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BotCrashDrawn* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BotCrashDrawn*>(
        &_GameEvent_BotCrashDrawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GameEvent_BotCrashDrawn& a, GameEvent_BotCrashDrawn& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BotCrashDrawn* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BotCrashDrawn* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BotCrashDrawn* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BotCrashDrawn>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BotCrashDrawn& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BotCrashDrawn& from) { GameEvent_BotCrashDrawn::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BotCrashDrawn* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BotCrashDrawn"; }

 protected:
  explicit GameEvent_BotCrashDrawn(::google::protobuf::Arena* arena);
  GameEvent_BotCrashDrawn(::google::protobuf::Arena* arena, const GameEvent_BotCrashDrawn& from);
  GameEvent_BotCrashDrawn(::google::protobuf::Arena* arena, GameEvent_BotCrashDrawn&& from) noexcept
      : GameEvent_BotCrashDrawn(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kBotYellowFieldNumber = 1,
    kBotBlueFieldNumber = 2,
    kCrashSpeedFieldNumber = 4,
    kSpeedDiffFieldNumber = 5,
    kCrashAngleFieldNumber = 6,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional uint32 bot_yellow = 1;
  bool has_bot_yellow() const;
  void clear_bot_yellow() ;
  ::uint32_t bot_yellow() const;
  void set_bot_yellow(::uint32_t value);

  private:
  ::uint32_t _internal_bot_yellow() const;
  void _internal_set_bot_yellow(::uint32_t value);

  public:
  // optional uint32 bot_blue = 2;
  bool has_bot_blue() const;
  void clear_bot_blue() ;
  ::uint32_t bot_blue() const;
  void set_bot_blue(::uint32_t value);

  private:
  ::uint32_t _internal_bot_blue() const;
  void _internal_set_bot_blue(::uint32_t value);

  public:
  // optional float crash_speed = 4;
  bool has_crash_speed() const;
  void clear_crash_speed() ;
  float crash_speed() const;
  void set_crash_speed(float value);

  private:
  float _internal_crash_speed() const;
  void _internal_set_crash_speed(float value);

  public:
  // optional float speed_diff = 5;
  bool has_speed_diff() const;
  void clear_speed_diff() ;
  float speed_diff() const;
  void set_speed_diff(float value);

  private:
  float _internal_speed_diff() const;
  void _internal_set_speed_diff(float value);

  public:
  // optional float crash_angle = 6;
  bool has_crash_angle() const;
  void clear_crash_angle() ;
  float crash_angle() const;
  void set_crash_angle(float value);

  private:
  float _internal_crash_angle() const;
  void _internal_set_crash_angle(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BotCrashDrawn)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BotCrashDrawn_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BotCrashDrawn& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::uint32_t bot_yellow_;
    ::uint32_t bot_blue_;
    float crash_speed_;
    float speed_diff_;
    float crash_angle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_BallLeftField final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.BallLeftField) */ {
 public:
  inline GameEvent_BallLeftField() : GameEvent_BallLeftField(nullptr) {}
  ~GameEvent_BallLeftField() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_BallLeftField(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_BallLeftField(const GameEvent_BallLeftField& from) : GameEvent_BallLeftField(nullptr, from) {}
  inline GameEvent_BallLeftField(GameEvent_BallLeftField&& from) noexcept
      : GameEvent_BallLeftField(nullptr, std::move(from)) {}
  inline GameEvent_BallLeftField& operator=(const GameEvent_BallLeftField& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_BallLeftField& operator=(GameEvent_BallLeftField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_BallLeftField& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_BallLeftField* internal_default_instance() {
    return reinterpret_cast<const GameEvent_BallLeftField*>(
        &_GameEvent_BallLeftField_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GameEvent_BallLeftField& a, GameEvent_BallLeftField& b) { a.Swap(&b); }
  inline void Swap(GameEvent_BallLeftField* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_BallLeftField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_BallLeftField* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_BallLeftField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_BallLeftField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_BallLeftField& from) { GameEvent_BallLeftField::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_BallLeftField* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.BallLeftField"; }

 protected:
  explicit GameEvent_BallLeftField(::google::protobuf::Arena* arena);
  GameEvent_BallLeftField(::google::protobuf::Arena* arena, const GameEvent_BallLeftField& from);
  GameEvent_BallLeftField(::google::protobuf::Arena* arena, GameEvent_BallLeftField&& from) noexcept
      : GameEvent_BallLeftField(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.BallLeftField)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_BallLeftField_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_BallLeftField& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTouchedOpponentInDefenseArea final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.AttackerTouchedOpponentInDefenseArea) */ {
 public:
  inline GameEvent_AttackerTouchedOpponentInDefenseArea() : GameEvent_AttackerTouchedOpponentInDefenseArea(nullptr) {}
  ~GameEvent_AttackerTouchedOpponentInDefenseArea() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedOpponentInDefenseArea(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) : GameEvent_AttackerTouchedOpponentInDefenseArea(nullptr, from) {}
  inline GameEvent_AttackerTouchedOpponentInDefenseArea(GameEvent_AttackerTouchedOpponentInDefenseArea&& from) noexcept
      : GameEvent_AttackerTouchedOpponentInDefenseArea(nullptr, std::move(from)) {}
  inline GameEvent_AttackerTouchedOpponentInDefenseArea& operator=(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_AttackerTouchedOpponentInDefenseArea& operator=(GameEvent_AttackerTouchedOpponentInDefenseArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_AttackerTouchedOpponentInDefenseArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_AttackerTouchedOpponentInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea*>(
        &_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(GameEvent_AttackerTouchedOpponentInDefenseArea& a, GameEvent_AttackerTouchedOpponentInDefenseArea& b) { a.Swap(&b); }
  inline void Swap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_AttackerTouchedOpponentInDefenseArea* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_AttackerTouchedOpponentInDefenseArea>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) { GameEvent_AttackerTouchedOpponentInDefenseArea::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.AttackerTouchedOpponentInDefenseArea"; }

 protected:
  explicit GameEvent_AttackerTouchedOpponentInDefenseArea(::google::protobuf::Arena* arena);
  GameEvent_AttackerTouchedOpponentInDefenseArea(::google::protobuf::Arena* arena, const GameEvent_AttackerTouchedOpponentInDefenseArea& from);
  GameEvent_AttackerTouchedOpponentInDefenseArea(::google::protobuf::Arena* arena, GameEvent_AttackerTouchedOpponentInDefenseArea&& from) noexcept
      : GameEvent_AttackerTouchedOpponentInDefenseArea(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kVictimFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional uint32 victim = 4;
  bool has_victim() const;
  void clear_victim() ;
  ::uint32_t victim() const;
  void set_victim(::uint32_t value);

  private:
  ::uint32_t _internal_victim() const;
  void _internal_set_victim(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.AttackerTouchedOpponentInDefenseArea)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_AttackerTouchedOpponentInDefenseArea& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    ::uint32_t victim_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTouchedBallInDefenseArea final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.AttackerTouchedBallInDefenseArea) */ {
 public:
  inline GameEvent_AttackerTouchedBallInDefenseArea() : GameEvent_AttackerTouchedBallInDefenseArea(nullptr) {}
  ~GameEvent_AttackerTouchedBallInDefenseArea() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedBallInDefenseArea(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from) : GameEvent_AttackerTouchedBallInDefenseArea(nullptr, from) {}
  inline GameEvent_AttackerTouchedBallInDefenseArea(GameEvent_AttackerTouchedBallInDefenseArea&& from) noexcept
      : GameEvent_AttackerTouchedBallInDefenseArea(nullptr, std::move(from)) {}
  inline GameEvent_AttackerTouchedBallInDefenseArea& operator=(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_AttackerTouchedBallInDefenseArea& operator=(GameEvent_AttackerTouchedBallInDefenseArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_AttackerTouchedBallInDefenseArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_AttackerTouchedBallInDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTouchedBallInDefenseArea*>(
        &_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(GameEvent_AttackerTouchedBallInDefenseArea& a, GameEvent_AttackerTouchedBallInDefenseArea& b) { a.Swap(&b); }
  inline void Swap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_AttackerTouchedBallInDefenseArea* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_AttackerTouchedBallInDefenseArea>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) { GameEvent_AttackerTouchedBallInDefenseArea::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.AttackerTouchedBallInDefenseArea"; }

 protected:
  explicit GameEvent_AttackerTouchedBallInDefenseArea(::google::protobuf::Arena* arena);
  GameEvent_AttackerTouchedBallInDefenseArea(::google::protobuf::Arena* arena, const GameEvent_AttackerTouchedBallInDefenseArea& from);
  GameEvent_AttackerTouchedBallInDefenseArea(::google::protobuf::Arena* arena, GameEvent_AttackerTouchedBallInDefenseArea&& from) noexcept
      : GameEvent_AttackerTouchedBallInDefenseArea(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.AttackerTouchedBallInDefenseArea)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_AttackerTouchedBallInDefenseArea& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_AttackerTooCloseToDefenseArea final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.AttackerTooCloseToDefenseArea) */ {
 public:
  inline GameEvent_AttackerTooCloseToDefenseArea() : GameEvent_AttackerTooCloseToDefenseArea(nullptr) {}
  ~GameEvent_AttackerTooCloseToDefenseArea() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_AttackerTooCloseToDefenseArea(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from) : GameEvent_AttackerTooCloseToDefenseArea(nullptr, from) {}
  inline GameEvent_AttackerTooCloseToDefenseArea(GameEvent_AttackerTooCloseToDefenseArea&& from) noexcept
      : GameEvent_AttackerTooCloseToDefenseArea(nullptr, std::move(from)) {}
  inline GameEvent_AttackerTooCloseToDefenseArea& operator=(const GameEvent_AttackerTooCloseToDefenseArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_AttackerTooCloseToDefenseArea& operator=(GameEvent_AttackerTooCloseToDefenseArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_AttackerTooCloseToDefenseArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_AttackerTooCloseToDefenseArea* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerTooCloseToDefenseArea*>(
        &_GameEvent_AttackerTooCloseToDefenseArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(GameEvent_AttackerTooCloseToDefenseArea& a, GameEvent_AttackerTooCloseToDefenseArea& b) { a.Swap(&b); }
  inline void Swap(GameEvent_AttackerTooCloseToDefenseArea* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_AttackerTooCloseToDefenseArea* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_AttackerTooCloseToDefenseArea* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_AttackerTooCloseToDefenseArea>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) { GameEvent_AttackerTooCloseToDefenseArea::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.AttackerTooCloseToDefenseArea"; }

 protected:
  explicit GameEvent_AttackerTooCloseToDefenseArea(::google::protobuf::Arena* arena);
  GameEvent_AttackerTooCloseToDefenseArea(::google::protobuf::Arena* arena, const GameEvent_AttackerTooCloseToDefenseArea& from);
  GameEvent_AttackerTooCloseToDefenseArea(::google::protobuf::Arena* arena, GameEvent_AttackerTooCloseToDefenseArea&& from) noexcept
      : GameEvent_AttackerTooCloseToDefenseArea(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kBallLocationFieldNumber = 5,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
    kDistanceFieldNumber = 4,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 ball_location = 5;
  bool has_ball_location() const;
  void clear_ball_location() ;
  const ::Vector2& ball_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_ball_location();
  ::Vector2* mutable_ball_location();
  void set_allocated_ball_location(::Vector2* value);
  void unsafe_arena_set_allocated_ball_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_ball_location();

  private:
  const ::Vector2& _internal_ball_location() const;
  ::Vector2* _internal_mutable_ball_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance() ;
  float distance() const;
  void set_distance(float value);

  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.AttackerTooCloseToDefenseArea)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_AttackerTooCloseToDefenseArea_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_AttackerTooCloseToDefenseArea& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* ball_location_;
    int by_team_;
    ::uint32_t by_bot_;
    float distance_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_AttackerDoubleTouchedBall final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.AttackerDoubleTouchedBall) */ {
 public:
  inline GameEvent_AttackerDoubleTouchedBall() : GameEvent_AttackerDoubleTouchedBall(nullptr) {}
  ~GameEvent_AttackerDoubleTouchedBall() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_AttackerDoubleTouchedBall(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from) : GameEvent_AttackerDoubleTouchedBall(nullptr, from) {}
  inline GameEvent_AttackerDoubleTouchedBall(GameEvent_AttackerDoubleTouchedBall&& from) noexcept
      : GameEvent_AttackerDoubleTouchedBall(nullptr, std::move(from)) {}
  inline GameEvent_AttackerDoubleTouchedBall& operator=(const GameEvent_AttackerDoubleTouchedBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_AttackerDoubleTouchedBall& operator=(GameEvent_AttackerDoubleTouchedBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_AttackerDoubleTouchedBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_AttackerDoubleTouchedBall* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AttackerDoubleTouchedBall*>(
        &_GameEvent_AttackerDoubleTouchedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(GameEvent_AttackerDoubleTouchedBall& a, GameEvent_AttackerDoubleTouchedBall& b) { a.Swap(&b); }
  inline void Swap(GameEvent_AttackerDoubleTouchedBall* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_AttackerDoubleTouchedBall* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_AttackerDoubleTouchedBall* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_AttackerDoubleTouchedBall>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_AttackerDoubleTouchedBall& from) { GameEvent_AttackerDoubleTouchedBall::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_AttackerDoubleTouchedBall* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.AttackerDoubleTouchedBall"; }

 protected:
  explicit GameEvent_AttackerDoubleTouchedBall(::google::protobuf::Arena* arena);
  GameEvent_AttackerDoubleTouchedBall(::google::protobuf::Arena* arena, const GameEvent_AttackerDoubleTouchedBall& from);
  GameEvent_AttackerDoubleTouchedBall(::google::protobuf::Arena* arena, GameEvent_AttackerDoubleTouchedBall&& from) noexcept
      : GameEvent_AttackerDoubleTouchedBall(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.AttackerDoubleTouchedBall)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_AttackerDoubleTouchedBall_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_AttackerDoubleTouchedBall& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_AimlessKick final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.AimlessKick) */ {
 public:
  inline GameEvent_AimlessKick() : GameEvent_AimlessKick(nullptr) {}
  ~GameEvent_AimlessKick() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_AimlessKick(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_AimlessKick(const GameEvent_AimlessKick& from) : GameEvent_AimlessKick(nullptr, from) {}
  inline GameEvent_AimlessKick(GameEvent_AimlessKick&& from) noexcept
      : GameEvent_AimlessKick(nullptr, std::move(from)) {}
  inline GameEvent_AimlessKick& operator=(const GameEvent_AimlessKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_AimlessKick& operator=(GameEvent_AimlessKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_AimlessKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_AimlessKick* internal_default_instance() {
    return reinterpret_cast<const GameEvent_AimlessKick*>(
        &_GameEvent_AimlessKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GameEvent_AimlessKick& a, GameEvent_AimlessKick& b) { a.Swap(&b); }
  inline void Swap(GameEvent_AimlessKick* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_AimlessKick* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_AimlessKick* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_AimlessKick>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_AimlessKick& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_AimlessKick& from) { GameEvent_AimlessKick::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_AimlessKick* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.AimlessKick"; }

 protected:
  explicit GameEvent_AimlessKick(::google::protobuf::Arena* arena);
  GameEvent_AimlessKick(::google::protobuf::Arena* arena, const GameEvent_AimlessKick& from);
  GameEvent_AimlessKick(::google::protobuf::Arena* arena, GameEvent_AimlessKick&& from) noexcept
      : GameEvent_AimlessKick(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLocationFieldNumber = 3,
    kKickLocationFieldNumber = 4,
    kByTeamFieldNumber = 1,
    kByBotFieldNumber = 2,
  };
  // optional .Vector2 location = 3;
  bool has_location() const;
  void clear_location() ;
  const ::Vector2& location() const;
  PROTOBUF_NODISCARD ::Vector2* release_location();
  ::Vector2* mutable_location();
  void set_allocated_location(::Vector2* value);
  void unsafe_arena_set_allocated_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_location();

  private:
  const ::Vector2& _internal_location() const;
  ::Vector2* _internal_mutable_location();

  public:
  // optional .Vector2 kick_location = 4;
  bool has_kick_location() const;
  void clear_kick_location() ;
  const ::Vector2& kick_location() const;
  PROTOBUF_NODISCARD ::Vector2* release_kick_location();
  ::Vector2* mutable_kick_location();
  void set_allocated_kick_location(::Vector2* value);
  void unsafe_arena_set_allocated_kick_location(::Vector2* value);
  ::Vector2* unsafe_arena_release_kick_location();

  private:
  const ::Vector2& _internal_kick_location() const;
  ::Vector2* _internal_mutable_kick_location();

  public:
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // optional uint32 by_bot = 2;
  bool has_by_bot() const;
  void clear_by_bot() ;
  ::uint32_t by_bot() const;
  void set_by_bot(::uint32_t value);

  private:
  ::uint32_t _internal_by_bot() const;
  void _internal_set_by_bot(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.AimlessKick)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_AimlessKick_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_AimlessKick& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::Vector2* location_;
    ::Vector2* kick_location_;
    int by_team_;
    ::uint32_t by_bot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent) */ {
 public:
  inline GameEvent() : GameEvent(nullptr) {}
  ~GameEvent() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent(const GameEvent& from) : GameEvent(nullptr, from) {}
  inline GameEvent(GameEvent&& from) noexcept
      : GameEvent(nullptr, std::move(from)) {}
  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent& operator=(GameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kBallLeftFieldTouchLine = 6,
    kBallLeftFieldGoalLine = 7,
    kAimlessKick = 11,
    kAttackerTooCloseToDefenseArea = 19,
    kDefenderInDefenseArea = 31,
    kBoundaryCrossing = 43,
    kKeeperHeldBall = 13,
    kBotDribbledBallTooFar = 17,
    kBotPushedBot = 24,
    kBotHeldBallDeliberately = 26,
    kBotTippedOver = 27,
    kBotDroppedParts = 51,
    kAttackerTouchedBallInDefenseArea = 15,
    kBotKickedBallTooFast = 18,
    kBotCrashUnique = 22,
    kBotCrashDrawn = 21,
    kDefenderTooCloseToKickPoint = 29,
    kBotTooFastInStop = 28,
    kBotInterferedPlacement = 20,
    kPossibleGoal = 39,
    kGoal = 8,
    kInvalidGoal = 44,
    kAttackerDoubleTouchedBall = 14,
    kPlacementSucceeded = 5,
    kPenaltyKickFailed = 45,
    kNoProgressInGame = 2,
    kPlacementFailed = 3,
    kMultipleCards = 32,
    kMultipleFouls = 34,
    kBotSubstitution = 37,
    kExcessiveBotSubstitution = 52,
    kTooManyRobots = 38,
    kChallengeFlag = 46,
    kChallengeFlagHandled = 48,
    kEmergencyStop = 47,
    kUnsportingBehaviorMinor = 35,
    kUnsportingBehaviorMajor = 36,
    kPrepared = 1,
    kIndirectGoal = 9,
    kChippedGoal = 10,
    kKickTimeout = 12,
    kAttackerTouchedOpponentInDefenseArea = 16,
    kAttackerTouchedOpponentInDefenseAreaSkipped = 42,
    kBotCrashUniqueSkipped = 23,
    kBotPushedBotSkipped = 25,
    kDefenderInDefenseAreaPartially = 30,
    kMultiplePlacementFailures = 33,
    EVENT_NOT_SET = 0,
  };
  static inline const GameEvent* internal_default_instance() {
    return reinterpret_cast<const GameEvent*>(
        &_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(GameEvent& a, GameEvent& b) { a.Swap(&b); }
  inline void Swap(GameEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent& from) { GameEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent"; }

 protected:
  explicit GameEvent(::google::protobuf::Arena* arena);
  GameEvent(::google::protobuf::Arena* arena, const GameEvent& from);
  GameEvent(::google::protobuf::Arena* arena, GameEvent&& from) noexcept
      : GameEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using BallLeftField = GameEvent_BallLeftField;
  using AimlessKick = GameEvent_AimlessKick;
  using Goal = GameEvent_Goal;
  using IndirectGoal = GameEvent_IndirectGoal;
  using ChippedGoal = GameEvent_ChippedGoal;
  using BotTooFastInStop = GameEvent_BotTooFastInStop;
  using DefenderTooCloseToKickPoint = GameEvent_DefenderTooCloseToKickPoint;
  using BotCrashDrawn = GameEvent_BotCrashDrawn;
  using BotCrashUnique = GameEvent_BotCrashUnique;
  using BotPushedBot = GameEvent_BotPushedBot;
  using BotTippedOver = GameEvent_BotTippedOver;
  using BotDroppedParts = GameEvent_BotDroppedParts;
  using DefenderInDefenseArea = GameEvent_DefenderInDefenseArea;
  using DefenderInDefenseAreaPartially = GameEvent_DefenderInDefenseAreaPartially;
  using AttackerTouchedBallInDefenseArea = GameEvent_AttackerTouchedBallInDefenseArea;
  using BotKickedBallTooFast = GameEvent_BotKickedBallTooFast;
  using BotDribbledBallTooFar = GameEvent_BotDribbledBallTooFar;
  using AttackerTouchedOpponentInDefenseArea = GameEvent_AttackerTouchedOpponentInDefenseArea;
  using AttackerDoubleTouchedBall = GameEvent_AttackerDoubleTouchedBall;
  using AttackerTooCloseToDefenseArea = GameEvent_AttackerTooCloseToDefenseArea;
  using BotHeldBallDeliberately = GameEvent_BotHeldBallDeliberately;
  using BotInterferedPlacement = GameEvent_BotInterferedPlacement;
  using MultipleCards = GameEvent_MultipleCards;
  using MultipleFouls = GameEvent_MultipleFouls;
  using MultiplePlacementFailures = GameEvent_MultiplePlacementFailures;
  using KickTimeout = GameEvent_KickTimeout;
  using NoProgressInGame = GameEvent_NoProgressInGame;
  using PlacementFailed = GameEvent_PlacementFailed;
  using UnsportingBehaviorMinor = GameEvent_UnsportingBehaviorMinor;
  using UnsportingBehaviorMajor = GameEvent_UnsportingBehaviorMajor;
  using KeeperHeldBall = GameEvent_KeeperHeldBall;
  using PlacementSucceeded = GameEvent_PlacementSucceeded;
  using Prepared = GameEvent_Prepared;
  using BotSubstitution = GameEvent_BotSubstitution;
  using ExcessiveBotSubstitution = GameEvent_ExcessiveBotSubstitution;
  using ChallengeFlag = GameEvent_ChallengeFlag;
  using ChallengeFlagHandled = GameEvent_ChallengeFlagHandled;
  using EmergencyStop = GameEvent_EmergencyStop;
  using TooManyRobots = GameEvent_TooManyRobots;
  using BoundaryCrossing = GameEvent_BoundaryCrossing;
  using PenaltyKickFailed = GameEvent_PenaltyKickFailed;
  using Type = GameEvent_Type;
  static constexpr Type UNKNOWN_GAME_EVENT_TYPE = GameEvent_Type_UNKNOWN_GAME_EVENT_TYPE;
  static constexpr Type BALL_LEFT_FIELD_TOUCH_LINE = GameEvent_Type_BALL_LEFT_FIELD_TOUCH_LINE;
  static constexpr Type BALL_LEFT_FIELD_GOAL_LINE = GameEvent_Type_BALL_LEFT_FIELD_GOAL_LINE;
  static constexpr Type AIMLESS_KICK = GameEvent_Type_AIMLESS_KICK;
  static constexpr Type ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = GameEvent_Type_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA;
  static constexpr Type DEFENDER_IN_DEFENSE_AREA = GameEvent_Type_DEFENDER_IN_DEFENSE_AREA;
  static constexpr Type BOUNDARY_CROSSING = GameEvent_Type_BOUNDARY_CROSSING;
  static constexpr Type KEEPER_HELD_BALL = GameEvent_Type_KEEPER_HELD_BALL;
  static constexpr Type BOT_DRIBBLED_BALL_TOO_FAR = GameEvent_Type_BOT_DRIBBLED_BALL_TOO_FAR;
  static constexpr Type BOT_PUSHED_BOT = GameEvent_Type_BOT_PUSHED_BOT;
  static constexpr Type BOT_HELD_BALL_DELIBERATELY = GameEvent_Type_BOT_HELD_BALL_DELIBERATELY;
  static constexpr Type BOT_TIPPED_OVER = GameEvent_Type_BOT_TIPPED_OVER;
  static constexpr Type BOT_DROPPED_PARTS = GameEvent_Type_BOT_DROPPED_PARTS;
  static constexpr Type ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = GameEvent_Type_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA;
  static constexpr Type BOT_KICKED_BALL_TOO_FAST = GameEvent_Type_BOT_KICKED_BALL_TOO_FAST;
  static constexpr Type BOT_CRASH_UNIQUE = GameEvent_Type_BOT_CRASH_UNIQUE;
  static constexpr Type BOT_CRASH_DRAWN = GameEvent_Type_BOT_CRASH_DRAWN;
  static constexpr Type DEFENDER_TOO_CLOSE_TO_KICK_POINT = GameEvent_Type_DEFENDER_TOO_CLOSE_TO_KICK_POINT;
  static constexpr Type BOT_TOO_FAST_IN_STOP = GameEvent_Type_BOT_TOO_FAST_IN_STOP;
  static constexpr Type BOT_INTERFERED_PLACEMENT = GameEvent_Type_BOT_INTERFERED_PLACEMENT;
  static constexpr Type EXCESSIVE_BOT_SUBSTITUTION = GameEvent_Type_EXCESSIVE_BOT_SUBSTITUTION;
  static constexpr Type POSSIBLE_GOAL = GameEvent_Type_POSSIBLE_GOAL;
  static constexpr Type GOAL = GameEvent_Type_GOAL;
  static constexpr Type INVALID_GOAL = GameEvent_Type_INVALID_GOAL;
  static constexpr Type ATTACKER_DOUBLE_TOUCHED_BALL = GameEvent_Type_ATTACKER_DOUBLE_TOUCHED_BALL;
  static constexpr Type PLACEMENT_SUCCEEDED = GameEvent_Type_PLACEMENT_SUCCEEDED;
  static constexpr Type PENALTY_KICK_FAILED = GameEvent_Type_PENALTY_KICK_FAILED;
  static constexpr Type NO_PROGRESS_IN_GAME = GameEvent_Type_NO_PROGRESS_IN_GAME;
  static constexpr Type PLACEMENT_FAILED = GameEvent_Type_PLACEMENT_FAILED;
  static constexpr Type MULTIPLE_CARDS = GameEvent_Type_MULTIPLE_CARDS;
  static constexpr Type MULTIPLE_FOULS = GameEvent_Type_MULTIPLE_FOULS;
  static constexpr Type BOT_SUBSTITUTION = GameEvent_Type_BOT_SUBSTITUTION;
  static constexpr Type TOO_MANY_ROBOTS = GameEvent_Type_TOO_MANY_ROBOTS;
  static constexpr Type CHALLENGE_FLAG = GameEvent_Type_CHALLENGE_FLAG;
  static constexpr Type CHALLENGE_FLAG_HANDLED = GameEvent_Type_CHALLENGE_FLAG_HANDLED;
  static constexpr Type EMERGENCY_STOP = GameEvent_Type_EMERGENCY_STOP;
  static constexpr Type UNSPORTING_BEHAVIOR_MINOR = GameEvent_Type_UNSPORTING_BEHAVIOR_MINOR;
  static constexpr Type UNSPORTING_BEHAVIOR_MAJOR = GameEvent_Type_UNSPORTING_BEHAVIOR_MAJOR;
  [[deprecated]] static constexpr Type PREPARED = GameEvent_Type_PREPARED;
  [[deprecated]] static constexpr Type INDIRECT_GOAL = GameEvent_Type_INDIRECT_GOAL;
  [[deprecated]] static constexpr Type CHIPPED_GOAL = GameEvent_Type_CHIPPED_GOAL;
  [[deprecated]] static constexpr Type KICK_TIMEOUT = GameEvent_Type_KICK_TIMEOUT;
  [[deprecated]] static constexpr Type ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
  [[deprecated]] static constexpr Type ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED = GameEvent_Type_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED;
  [[deprecated]] static constexpr Type BOT_CRASH_UNIQUE_SKIPPED = GameEvent_Type_BOT_CRASH_UNIQUE_SKIPPED;
  [[deprecated]] static constexpr Type BOT_PUSHED_BOT_SKIPPED = GameEvent_Type_BOT_PUSHED_BOT_SKIPPED;
  [[deprecated]] static constexpr Type DEFENDER_IN_DEFENSE_AREA_PARTIALLY = GameEvent_Type_DEFENDER_IN_DEFENSE_AREA_PARTIALLY;
  [[deprecated]] static constexpr Type MULTIPLE_PLACEMENT_FAILURES = GameEvent_Type_MULTIPLE_PLACEMENT_FAILURES;
  static inline bool Type_IsValid(int value) {
    return GameEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = GameEvent_Type_Type_MIN;
  static constexpr Type Type_MAX = GameEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = GameEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return GameEvent_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return GameEvent_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return GameEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kOriginFieldNumber = 41,
    kIdFieldNumber = 50,
    kCreatedTimestampFieldNumber = 49,
    kTypeFieldNumber = 40,
    kBallLeftFieldTouchLineFieldNumber = 6,
    kBallLeftFieldGoalLineFieldNumber = 7,
    kAimlessKickFieldNumber = 11,
    kAttackerTooCloseToDefenseAreaFieldNumber = 19,
    kDefenderInDefenseAreaFieldNumber = 31,
    kBoundaryCrossingFieldNumber = 43,
    kKeeperHeldBallFieldNumber = 13,
    kBotDribbledBallTooFarFieldNumber = 17,
    kBotPushedBotFieldNumber = 24,
    kBotHeldBallDeliberatelyFieldNumber = 26,
    kBotTippedOverFieldNumber = 27,
    kBotDroppedPartsFieldNumber = 51,
    kAttackerTouchedBallInDefenseAreaFieldNumber = 15,
    kBotKickedBallTooFastFieldNumber = 18,
    kBotCrashUniqueFieldNumber = 22,
    kBotCrashDrawnFieldNumber = 21,
    kDefenderTooCloseToKickPointFieldNumber = 29,
    kBotTooFastInStopFieldNumber = 28,
    kBotInterferedPlacementFieldNumber = 20,
    kPossibleGoalFieldNumber = 39,
    kGoalFieldNumber = 8,
    kInvalidGoalFieldNumber = 44,
    kAttackerDoubleTouchedBallFieldNumber = 14,
    kPlacementSucceededFieldNumber = 5,
    kPenaltyKickFailedFieldNumber = 45,
    kNoProgressInGameFieldNumber = 2,
    kPlacementFailedFieldNumber = 3,
    kMultipleCardsFieldNumber = 32,
    kMultipleFoulsFieldNumber = 34,
    kBotSubstitutionFieldNumber = 37,
    kExcessiveBotSubstitutionFieldNumber = 52,
    kTooManyRobotsFieldNumber = 38,
    kChallengeFlagFieldNumber = 46,
    kChallengeFlagHandledFieldNumber = 48,
    kEmergencyStopFieldNumber = 47,
    kUnsportingBehaviorMinorFieldNumber = 35,
    kUnsportingBehaviorMajorFieldNumber = 36,
    kPreparedFieldNumber = 1,
    kIndirectGoalFieldNumber = 9,
    kChippedGoalFieldNumber = 10,
    kKickTimeoutFieldNumber = 12,
    kAttackerTouchedOpponentInDefenseAreaFieldNumber = 16,
    kAttackerTouchedOpponentInDefenseAreaSkippedFieldNumber = 42,
    kBotCrashUniqueSkippedFieldNumber = 23,
    kBotPushedBotSkippedFieldNumber = 25,
    kDefenderInDefenseAreaPartiallyFieldNumber = 30,
    kMultiplePlacementFailuresFieldNumber = 33,
  };
  // repeated string origin = 41;
  int origin_size() const;
  private:
  int _internal_origin_size() const;

  public:
  void clear_origin() ;
  const std::string& origin(int index) const;
  std::string* mutable_origin(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin(int index, Arg_&& value, Args_... args);
  std::string* add_origin();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_origin(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin();

  public:
  // optional string id = 50;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // optional uint64 created_timestamp = 49;
  bool has_created_timestamp() const;
  void clear_created_timestamp() ;
  ::uint64_t created_timestamp() const;
  void set_created_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_created_timestamp() const;
  void _internal_set_created_timestamp(::uint64_t value);

  public:
  // optional .GameEvent.Type type = 40;
  bool has_type() const;
  void clear_type() ;
  ::GameEvent_Type type() const;
  void set_type(::GameEvent_Type value);

  private:
  ::GameEvent_Type _internal_type() const;
  void _internal_set_type(::GameEvent_Type value);

  public:
  // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
  bool has_ball_left_field_touch_line() const;
  private:
  bool _internal_has_ball_left_field_touch_line() const;

  public:
  void clear_ball_left_field_touch_line() ;
  const ::GameEvent_BallLeftField& ball_left_field_touch_line() const;
  PROTOBUF_NODISCARD ::GameEvent_BallLeftField* release_ball_left_field_touch_line();
  ::GameEvent_BallLeftField* mutable_ball_left_field_touch_line();
  void set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* value);
  void unsafe_arena_set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* value);
  ::GameEvent_BallLeftField* unsafe_arena_release_ball_left_field_touch_line();

  private:
  const ::GameEvent_BallLeftField& _internal_ball_left_field_touch_line() const;
  ::GameEvent_BallLeftField* _internal_mutable_ball_left_field_touch_line();

  public:
  // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
  bool has_ball_left_field_goal_line() const;
  private:
  bool _internal_has_ball_left_field_goal_line() const;

  public:
  void clear_ball_left_field_goal_line() ;
  const ::GameEvent_BallLeftField& ball_left_field_goal_line() const;
  PROTOBUF_NODISCARD ::GameEvent_BallLeftField* release_ball_left_field_goal_line();
  ::GameEvent_BallLeftField* mutable_ball_left_field_goal_line();
  void set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* value);
  void unsafe_arena_set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* value);
  ::GameEvent_BallLeftField* unsafe_arena_release_ball_left_field_goal_line();

  private:
  const ::GameEvent_BallLeftField& _internal_ball_left_field_goal_line() const;
  ::GameEvent_BallLeftField* _internal_mutable_ball_left_field_goal_line();

  public:
  // .GameEvent.AimlessKick aimless_kick = 11;
  bool has_aimless_kick() const;
  private:
  bool _internal_has_aimless_kick() const;

  public:
  void clear_aimless_kick() ;
  const ::GameEvent_AimlessKick& aimless_kick() const;
  PROTOBUF_NODISCARD ::GameEvent_AimlessKick* release_aimless_kick();
  ::GameEvent_AimlessKick* mutable_aimless_kick();
  void set_allocated_aimless_kick(::GameEvent_AimlessKick* value);
  void unsafe_arena_set_allocated_aimless_kick(::GameEvent_AimlessKick* value);
  ::GameEvent_AimlessKick* unsafe_arena_release_aimless_kick();

  private:
  const ::GameEvent_AimlessKick& _internal_aimless_kick() const;
  ::GameEvent_AimlessKick* _internal_mutable_aimless_kick();

  public:
  // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
  bool has_attacker_too_close_to_defense_area() const;
  private:
  bool _internal_has_attacker_too_close_to_defense_area() const;

  public:
  void clear_attacker_too_close_to_defense_area() ;
  const ::GameEvent_AttackerTooCloseToDefenseArea& attacker_too_close_to_defense_area() const;
  PROTOBUF_NODISCARD ::GameEvent_AttackerTooCloseToDefenseArea* release_attacker_too_close_to_defense_area();
  ::GameEvent_AttackerTooCloseToDefenseArea* mutable_attacker_too_close_to_defense_area();
  void set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* value);
  void unsafe_arena_set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* value);
  ::GameEvent_AttackerTooCloseToDefenseArea* unsafe_arena_release_attacker_too_close_to_defense_area();

  private:
  const ::GameEvent_AttackerTooCloseToDefenseArea& _internal_attacker_too_close_to_defense_area() const;
  ::GameEvent_AttackerTooCloseToDefenseArea* _internal_mutable_attacker_too_close_to_defense_area();

  public:
  // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
  bool has_defender_in_defense_area() const;
  private:
  bool _internal_has_defender_in_defense_area() const;

  public:
  void clear_defender_in_defense_area() ;
  const ::GameEvent_DefenderInDefenseArea& defender_in_defense_area() const;
  PROTOBUF_NODISCARD ::GameEvent_DefenderInDefenseArea* release_defender_in_defense_area();
  ::GameEvent_DefenderInDefenseArea* mutable_defender_in_defense_area();
  void set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* value);
  void unsafe_arena_set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* value);
  ::GameEvent_DefenderInDefenseArea* unsafe_arena_release_defender_in_defense_area();

  private:
  const ::GameEvent_DefenderInDefenseArea& _internal_defender_in_defense_area() const;
  ::GameEvent_DefenderInDefenseArea* _internal_mutable_defender_in_defense_area();

  public:
  // .GameEvent.BoundaryCrossing boundary_crossing = 43;
  bool has_boundary_crossing() const;
  private:
  bool _internal_has_boundary_crossing() const;

  public:
  void clear_boundary_crossing() ;
  const ::GameEvent_BoundaryCrossing& boundary_crossing() const;
  PROTOBUF_NODISCARD ::GameEvent_BoundaryCrossing* release_boundary_crossing();
  ::GameEvent_BoundaryCrossing* mutable_boundary_crossing();
  void set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* value);
  void unsafe_arena_set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* value);
  ::GameEvent_BoundaryCrossing* unsafe_arena_release_boundary_crossing();

  private:
  const ::GameEvent_BoundaryCrossing& _internal_boundary_crossing() const;
  ::GameEvent_BoundaryCrossing* _internal_mutable_boundary_crossing();

  public:
  // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
  bool has_keeper_held_ball() const;
  private:
  bool _internal_has_keeper_held_ball() const;

  public:
  void clear_keeper_held_ball() ;
  const ::GameEvent_KeeperHeldBall& keeper_held_ball() const;
  PROTOBUF_NODISCARD ::GameEvent_KeeperHeldBall* release_keeper_held_ball();
  ::GameEvent_KeeperHeldBall* mutable_keeper_held_ball();
  void set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* value);
  void unsafe_arena_set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* value);
  ::GameEvent_KeeperHeldBall* unsafe_arena_release_keeper_held_ball();

  private:
  const ::GameEvent_KeeperHeldBall& _internal_keeper_held_ball() const;
  ::GameEvent_KeeperHeldBall* _internal_mutable_keeper_held_ball();

  public:
  // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
  bool has_bot_dribbled_ball_too_far() const;
  private:
  bool _internal_has_bot_dribbled_ball_too_far() const;

  public:
  void clear_bot_dribbled_ball_too_far() ;
  const ::GameEvent_BotDribbledBallTooFar& bot_dribbled_ball_too_far() const;
  PROTOBUF_NODISCARD ::GameEvent_BotDribbledBallTooFar* release_bot_dribbled_ball_too_far();
  ::GameEvent_BotDribbledBallTooFar* mutable_bot_dribbled_ball_too_far();
  void set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* value);
  void unsafe_arena_set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* value);
  ::GameEvent_BotDribbledBallTooFar* unsafe_arena_release_bot_dribbled_ball_too_far();

  private:
  const ::GameEvent_BotDribbledBallTooFar& _internal_bot_dribbled_ball_too_far() const;
  ::GameEvent_BotDribbledBallTooFar* _internal_mutable_bot_dribbled_ball_too_far();

  public:
  // .GameEvent.BotPushedBot bot_pushed_bot = 24;
  bool has_bot_pushed_bot() const;
  private:
  bool _internal_has_bot_pushed_bot() const;

  public:
  void clear_bot_pushed_bot() ;
  const ::GameEvent_BotPushedBot& bot_pushed_bot() const;
  PROTOBUF_NODISCARD ::GameEvent_BotPushedBot* release_bot_pushed_bot();
  ::GameEvent_BotPushedBot* mutable_bot_pushed_bot();
  void set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* value);
  void unsafe_arena_set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* value);
  ::GameEvent_BotPushedBot* unsafe_arena_release_bot_pushed_bot();

  private:
  const ::GameEvent_BotPushedBot& _internal_bot_pushed_bot() const;
  ::GameEvent_BotPushedBot* _internal_mutable_bot_pushed_bot();

  public:
  // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
  bool has_bot_held_ball_deliberately() const;
  private:
  bool _internal_has_bot_held_ball_deliberately() const;

  public:
  void clear_bot_held_ball_deliberately() ;
  const ::GameEvent_BotHeldBallDeliberately& bot_held_ball_deliberately() const;
  PROTOBUF_NODISCARD ::GameEvent_BotHeldBallDeliberately* release_bot_held_ball_deliberately();
  ::GameEvent_BotHeldBallDeliberately* mutable_bot_held_ball_deliberately();
  void set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* value);
  void unsafe_arena_set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* value);
  ::GameEvent_BotHeldBallDeliberately* unsafe_arena_release_bot_held_ball_deliberately();

  private:
  const ::GameEvent_BotHeldBallDeliberately& _internal_bot_held_ball_deliberately() const;
  ::GameEvent_BotHeldBallDeliberately* _internal_mutable_bot_held_ball_deliberately();

  public:
  // .GameEvent.BotTippedOver bot_tipped_over = 27;
  bool has_bot_tipped_over() const;
  private:
  bool _internal_has_bot_tipped_over() const;

  public:
  void clear_bot_tipped_over() ;
  const ::GameEvent_BotTippedOver& bot_tipped_over() const;
  PROTOBUF_NODISCARD ::GameEvent_BotTippedOver* release_bot_tipped_over();
  ::GameEvent_BotTippedOver* mutable_bot_tipped_over();
  void set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* value);
  void unsafe_arena_set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* value);
  ::GameEvent_BotTippedOver* unsafe_arena_release_bot_tipped_over();

  private:
  const ::GameEvent_BotTippedOver& _internal_bot_tipped_over() const;
  ::GameEvent_BotTippedOver* _internal_mutable_bot_tipped_over();

  public:
  // .GameEvent.BotDroppedParts bot_dropped_parts = 51;
  bool has_bot_dropped_parts() const;
  private:
  bool _internal_has_bot_dropped_parts() const;

  public:
  void clear_bot_dropped_parts() ;
  const ::GameEvent_BotDroppedParts& bot_dropped_parts() const;
  PROTOBUF_NODISCARD ::GameEvent_BotDroppedParts* release_bot_dropped_parts();
  ::GameEvent_BotDroppedParts* mutable_bot_dropped_parts();
  void set_allocated_bot_dropped_parts(::GameEvent_BotDroppedParts* value);
  void unsafe_arena_set_allocated_bot_dropped_parts(::GameEvent_BotDroppedParts* value);
  ::GameEvent_BotDroppedParts* unsafe_arena_release_bot_dropped_parts();

  private:
  const ::GameEvent_BotDroppedParts& _internal_bot_dropped_parts() const;
  ::GameEvent_BotDroppedParts* _internal_mutable_bot_dropped_parts();

  public:
  // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
  bool has_attacker_touched_ball_in_defense_area() const;
  private:
  bool _internal_has_attacker_touched_ball_in_defense_area() const;

  public:
  void clear_attacker_touched_ball_in_defense_area() ;
  const ::GameEvent_AttackerTouchedBallInDefenseArea& attacker_touched_ball_in_defense_area() const;
  PROTOBUF_NODISCARD ::GameEvent_AttackerTouchedBallInDefenseArea* release_attacker_touched_ball_in_defense_area();
  ::GameEvent_AttackerTouchedBallInDefenseArea* mutable_attacker_touched_ball_in_defense_area();
  void set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* value);
  void unsafe_arena_set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* value);
  ::GameEvent_AttackerTouchedBallInDefenseArea* unsafe_arena_release_attacker_touched_ball_in_defense_area();

  private:
  const ::GameEvent_AttackerTouchedBallInDefenseArea& _internal_attacker_touched_ball_in_defense_area() const;
  ::GameEvent_AttackerTouchedBallInDefenseArea* _internal_mutable_attacker_touched_ball_in_defense_area();

  public:
  // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
  bool has_bot_kicked_ball_too_fast() const;
  private:
  bool _internal_has_bot_kicked_ball_too_fast() const;

  public:
  void clear_bot_kicked_ball_too_fast() ;
  const ::GameEvent_BotKickedBallTooFast& bot_kicked_ball_too_fast() const;
  PROTOBUF_NODISCARD ::GameEvent_BotKickedBallTooFast* release_bot_kicked_ball_too_fast();
  ::GameEvent_BotKickedBallTooFast* mutable_bot_kicked_ball_too_fast();
  void set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* value);
  void unsafe_arena_set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* value);
  ::GameEvent_BotKickedBallTooFast* unsafe_arena_release_bot_kicked_ball_too_fast();

  private:
  const ::GameEvent_BotKickedBallTooFast& _internal_bot_kicked_ball_too_fast() const;
  ::GameEvent_BotKickedBallTooFast* _internal_mutable_bot_kicked_ball_too_fast();

  public:
  // .GameEvent.BotCrashUnique bot_crash_unique = 22;
  bool has_bot_crash_unique() const;
  private:
  bool _internal_has_bot_crash_unique() const;

  public:
  void clear_bot_crash_unique() ;
  const ::GameEvent_BotCrashUnique& bot_crash_unique() const;
  PROTOBUF_NODISCARD ::GameEvent_BotCrashUnique* release_bot_crash_unique();
  ::GameEvent_BotCrashUnique* mutable_bot_crash_unique();
  void set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* value);
  void unsafe_arena_set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* value);
  ::GameEvent_BotCrashUnique* unsafe_arena_release_bot_crash_unique();

  private:
  const ::GameEvent_BotCrashUnique& _internal_bot_crash_unique() const;
  ::GameEvent_BotCrashUnique* _internal_mutable_bot_crash_unique();

  public:
  // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
  bool has_bot_crash_drawn() const;
  private:
  bool _internal_has_bot_crash_drawn() const;

  public:
  void clear_bot_crash_drawn() ;
  const ::GameEvent_BotCrashDrawn& bot_crash_drawn() const;
  PROTOBUF_NODISCARD ::GameEvent_BotCrashDrawn* release_bot_crash_drawn();
  ::GameEvent_BotCrashDrawn* mutable_bot_crash_drawn();
  void set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* value);
  void unsafe_arena_set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* value);
  ::GameEvent_BotCrashDrawn* unsafe_arena_release_bot_crash_drawn();

  private:
  const ::GameEvent_BotCrashDrawn& _internal_bot_crash_drawn() const;
  ::GameEvent_BotCrashDrawn* _internal_mutable_bot_crash_drawn();

  public:
  // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
  bool has_defender_too_close_to_kick_point() const;
  private:
  bool _internal_has_defender_too_close_to_kick_point() const;

  public:
  void clear_defender_too_close_to_kick_point() ;
  const ::GameEvent_DefenderTooCloseToKickPoint& defender_too_close_to_kick_point() const;
  PROTOBUF_NODISCARD ::GameEvent_DefenderTooCloseToKickPoint* release_defender_too_close_to_kick_point();
  ::GameEvent_DefenderTooCloseToKickPoint* mutable_defender_too_close_to_kick_point();
  void set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* value);
  void unsafe_arena_set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* value);
  ::GameEvent_DefenderTooCloseToKickPoint* unsafe_arena_release_defender_too_close_to_kick_point();

  private:
  const ::GameEvent_DefenderTooCloseToKickPoint& _internal_defender_too_close_to_kick_point() const;
  ::GameEvent_DefenderTooCloseToKickPoint* _internal_mutable_defender_too_close_to_kick_point();

  public:
  // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
  bool has_bot_too_fast_in_stop() const;
  private:
  bool _internal_has_bot_too_fast_in_stop() const;

  public:
  void clear_bot_too_fast_in_stop() ;
  const ::GameEvent_BotTooFastInStop& bot_too_fast_in_stop() const;
  PROTOBUF_NODISCARD ::GameEvent_BotTooFastInStop* release_bot_too_fast_in_stop();
  ::GameEvent_BotTooFastInStop* mutable_bot_too_fast_in_stop();
  void set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* value);
  void unsafe_arena_set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* value);
  ::GameEvent_BotTooFastInStop* unsafe_arena_release_bot_too_fast_in_stop();

  private:
  const ::GameEvent_BotTooFastInStop& _internal_bot_too_fast_in_stop() const;
  ::GameEvent_BotTooFastInStop* _internal_mutable_bot_too_fast_in_stop();

  public:
  // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
  bool has_bot_interfered_placement() const;
  private:
  bool _internal_has_bot_interfered_placement() const;

  public:
  void clear_bot_interfered_placement() ;
  const ::GameEvent_BotInterferedPlacement& bot_interfered_placement() const;
  PROTOBUF_NODISCARD ::GameEvent_BotInterferedPlacement* release_bot_interfered_placement();
  ::GameEvent_BotInterferedPlacement* mutable_bot_interfered_placement();
  void set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* value);
  void unsafe_arena_set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* value);
  ::GameEvent_BotInterferedPlacement* unsafe_arena_release_bot_interfered_placement();

  private:
  const ::GameEvent_BotInterferedPlacement& _internal_bot_interfered_placement() const;
  ::GameEvent_BotInterferedPlacement* _internal_mutable_bot_interfered_placement();

  public:
  // .GameEvent.Goal possible_goal = 39;
  bool has_possible_goal() const;
  private:
  bool _internal_has_possible_goal() const;

  public:
  void clear_possible_goal() ;
  const ::GameEvent_Goal& possible_goal() const;
  PROTOBUF_NODISCARD ::GameEvent_Goal* release_possible_goal();
  ::GameEvent_Goal* mutable_possible_goal();
  void set_allocated_possible_goal(::GameEvent_Goal* value);
  void unsafe_arena_set_allocated_possible_goal(::GameEvent_Goal* value);
  ::GameEvent_Goal* unsafe_arena_release_possible_goal();

  private:
  const ::GameEvent_Goal& _internal_possible_goal() const;
  ::GameEvent_Goal* _internal_mutable_possible_goal();

  public:
  // .GameEvent.Goal goal = 8;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;

  public:
  void clear_goal() ;
  const ::GameEvent_Goal& goal() const;
  PROTOBUF_NODISCARD ::GameEvent_Goal* release_goal();
  ::GameEvent_Goal* mutable_goal();
  void set_allocated_goal(::GameEvent_Goal* value);
  void unsafe_arena_set_allocated_goal(::GameEvent_Goal* value);
  ::GameEvent_Goal* unsafe_arena_release_goal();

  private:
  const ::GameEvent_Goal& _internal_goal() const;
  ::GameEvent_Goal* _internal_mutable_goal();

  public:
  // .GameEvent.Goal invalid_goal = 44;
  bool has_invalid_goal() const;
  private:
  bool _internal_has_invalid_goal() const;

  public:
  void clear_invalid_goal() ;
  const ::GameEvent_Goal& invalid_goal() const;
  PROTOBUF_NODISCARD ::GameEvent_Goal* release_invalid_goal();
  ::GameEvent_Goal* mutable_invalid_goal();
  void set_allocated_invalid_goal(::GameEvent_Goal* value);
  void unsafe_arena_set_allocated_invalid_goal(::GameEvent_Goal* value);
  ::GameEvent_Goal* unsafe_arena_release_invalid_goal();

  private:
  const ::GameEvent_Goal& _internal_invalid_goal() const;
  ::GameEvent_Goal* _internal_mutable_invalid_goal();

  public:
  // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
  bool has_attacker_double_touched_ball() const;
  private:
  bool _internal_has_attacker_double_touched_ball() const;

  public:
  void clear_attacker_double_touched_ball() ;
  const ::GameEvent_AttackerDoubleTouchedBall& attacker_double_touched_ball() const;
  PROTOBUF_NODISCARD ::GameEvent_AttackerDoubleTouchedBall* release_attacker_double_touched_ball();
  ::GameEvent_AttackerDoubleTouchedBall* mutable_attacker_double_touched_ball();
  void set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* value);
  void unsafe_arena_set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* value);
  ::GameEvent_AttackerDoubleTouchedBall* unsafe_arena_release_attacker_double_touched_ball();

  private:
  const ::GameEvent_AttackerDoubleTouchedBall& _internal_attacker_double_touched_ball() const;
  ::GameEvent_AttackerDoubleTouchedBall* _internal_mutable_attacker_double_touched_ball();

  public:
  // .GameEvent.PlacementSucceeded placement_succeeded = 5;
  bool has_placement_succeeded() const;
  private:
  bool _internal_has_placement_succeeded() const;

  public:
  void clear_placement_succeeded() ;
  const ::GameEvent_PlacementSucceeded& placement_succeeded() const;
  PROTOBUF_NODISCARD ::GameEvent_PlacementSucceeded* release_placement_succeeded();
  ::GameEvent_PlacementSucceeded* mutable_placement_succeeded();
  void set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* value);
  void unsafe_arena_set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* value);
  ::GameEvent_PlacementSucceeded* unsafe_arena_release_placement_succeeded();

  private:
  const ::GameEvent_PlacementSucceeded& _internal_placement_succeeded() const;
  ::GameEvent_PlacementSucceeded* _internal_mutable_placement_succeeded();

  public:
  // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
  bool has_penalty_kick_failed() const;
  private:
  bool _internal_has_penalty_kick_failed() const;

  public:
  void clear_penalty_kick_failed() ;
  const ::GameEvent_PenaltyKickFailed& penalty_kick_failed() const;
  PROTOBUF_NODISCARD ::GameEvent_PenaltyKickFailed* release_penalty_kick_failed();
  ::GameEvent_PenaltyKickFailed* mutable_penalty_kick_failed();
  void set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* value);
  void unsafe_arena_set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* value);
  ::GameEvent_PenaltyKickFailed* unsafe_arena_release_penalty_kick_failed();

  private:
  const ::GameEvent_PenaltyKickFailed& _internal_penalty_kick_failed() const;
  ::GameEvent_PenaltyKickFailed* _internal_mutable_penalty_kick_failed();

  public:
  // .GameEvent.NoProgressInGame no_progress_in_game = 2;
  bool has_no_progress_in_game() const;
  private:
  bool _internal_has_no_progress_in_game() const;

  public:
  void clear_no_progress_in_game() ;
  const ::GameEvent_NoProgressInGame& no_progress_in_game() const;
  PROTOBUF_NODISCARD ::GameEvent_NoProgressInGame* release_no_progress_in_game();
  ::GameEvent_NoProgressInGame* mutable_no_progress_in_game();
  void set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* value);
  void unsafe_arena_set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* value);
  ::GameEvent_NoProgressInGame* unsafe_arena_release_no_progress_in_game();

  private:
  const ::GameEvent_NoProgressInGame& _internal_no_progress_in_game() const;
  ::GameEvent_NoProgressInGame* _internal_mutable_no_progress_in_game();

  public:
  // .GameEvent.PlacementFailed placement_failed = 3;
  bool has_placement_failed() const;
  private:
  bool _internal_has_placement_failed() const;

  public:
  void clear_placement_failed() ;
  const ::GameEvent_PlacementFailed& placement_failed() const;
  PROTOBUF_NODISCARD ::GameEvent_PlacementFailed* release_placement_failed();
  ::GameEvent_PlacementFailed* mutable_placement_failed();
  void set_allocated_placement_failed(::GameEvent_PlacementFailed* value);
  void unsafe_arena_set_allocated_placement_failed(::GameEvent_PlacementFailed* value);
  ::GameEvent_PlacementFailed* unsafe_arena_release_placement_failed();

  private:
  const ::GameEvent_PlacementFailed& _internal_placement_failed() const;
  ::GameEvent_PlacementFailed* _internal_mutable_placement_failed();

  public:
  // .GameEvent.MultipleCards multiple_cards = 32;
  bool has_multiple_cards() const;
  private:
  bool _internal_has_multiple_cards() const;

  public:
  void clear_multiple_cards() ;
  const ::GameEvent_MultipleCards& multiple_cards() const;
  PROTOBUF_NODISCARD ::GameEvent_MultipleCards* release_multiple_cards();
  ::GameEvent_MultipleCards* mutable_multiple_cards();
  void set_allocated_multiple_cards(::GameEvent_MultipleCards* value);
  void unsafe_arena_set_allocated_multiple_cards(::GameEvent_MultipleCards* value);
  ::GameEvent_MultipleCards* unsafe_arena_release_multiple_cards();

  private:
  const ::GameEvent_MultipleCards& _internal_multiple_cards() const;
  ::GameEvent_MultipleCards* _internal_mutable_multiple_cards();

  public:
  // .GameEvent.MultipleFouls multiple_fouls = 34;
  bool has_multiple_fouls() const;
  private:
  bool _internal_has_multiple_fouls() const;

  public:
  void clear_multiple_fouls() ;
  const ::GameEvent_MultipleFouls& multiple_fouls() const;
  PROTOBUF_NODISCARD ::GameEvent_MultipleFouls* release_multiple_fouls();
  ::GameEvent_MultipleFouls* mutable_multiple_fouls();
  void set_allocated_multiple_fouls(::GameEvent_MultipleFouls* value);
  void unsafe_arena_set_allocated_multiple_fouls(::GameEvent_MultipleFouls* value);
  ::GameEvent_MultipleFouls* unsafe_arena_release_multiple_fouls();

  private:
  const ::GameEvent_MultipleFouls& _internal_multiple_fouls() const;
  ::GameEvent_MultipleFouls* _internal_mutable_multiple_fouls();

  public:
  // .GameEvent.BotSubstitution bot_substitution = 37;
  bool has_bot_substitution() const;
  private:
  bool _internal_has_bot_substitution() const;

  public:
  void clear_bot_substitution() ;
  const ::GameEvent_BotSubstitution& bot_substitution() const;
  PROTOBUF_NODISCARD ::GameEvent_BotSubstitution* release_bot_substitution();
  ::GameEvent_BotSubstitution* mutable_bot_substitution();
  void set_allocated_bot_substitution(::GameEvent_BotSubstitution* value);
  void unsafe_arena_set_allocated_bot_substitution(::GameEvent_BotSubstitution* value);
  ::GameEvent_BotSubstitution* unsafe_arena_release_bot_substitution();

  private:
  const ::GameEvent_BotSubstitution& _internal_bot_substitution() const;
  ::GameEvent_BotSubstitution* _internal_mutable_bot_substitution();

  public:
  // .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
  bool has_excessive_bot_substitution() const;
  private:
  bool _internal_has_excessive_bot_substitution() const;

  public:
  void clear_excessive_bot_substitution() ;
  const ::GameEvent_ExcessiveBotSubstitution& excessive_bot_substitution() const;
  PROTOBUF_NODISCARD ::GameEvent_ExcessiveBotSubstitution* release_excessive_bot_substitution();
  ::GameEvent_ExcessiveBotSubstitution* mutable_excessive_bot_substitution();
  void set_allocated_excessive_bot_substitution(::GameEvent_ExcessiveBotSubstitution* value);
  void unsafe_arena_set_allocated_excessive_bot_substitution(::GameEvent_ExcessiveBotSubstitution* value);
  ::GameEvent_ExcessiveBotSubstitution* unsafe_arena_release_excessive_bot_substitution();

  private:
  const ::GameEvent_ExcessiveBotSubstitution& _internal_excessive_bot_substitution() const;
  ::GameEvent_ExcessiveBotSubstitution* _internal_mutable_excessive_bot_substitution();

  public:
  // .GameEvent.TooManyRobots too_many_robots = 38;
  bool has_too_many_robots() const;
  private:
  bool _internal_has_too_many_robots() const;

  public:
  void clear_too_many_robots() ;
  const ::GameEvent_TooManyRobots& too_many_robots() const;
  PROTOBUF_NODISCARD ::GameEvent_TooManyRobots* release_too_many_robots();
  ::GameEvent_TooManyRobots* mutable_too_many_robots();
  void set_allocated_too_many_robots(::GameEvent_TooManyRobots* value);
  void unsafe_arena_set_allocated_too_many_robots(::GameEvent_TooManyRobots* value);
  ::GameEvent_TooManyRobots* unsafe_arena_release_too_many_robots();

  private:
  const ::GameEvent_TooManyRobots& _internal_too_many_robots() const;
  ::GameEvent_TooManyRobots* _internal_mutable_too_many_robots();

  public:
  // .GameEvent.ChallengeFlag challenge_flag = 46;
  bool has_challenge_flag() const;
  private:
  bool _internal_has_challenge_flag() const;

  public:
  void clear_challenge_flag() ;
  const ::GameEvent_ChallengeFlag& challenge_flag() const;
  PROTOBUF_NODISCARD ::GameEvent_ChallengeFlag* release_challenge_flag();
  ::GameEvent_ChallengeFlag* mutable_challenge_flag();
  void set_allocated_challenge_flag(::GameEvent_ChallengeFlag* value);
  void unsafe_arena_set_allocated_challenge_flag(::GameEvent_ChallengeFlag* value);
  ::GameEvent_ChallengeFlag* unsafe_arena_release_challenge_flag();

  private:
  const ::GameEvent_ChallengeFlag& _internal_challenge_flag() const;
  ::GameEvent_ChallengeFlag* _internal_mutable_challenge_flag();

  public:
  // .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
  bool has_challenge_flag_handled() const;
  private:
  bool _internal_has_challenge_flag_handled() const;

  public:
  void clear_challenge_flag_handled() ;
  const ::GameEvent_ChallengeFlagHandled& challenge_flag_handled() const;
  PROTOBUF_NODISCARD ::GameEvent_ChallengeFlagHandled* release_challenge_flag_handled();
  ::GameEvent_ChallengeFlagHandled* mutable_challenge_flag_handled();
  void set_allocated_challenge_flag_handled(::GameEvent_ChallengeFlagHandled* value);
  void unsafe_arena_set_allocated_challenge_flag_handled(::GameEvent_ChallengeFlagHandled* value);
  ::GameEvent_ChallengeFlagHandled* unsafe_arena_release_challenge_flag_handled();

  private:
  const ::GameEvent_ChallengeFlagHandled& _internal_challenge_flag_handled() const;
  ::GameEvent_ChallengeFlagHandled* _internal_mutable_challenge_flag_handled();

  public:
  // .GameEvent.EmergencyStop emergency_stop = 47;
  bool has_emergency_stop() const;
  private:
  bool _internal_has_emergency_stop() const;

  public:
  void clear_emergency_stop() ;
  const ::GameEvent_EmergencyStop& emergency_stop() const;
  PROTOBUF_NODISCARD ::GameEvent_EmergencyStop* release_emergency_stop();
  ::GameEvent_EmergencyStop* mutable_emergency_stop();
  void set_allocated_emergency_stop(::GameEvent_EmergencyStop* value);
  void unsafe_arena_set_allocated_emergency_stop(::GameEvent_EmergencyStop* value);
  ::GameEvent_EmergencyStop* unsafe_arena_release_emergency_stop();

  private:
  const ::GameEvent_EmergencyStop& _internal_emergency_stop() const;
  ::GameEvent_EmergencyStop* _internal_mutable_emergency_stop();

  public:
  // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
  bool has_unsporting_behavior_minor() const;
  private:
  bool _internal_has_unsporting_behavior_minor() const;

  public:
  void clear_unsporting_behavior_minor() ;
  const ::GameEvent_UnsportingBehaviorMinor& unsporting_behavior_minor() const;
  PROTOBUF_NODISCARD ::GameEvent_UnsportingBehaviorMinor* release_unsporting_behavior_minor();
  ::GameEvent_UnsportingBehaviorMinor* mutable_unsporting_behavior_minor();
  void set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* value);
  void unsafe_arena_set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* value);
  ::GameEvent_UnsportingBehaviorMinor* unsafe_arena_release_unsporting_behavior_minor();

  private:
  const ::GameEvent_UnsportingBehaviorMinor& _internal_unsporting_behavior_minor() const;
  ::GameEvent_UnsportingBehaviorMinor* _internal_mutable_unsporting_behavior_minor();

  public:
  // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
  bool has_unsporting_behavior_major() const;
  private:
  bool _internal_has_unsporting_behavior_major() const;

  public:
  void clear_unsporting_behavior_major() ;
  const ::GameEvent_UnsportingBehaviorMajor& unsporting_behavior_major() const;
  PROTOBUF_NODISCARD ::GameEvent_UnsportingBehaviorMajor* release_unsporting_behavior_major();
  ::GameEvent_UnsportingBehaviorMajor* mutable_unsporting_behavior_major();
  void set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* value);
  void unsafe_arena_set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* value);
  ::GameEvent_UnsportingBehaviorMajor* unsafe_arena_release_unsporting_behavior_major();

  private:
  const ::GameEvent_UnsportingBehaviorMajor& _internal_unsporting_behavior_major() const;
  ::GameEvent_UnsportingBehaviorMajor* _internal_mutable_unsporting_behavior_major();

  public:
  // .GameEvent.Prepared prepared = 1 [deprecated = true];
  [[deprecated]]  bool has_prepared() const;
  private:
  bool _internal_has_prepared() const;

  public:
  [[deprecated]]  void clear_prepared() ;
  [[deprecated]] const ::GameEvent_Prepared& prepared() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_Prepared* release_prepared();
  [[deprecated]] ::GameEvent_Prepared* mutable_prepared();
  [[deprecated]] void set_allocated_prepared(::GameEvent_Prepared* value);
  [[deprecated]] void unsafe_arena_set_allocated_prepared(::GameEvent_Prepared* value);
  [[deprecated]] ::GameEvent_Prepared* unsafe_arena_release_prepared();

  private:
  const ::GameEvent_Prepared& _internal_prepared() const;
  ::GameEvent_Prepared* _internal_mutable_prepared();

  public:
  // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
  [[deprecated]]  bool has_indirect_goal() const;
  private:
  bool _internal_has_indirect_goal() const;

  public:
  [[deprecated]]  void clear_indirect_goal() ;
  [[deprecated]] const ::GameEvent_IndirectGoal& indirect_goal() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_IndirectGoal* release_indirect_goal();
  [[deprecated]] ::GameEvent_IndirectGoal* mutable_indirect_goal();
  [[deprecated]] void set_allocated_indirect_goal(::GameEvent_IndirectGoal* value);
  [[deprecated]] void unsafe_arena_set_allocated_indirect_goal(::GameEvent_IndirectGoal* value);
  [[deprecated]] ::GameEvent_IndirectGoal* unsafe_arena_release_indirect_goal();

  private:
  const ::GameEvent_IndirectGoal& _internal_indirect_goal() const;
  ::GameEvent_IndirectGoal* _internal_mutable_indirect_goal();

  public:
  // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
  [[deprecated]]  bool has_chipped_goal() const;
  private:
  bool _internal_has_chipped_goal() const;

  public:
  [[deprecated]]  void clear_chipped_goal() ;
  [[deprecated]] const ::GameEvent_ChippedGoal& chipped_goal() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_ChippedGoal* release_chipped_goal();
  [[deprecated]] ::GameEvent_ChippedGoal* mutable_chipped_goal();
  [[deprecated]] void set_allocated_chipped_goal(::GameEvent_ChippedGoal* value);
  [[deprecated]] void unsafe_arena_set_allocated_chipped_goal(::GameEvent_ChippedGoal* value);
  [[deprecated]] ::GameEvent_ChippedGoal* unsafe_arena_release_chipped_goal();

  private:
  const ::GameEvent_ChippedGoal& _internal_chipped_goal() const;
  ::GameEvent_ChippedGoal* _internal_mutable_chipped_goal();

  public:
  // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
  [[deprecated]]  bool has_kick_timeout() const;
  private:
  bool _internal_has_kick_timeout() const;

  public:
  [[deprecated]]  void clear_kick_timeout() ;
  [[deprecated]] const ::GameEvent_KickTimeout& kick_timeout() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_KickTimeout* release_kick_timeout();
  [[deprecated]] ::GameEvent_KickTimeout* mutable_kick_timeout();
  [[deprecated]] void set_allocated_kick_timeout(::GameEvent_KickTimeout* value);
  [[deprecated]] void unsafe_arena_set_allocated_kick_timeout(::GameEvent_KickTimeout* value);
  [[deprecated]] ::GameEvent_KickTimeout* unsafe_arena_release_kick_timeout();

  private:
  const ::GameEvent_KickTimeout& _internal_kick_timeout() const;
  ::GameEvent_KickTimeout* _internal_mutable_kick_timeout();

  public:
  // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
  [[deprecated]]  bool has_attacker_touched_opponent_in_defense_area() const;
  private:
  bool _internal_has_attacker_touched_opponent_in_defense_area() const;

  public:
  [[deprecated]]  void clear_attacker_touched_opponent_in_defense_area() ;
  [[deprecated]] const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area();
  [[deprecated]] ::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area();
  [[deprecated]] void set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* value);
  [[deprecated]] void unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* value);
  [[deprecated]] ::GameEvent_AttackerTouchedOpponentInDefenseArea* unsafe_arena_release_attacker_touched_opponent_in_defense_area();

  private:
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area() const;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* _internal_mutable_attacker_touched_opponent_in_defense_area();

  public:
  // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
  [[deprecated]]  bool has_attacker_touched_opponent_in_defense_area_skipped() const;
  private:
  bool _internal_has_attacker_touched_opponent_in_defense_area_skipped() const;

  public:
  [[deprecated]]  void clear_attacker_touched_opponent_in_defense_area_skipped() ;
  [[deprecated]] const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area_skipped() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_AttackerTouchedOpponentInDefenseArea* release_attacker_touched_opponent_in_defense_area_skipped();
  [[deprecated]] ::GameEvent_AttackerTouchedOpponentInDefenseArea* mutable_attacker_touched_opponent_in_defense_area_skipped();
  [[deprecated]] void set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* value);
  [[deprecated]] void unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* value);
  [[deprecated]] ::GameEvent_AttackerTouchedOpponentInDefenseArea* unsafe_arena_release_attacker_touched_opponent_in_defense_area_skipped();

  private:
  const ::GameEvent_AttackerTouchedOpponentInDefenseArea& _internal_attacker_touched_opponent_in_defense_area_skipped() const;
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* _internal_mutable_attacker_touched_opponent_in_defense_area_skipped();

  public:
  // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
  [[deprecated]]  bool has_bot_crash_unique_skipped() const;
  private:
  bool _internal_has_bot_crash_unique_skipped() const;

  public:
  [[deprecated]]  void clear_bot_crash_unique_skipped() ;
  [[deprecated]] const ::GameEvent_BotCrashUnique& bot_crash_unique_skipped() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_BotCrashUnique* release_bot_crash_unique_skipped();
  [[deprecated]] ::GameEvent_BotCrashUnique* mutable_bot_crash_unique_skipped();
  [[deprecated]] void set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* value);
  [[deprecated]] void unsafe_arena_set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* value);
  [[deprecated]] ::GameEvent_BotCrashUnique* unsafe_arena_release_bot_crash_unique_skipped();

  private:
  const ::GameEvent_BotCrashUnique& _internal_bot_crash_unique_skipped() const;
  ::GameEvent_BotCrashUnique* _internal_mutable_bot_crash_unique_skipped();

  public:
  // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
  [[deprecated]]  bool has_bot_pushed_bot_skipped() const;
  private:
  bool _internal_has_bot_pushed_bot_skipped() const;

  public:
  [[deprecated]]  void clear_bot_pushed_bot_skipped() ;
  [[deprecated]] const ::GameEvent_BotPushedBot& bot_pushed_bot_skipped() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_BotPushedBot* release_bot_pushed_bot_skipped();
  [[deprecated]] ::GameEvent_BotPushedBot* mutable_bot_pushed_bot_skipped();
  [[deprecated]] void set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* value);
  [[deprecated]] void unsafe_arena_set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* value);
  [[deprecated]] ::GameEvent_BotPushedBot* unsafe_arena_release_bot_pushed_bot_skipped();

  private:
  const ::GameEvent_BotPushedBot& _internal_bot_pushed_bot_skipped() const;
  ::GameEvent_BotPushedBot* _internal_mutable_bot_pushed_bot_skipped();

  public:
  // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
  [[deprecated]]  bool has_defender_in_defense_area_partially() const;
  private:
  bool _internal_has_defender_in_defense_area_partially() const;

  public:
  [[deprecated]]  void clear_defender_in_defense_area_partially() ;
  [[deprecated]] const ::GameEvent_DefenderInDefenseAreaPartially& defender_in_defense_area_partially() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_DefenderInDefenseAreaPartially* release_defender_in_defense_area_partially();
  [[deprecated]] ::GameEvent_DefenderInDefenseAreaPartially* mutable_defender_in_defense_area_partially();
  [[deprecated]] void set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* value);
  [[deprecated]] void unsafe_arena_set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* value);
  [[deprecated]] ::GameEvent_DefenderInDefenseAreaPartially* unsafe_arena_release_defender_in_defense_area_partially();

  private:
  const ::GameEvent_DefenderInDefenseAreaPartially& _internal_defender_in_defense_area_partially() const;
  ::GameEvent_DefenderInDefenseAreaPartially* _internal_mutable_defender_in_defense_area_partially();

  public:
  // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
  [[deprecated]]  bool has_multiple_placement_failures() const;
  private:
  bool _internal_has_multiple_placement_failures() const;

  public:
  [[deprecated]]  void clear_multiple_placement_failures() ;
  [[deprecated]] const ::GameEvent_MultiplePlacementFailures& multiple_placement_failures() const;
  [[deprecated]] PROTOBUF_NODISCARD ::GameEvent_MultiplePlacementFailures* release_multiple_placement_failures();
  [[deprecated]] ::GameEvent_MultiplePlacementFailures* mutable_multiple_placement_failures();
  [[deprecated]] void set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* value);
  [[deprecated]] void unsafe_arena_set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* value);
  [[deprecated]] ::GameEvent_MultiplePlacementFailures* unsafe_arena_release_multiple_placement_failures();

  private:
  const ::GameEvent_MultiplePlacementFailures& _internal_multiple_placement_failures() const;
  ::GameEvent_MultiplePlacementFailures* _internal_mutable_multiple_placement_failures();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:GameEvent)
 private:
  class _Internal;
  void set_has_ball_left_field_touch_line();
  void set_has_ball_left_field_goal_line();
  void set_has_aimless_kick();
  void set_has_attacker_too_close_to_defense_area();
  void set_has_defender_in_defense_area();
  void set_has_boundary_crossing();
  void set_has_keeper_held_ball();
  void set_has_bot_dribbled_ball_too_far();
  void set_has_bot_pushed_bot();
  void set_has_bot_held_ball_deliberately();
  void set_has_bot_tipped_over();
  void set_has_bot_dropped_parts();
  void set_has_attacker_touched_ball_in_defense_area();
  void set_has_bot_kicked_ball_too_fast();
  void set_has_bot_crash_unique();
  void set_has_bot_crash_drawn();
  void set_has_defender_too_close_to_kick_point();
  void set_has_bot_too_fast_in_stop();
  void set_has_bot_interfered_placement();
  void set_has_possible_goal();
  void set_has_goal();
  void set_has_invalid_goal();
  void set_has_attacker_double_touched_ball();
  void set_has_placement_succeeded();
  void set_has_penalty_kick_failed();
  void set_has_no_progress_in_game();
  void set_has_placement_failed();
  void set_has_multiple_cards();
  void set_has_multiple_fouls();
  void set_has_bot_substitution();
  void set_has_excessive_bot_substitution();
  void set_has_too_many_robots();
  void set_has_challenge_flag();
  void set_has_challenge_flag_handled();
  void set_has_emergency_stop();
  void set_has_unsporting_behavior_minor();
  void set_has_unsporting_behavior_major();
  void set_has_prepared();
  void set_has_indirect_goal();
  void set_has_chipped_goal();
  void set_has_kick_timeout();
  void set_has_attacker_touched_opponent_in_defense_area();
  void set_has_attacker_touched_opponent_in_defense_area_skipped();
  void set_has_bot_crash_unique_skipped();
  void set_has_bot_pushed_bot_skipped();
  void set_has_defender_in_defense_area_partially();
  void set_has_multiple_placement_failures();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 51, 48,
      74, 9>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> origin_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::uint64_t created_timestamp_;
    int type_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::GameEvent_BallLeftField* ball_left_field_touch_line_;
      ::GameEvent_BallLeftField* ball_left_field_goal_line_;
      ::GameEvent_AimlessKick* aimless_kick_;
      ::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area_;
      ::GameEvent_DefenderInDefenseArea* defender_in_defense_area_;
      ::GameEvent_BoundaryCrossing* boundary_crossing_;
      ::GameEvent_KeeperHeldBall* keeper_held_ball_;
      ::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far_;
      ::GameEvent_BotPushedBot* bot_pushed_bot_;
      ::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately_;
      ::GameEvent_BotTippedOver* bot_tipped_over_;
      ::GameEvent_BotDroppedParts* bot_dropped_parts_;
      ::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area_;
      ::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast_;
      ::GameEvent_BotCrashUnique* bot_crash_unique_;
      ::GameEvent_BotCrashDrawn* bot_crash_drawn_;
      ::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point_;
      ::GameEvent_BotTooFastInStop* bot_too_fast_in_stop_;
      ::GameEvent_BotInterferedPlacement* bot_interfered_placement_;
      ::GameEvent_Goal* possible_goal_;
      ::GameEvent_Goal* goal_;
      ::GameEvent_Goal* invalid_goal_;
      ::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball_;
      ::GameEvent_PlacementSucceeded* placement_succeeded_;
      ::GameEvent_PenaltyKickFailed* penalty_kick_failed_;
      ::GameEvent_NoProgressInGame* no_progress_in_game_;
      ::GameEvent_PlacementFailed* placement_failed_;
      ::GameEvent_MultipleCards* multiple_cards_;
      ::GameEvent_MultipleFouls* multiple_fouls_;
      ::GameEvent_BotSubstitution* bot_substitution_;
      ::GameEvent_ExcessiveBotSubstitution* excessive_bot_substitution_;
      ::GameEvent_TooManyRobots* too_many_robots_;
      ::GameEvent_ChallengeFlag* challenge_flag_;
      ::GameEvent_ChallengeFlagHandled* challenge_flag_handled_;
      ::GameEvent_EmergencyStop* emergency_stop_;
      ::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor_;
      ::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major_;
      ::GameEvent_Prepared* prepared_;
      ::GameEvent_IndirectGoal* indirect_goal_;
      ::GameEvent_ChippedGoal* chipped_goal_;
      ::GameEvent_KickTimeout* kick_timeout_;
      ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_;
      ::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped_;
      ::GameEvent_BotCrashUnique* bot_crash_unique_skipped_;
      ::GameEvent_BotPushedBot* bot_pushed_bot_skipped_;
      ::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially_;
      ::GameEvent_MultiplePlacementFailures* multiple_placement_failures_;
    } event_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};
// -------------------------------------------------------------------

class GameEvent_MultipleFouls final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameEvent.MultipleFouls) */ {
 public:
  inline GameEvent_MultipleFouls() : GameEvent_MultipleFouls(nullptr) {}
  ~GameEvent_MultipleFouls() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent_MultipleFouls(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from) : GameEvent_MultipleFouls(nullptr, from) {}
  inline GameEvent_MultipleFouls(GameEvent_MultipleFouls&& from) noexcept
      : GameEvent_MultipleFouls(nullptr, std::move(from)) {}
  inline GameEvent_MultipleFouls& operator=(const GameEvent_MultipleFouls& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent_MultipleFouls& operator=(GameEvent_MultipleFouls&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent_MultipleFouls& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent_MultipleFouls* internal_default_instance() {
    return reinterpret_cast<const GameEvent_MultipleFouls*>(
        &_GameEvent_MultipleFouls_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(GameEvent_MultipleFouls& a, GameEvent_MultipleFouls& b) { a.Swap(&b); }
  inline void Swap(GameEvent_MultipleFouls* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent_MultipleFouls* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent_MultipleFouls* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent_MultipleFouls>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent_MultipleFouls& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent_MultipleFouls& from) { GameEvent_MultipleFouls::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GameEvent_MultipleFouls* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GameEvent.MultipleFouls"; }

 protected:
  explicit GameEvent_MultipleFouls(::google::protobuf::Arena* arena);
  GameEvent_MultipleFouls(::google::protobuf::Arena* arena, const GameEvent_MultipleFouls& from);
  GameEvent_MultipleFouls(::google::protobuf::Arena* arena, GameEvent_MultipleFouls&& from) noexcept
      : GameEvent_MultipleFouls(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCausedGameEventsFieldNumber = 2,
    kByTeamFieldNumber = 1,
  };
  // repeated .GameEvent caused_game_events = 2;
  int caused_game_events_size() const;
  private:
  int _internal_caused_game_events_size() const;

  public:
  void clear_caused_game_events() ;
  ::GameEvent* mutable_caused_game_events(int index);
  ::google::protobuf::RepeatedPtrField<::GameEvent>* mutable_caused_game_events();

  private:
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& _internal_caused_game_events() const;
  ::google::protobuf::RepeatedPtrField<::GameEvent>* _internal_mutable_caused_game_events();
  public:
  const ::GameEvent& caused_game_events(int index) const;
  ::GameEvent* add_caused_game_events();
  const ::google::protobuf::RepeatedPtrField<::GameEvent>& caused_game_events() const;
  // required .Team by_team = 1;
  bool has_by_team() const;
  void clear_by_team() ;
  ::Team by_team() const;
  void set_by_team(::Team value);

  private:
  ::Team _internal_by_team() const;
  void _internal_set_by_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:GameEvent.MultipleFouls)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GameEvent_MultipleFouls_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent_MultipleFouls& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::GameEvent > caused_game_events_;
    int by_team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fgame_5fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GameEvent_BallLeftField

// required .Team by_team = 1;
inline bool GameEvent_BallLeftField::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BallLeftField::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BallLeftField::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.by_team)
  return _internal_by_team();
}
inline void GameEvent_BallLeftField::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BallLeftField.by_team)
}
inline ::Team GameEvent_BallLeftField::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BallLeftField::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BallLeftField::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BallLeftField::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BallLeftField::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BallLeftField::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BallLeftField.by_bot)
}
inline ::uint32_t GameEvent_BallLeftField::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BallLeftField::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BallLeftField::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BallLeftField::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BallLeftField::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BallLeftField.location)
  return _internal_location();
}
inline void GameEvent_BallLeftField::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BallLeftField.location)
}
inline ::Vector2* GameEvent_BallLeftField::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BallLeftField::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BallLeftField.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BallLeftField::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BallLeftField::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BallLeftField.location)
  return _msg;
}
inline void GameEvent_BallLeftField::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BallLeftField.location)
}

// -------------------------------------------------------------------

// GameEvent_AimlessKick

// required .Team by_team = 1;
inline bool GameEvent_AimlessKick::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_AimlessKick::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_AimlessKick::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.by_team)
  return _internal_by_team();
}
inline void GameEvent_AimlessKick::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.AimlessKick.by_team)
}
inline ::Team GameEvent_AimlessKick::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_AimlessKick::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AimlessKick::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_AimlessKick::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_AimlessKick::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_AimlessKick::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.AimlessKick.by_bot)
}
inline ::uint32_t GameEvent_AimlessKick::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_AimlessKick::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_AimlessKick::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AimlessKick::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AimlessKick::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.location)
  return _internal_location();
}
inline void GameEvent_AimlessKick::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AimlessKick.location)
}
inline ::Vector2* GameEvent_AimlessKick::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AimlessKick::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AimlessKick.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AimlessKick::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_AimlessKick::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AimlessKick.location)
  return _msg;
}
inline void GameEvent_AimlessKick::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AimlessKick.location)
}

// optional .Vector2 kick_location = 4;
inline bool GameEvent_AimlessKick::has_kick_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kick_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AimlessKick::_internal_kick_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.kick_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AimlessKick::kick_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AimlessKick.kick_location)
  return _internal_kick_location();
}
inline void GameEvent_AimlessKick::unsafe_arena_set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }
  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AimlessKick.kick_location)
}
inline ::Vector2* GameEvent_AimlessKick::release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AimlessKick::unsafe_arena_release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AimlessKick.kick_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AimlessKick::_internal_mutable_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.kick_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.kick_location_;
}
inline ::Vector2* GameEvent_AimlessKick::mutable_kick_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_kick_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AimlessKick.kick_location)
  return _msg;
}
inline void GameEvent_AimlessKick::set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AimlessKick.kick_location)
}

// -------------------------------------------------------------------

// GameEvent_Goal

// required .Team by_team = 1;
inline bool GameEvent_Goal::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::Team GameEvent_Goal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.by_team)
  return _internal_by_team();
}
inline void GameEvent_Goal::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.by_team)
}
inline ::Team GameEvent_Goal::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_Goal::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional .Team kicking_team = 6;
inline bool GameEvent_Goal::has_kicking_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_kicking_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kicking_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::Team GameEvent_Goal::kicking_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kicking_team)
  return _internal_kicking_team();
}
inline void GameEvent_Goal::set_kicking_team(::Team value) {
  _internal_set_kicking_team(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.kicking_team)
}
inline ::Team GameEvent_Goal::_internal_kicking_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.kicking_team_);
}
inline void GameEvent_Goal::_internal_set_kicking_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.kicking_team_ = value;
}

// optional uint32 kicking_bot = 2;
inline bool GameEvent_Goal::has_kicking_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_kicking_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kicking_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t GameEvent_Goal::kicking_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kicking_bot)
  return _internal_kicking_bot();
}
inline void GameEvent_Goal::set_kicking_bot(::uint32_t value) {
  _internal_set_kicking_bot(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.kicking_bot)
}
inline ::uint32_t GameEvent_Goal::_internal_kicking_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kicking_bot_;
}
inline void GameEvent_Goal::_internal_set_kicking_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kicking_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_Goal::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_Goal::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_Goal::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.location)
  return _internal_location();
}
inline void GameEvent_Goal::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.Goal.location)
}
inline ::Vector2* GameEvent_Goal::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_Goal::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.Goal.location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_Goal::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_Goal::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.Goal.location)
  return _msg;
}
inline void GameEvent_Goal::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.Goal.location)
}

// optional .Vector2 kick_location = 4;
inline bool GameEvent_Goal::has_kick_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kick_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_Goal::_internal_kick_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.kick_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_Goal::kick_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.kick_location)
  return _internal_kick_location();
}
inline void GameEvent_Goal::unsafe_arena_set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }
  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.Goal.kick_location)
}
inline ::Vector2* GameEvent_Goal::release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* released = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_Goal::unsafe_arena_release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.Goal.kick_location)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* temp = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_Goal::_internal_mutable_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.kick_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.kick_location_;
}
inline ::Vector2* GameEvent_Goal::mutable_kick_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::Vector2* _msg = _internal_mutable_kick_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.Goal.kick_location)
  return _msg;
}
inline void GameEvent_Goal::set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.Goal.kick_location)
}

// optional float max_ball_height = 5;
inline bool GameEvent_Goal::has_max_ball_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_max_ball_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ball_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float GameEvent_Goal::max_ball_height() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.max_ball_height)
  return _internal_max_ball_height();
}
inline void GameEvent_Goal::set_max_ball_height(float value) {
  _internal_set_max_ball_height(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.max_ball_height)
}
inline float GameEvent_Goal::_internal_max_ball_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_ball_height_;
}
inline void GameEvent_Goal::_internal_set_max_ball_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ball_height_ = value;
}

// optional uint32 num_robots_by_team = 7;
inline bool GameEvent_Goal::has_num_robots_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_num_robots_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_by_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t GameEvent_Goal::num_robots_by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.num_robots_by_team)
  return _internal_num_robots_by_team();
}
inline void GameEvent_Goal::set_num_robots_by_team(::uint32_t value) {
  _internal_set_num_robots_by_team(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.num_robots_by_team)
}
inline ::uint32_t GameEvent_Goal::_internal_num_robots_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_robots_by_team_;
}
inline void GameEvent_Goal::_internal_set_num_robots_by_team(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_by_team_ = value;
}

// optional uint64 last_touch_by_team = 8;
inline bool GameEvent_Goal::has_last_touch_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_last_touch_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_touch_by_team_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t GameEvent_Goal::last_touch_by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.last_touch_by_team)
  return _internal_last_touch_by_team();
}
inline void GameEvent_Goal::set_last_touch_by_team(::uint64_t value) {
  _internal_set_last_touch_by_team(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:GameEvent.Goal.last_touch_by_team)
}
inline ::uint64_t GameEvent_Goal::_internal_last_touch_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_touch_by_team_;
}
inline void GameEvent_Goal::_internal_set_last_touch_by_team(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_touch_by_team_ = value;
}

// optional string message = 9;
inline bool GameEvent_Goal::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_Goal::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent_Goal::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.Goal.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEvent_Goal::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEvent.Goal.message)
}
inline std::string* GameEvent_Goal::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:GameEvent.Goal.message)
  return _s;
}
inline const std::string& GameEvent_Goal::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void GameEvent_Goal::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* GameEvent_Goal::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* GameEvent_Goal::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.Goal.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEvent_Goal::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEvent.Goal.message)
}

// -------------------------------------------------------------------

// GameEvent_IndirectGoal

// required .Team by_team = 1;
inline bool GameEvent_IndirectGoal::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_IndirectGoal::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_IndirectGoal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.by_team)
  return _internal_by_team();
}
inline void GameEvent_IndirectGoal::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.IndirectGoal.by_team)
}
inline ::Team GameEvent_IndirectGoal::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_IndirectGoal::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_IndirectGoal::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_IndirectGoal::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_IndirectGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_IndirectGoal::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.IndirectGoal.by_bot)
}
inline ::uint32_t GameEvent_IndirectGoal::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_IndirectGoal::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_IndirectGoal::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_IndirectGoal::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_IndirectGoal::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.location)
  return _internal_location();
}
inline void GameEvent_IndirectGoal::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.IndirectGoal.location)
}
inline ::Vector2* GameEvent_IndirectGoal::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_IndirectGoal::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.IndirectGoal.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_IndirectGoal::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_IndirectGoal::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.IndirectGoal.location)
  return _msg;
}
inline void GameEvent_IndirectGoal::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.IndirectGoal.location)
}

// optional .Vector2 kick_location = 4;
inline bool GameEvent_IndirectGoal::has_kick_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kick_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_IndirectGoal::_internal_kick_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.kick_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_IndirectGoal::kick_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.IndirectGoal.kick_location)
  return _internal_kick_location();
}
inline void GameEvent_IndirectGoal::unsafe_arena_set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }
  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.IndirectGoal.kick_location)
}
inline ::Vector2* GameEvent_IndirectGoal::release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_IndirectGoal::unsafe_arena_release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.IndirectGoal.kick_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_IndirectGoal::_internal_mutable_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.kick_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.kick_location_;
}
inline ::Vector2* GameEvent_IndirectGoal::mutable_kick_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_kick_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.IndirectGoal.kick_location)
  return _msg;
}
inline void GameEvent_IndirectGoal::set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.IndirectGoal.kick_location)
}

// -------------------------------------------------------------------

// GameEvent_ChippedGoal

// required .Team by_team = 1;
inline bool GameEvent_ChippedGoal::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_ChippedGoal::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_ChippedGoal::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.by_team)
  return _internal_by_team();
}
inline void GameEvent_ChippedGoal::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.by_team)
}
inline ::Team GameEvent_ChippedGoal::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_ChippedGoal::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_ChippedGoal::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_ChippedGoal::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_ChippedGoal::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_ChippedGoal::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.by_bot)
}
inline ::uint32_t GameEvent_ChippedGoal::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_ChippedGoal::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_ChippedGoal::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_ChippedGoal::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_ChippedGoal::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.location)
  return _internal_location();
}
inline void GameEvent_ChippedGoal::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.ChippedGoal.location)
}
inline ::Vector2* GameEvent_ChippedGoal::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_ChippedGoal::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.ChippedGoal.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_ChippedGoal::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_ChippedGoal::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.ChippedGoal.location)
  return _msg;
}
inline void GameEvent_ChippedGoal::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ChippedGoal.location)
}

// optional .Vector2 kick_location = 4;
inline bool GameEvent_ChippedGoal::has_kick_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kick_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_ChippedGoal::_internal_kick_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.kick_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_ChippedGoal::kick_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.kick_location)
  return _internal_kick_location();
}
inline void GameEvent_ChippedGoal::unsafe_arena_set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }
  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.ChippedGoal.kick_location)
}
inline ::Vector2* GameEvent_ChippedGoal::release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_ChippedGoal::unsafe_arena_release_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.ChippedGoal.kick_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.kick_location_;
  _impl_.kick_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_ChippedGoal::_internal_mutable_kick_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kick_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.kick_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.kick_location_;
}
inline ::Vector2* GameEvent_ChippedGoal::mutable_kick_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_kick_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.ChippedGoal.kick_location)
  return _msg;
}
inline void GameEvent_ChippedGoal::set_allocated_kick_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kick_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.kick_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ChippedGoal.kick_location)
}

// optional float max_ball_height = 5;
inline bool GameEvent_ChippedGoal::has_max_ball_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_ChippedGoal::clear_max_ball_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ball_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_ChippedGoal::max_ball_height() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChippedGoal.max_ball_height)
  return _internal_max_ball_height();
}
inline void GameEvent_ChippedGoal::set_max_ball_height(float value) {
  _internal_set_max_ball_height(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.ChippedGoal.max_ball_height)
}
inline float GameEvent_ChippedGoal::_internal_max_ball_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_ball_height_;
}
inline void GameEvent_ChippedGoal::_internal_set_max_ball_height(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ball_height_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotTooFastInStop

// required .Team by_team = 1;
inline bool GameEvent_BotTooFastInStop::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotTooFastInStop::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotTooFastInStop::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotTooFastInStop::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.by_team)
}
inline ::Team GameEvent_BotTooFastInStop::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotTooFastInStop::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotTooFastInStop::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotTooFastInStop::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotTooFastInStop::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotTooFastInStop::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.by_bot)
}
inline ::uint32_t GameEvent_BotTooFastInStop::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotTooFastInStop::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotTooFastInStop::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotTooFastInStop::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotTooFastInStop::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.location)
  return _internal_location();
}
inline void GameEvent_BotTooFastInStop::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotTooFastInStop.location)
}
inline ::Vector2* GameEvent_BotTooFastInStop::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotTooFastInStop::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotTooFastInStop.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotTooFastInStop::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotTooFastInStop::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotTooFastInStop.location)
  return _msg;
}
inline void GameEvent_BotTooFastInStop::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotTooFastInStop.location)
}

// optional float speed = 4;
inline bool GameEvent_BotTooFastInStop::has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotTooFastInStop::clear_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_BotTooFastInStop::speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTooFastInStop.speed)
  return _internal_speed();
}
inline void GameEvent_BotTooFastInStop::set_speed(float value) {
  _internal_set_speed(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotTooFastInStop.speed)
}
inline float GameEvent_BotTooFastInStop::_internal_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_;
}
inline void GameEvent_BotTooFastInStop::_internal_set_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_ = value;
}

// -------------------------------------------------------------------

// GameEvent_DefenderTooCloseToKickPoint

// required .Team by_team = 1;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_DefenderTooCloseToKickPoint::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.by_team)
  return _internal_by_team();
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.by_team)
}
inline ::Team GameEvent_DefenderTooCloseToKickPoint::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_DefenderTooCloseToKickPoint::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_DefenderTooCloseToKickPoint::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.by_bot)
}
inline ::uint32_t GameEvent_DefenderTooCloseToKickPoint::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_DefenderTooCloseToKickPoint::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_DefenderTooCloseToKickPoint::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_DefenderTooCloseToKickPoint::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.location)
  return _internal_location();
}
inline void GameEvent_DefenderTooCloseToKickPoint::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.DefenderTooCloseToKickPoint.location)
}
inline ::Vector2* GameEvent_DefenderTooCloseToKickPoint::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_DefenderTooCloseToKickPoint::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.DefenderTooCloseToKickPoint.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_DefenderTooCloseToKickPoint::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_DefenderTooCloseToKickPoint::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderTooCloseToKickPoint.location)
  return _msg;
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderTooCloseToKickPoint.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderTooCloseToKickPoint::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_DefenderTooCloseToKickPoint::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_DefenderTooCloseToKickPoint::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderTooCloseToKickPoint.distance)
  return _internal_distance();
}
inline void GameEvent_DefenderTooCloseToKickPoint::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderTooCloseToKickPoint.distance)
}
inline float GameEvent_DefenderTooCloseToKickPoint::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_DefenderTooCloseToKickPoint::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotCrashDrawn

// optional uint32 bot_yellow = 1;
inline bool GameEvent_BotCrashDrawn::has_bot_yellow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotCrashDrawn::clear_bot_yellow() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_yellow_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t GameEvent_BotCrashDrawn::bot_yellow() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.bot_yellow)
  return _internal_bot_yellow();
}
inline void GameEvent_BotCrashDrawn::set_bot_yellow(::uint32_t value) {
  _internal_set_bot_yellow(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.bot_yellow)
}
inline ::uint32_t GameEvent_BotCrashDrawn::_internal_bot_yellow() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_yellow_;
}
inline void GameEvent_BotCrashDrawn::_internal_set_bot_yellow(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_yellow_ = value;
}

// optional uint32 bot_blue = 2;
inline bool GameEvent_BotCrashDrawn::has_bot_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotCrashDrawn::clear_bot_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_blue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotCrashDrawn::bot_blue() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.bot_blue)
  return _internal_bot_blue();
}
inline void GameEvent_BotCrashDrawn::set_bot_blue(::uint32_t value) {
  _internal_set_bot_blue(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.bot_blue)
}
inline ::uint32_t GameEvent_BotCrashDrawn::_internal_bot_blue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bot_blue_;
}
inline void GameEvent_BotCrashDrawn::_internal_set_bot_blue(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bot_blue_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotCrashDrawn::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotCrashDrawn::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotCrashDrawn::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.location)
  return _internal_location();
}
inline void GameEvent_BotCrashDrawn::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotCrashDrawn.location)
}
inline ::Vector2* GameEvent_BotCrashDrawn::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotCrashDrawn::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotCrashDrawn.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotCrashDrawn::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotCrashDrawn::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotCrashDrawn.location)
  return _msg;
}
inline void GameEvent_BotCrashDrawn::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotCrashDrawn.location)
}

// optional float crash_speed = 4;
inline bool GameEvent_BotCrashDrawn::has_crash_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotCrashDrawn::clear_crash_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_BotCrashDrawn::crash_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.crash_speed)
  return _internal_crash_speed();
}
inline void GameEvent_BotCrashDrawn::set_crash_speed(float value) {
  _internal_set_crash_speed(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.crash_speed)
}
inline float GameEvent_BotCrashDrawn::_internal_crash_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_speed_;
}
inline void GameEvent_BotCrashDrawn::_internal_set_crash_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_speed_ = value;
}

// optional float speed_diff = 5;
inline bool GameEvent_BotCrashDrawn::has_speed_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_BotCrashDrawn::clear_speed_diff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_BotCrashDrawn::speed_diff() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.speed_diff)
  return _internal_speed_diff();
}
inline void GameEvent_BotCrashDrawn::set_speed_diff(float value) {
  _internal_set_speed_diff(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.speed_diff)
}
inline float GameEvent_BotCrashDrawn::_internal_speed_diff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_diff_;
}
inline void GameEvent_BotCrashDrawn::_internal_set_speed_diff(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_diff_ = value;
}

// optional float crash_angle = 6;
inline bool GameEvent_BotCrashDrawn::has_crash_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GameEvent_BotCrashDrawn::clear_crash_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float GameEvent_BotCrashDrawn::crash_angle() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashDrawn.crash_angle)
  return _internal_crash_angle();
}
inline void GameEvent_BotCrashDrawn::set_crash_angle(float value) {
  _internal_set_crash_angle(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashDrawn.crash_angle)
}
inline float GameEvent_BotCrashDrawn::_internal_crash_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_angle_;
}
inline void GameEvent_BotCrashDrawn::_internal_set_crash_angle(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_angle_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotCrashUnique

// required .Team by_team = 1;
inline bool GameEvent_BotCrashUnique::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotCrashUnique::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotCrashUnique::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.by_team)
}
inline ::Team GameEvent_BotCrashUnique::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotCrashUnique::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 violator = 2;
inline bool GameEvent_BotCrashUnique::has_violator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_violator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violator_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotCrashUnique::violator() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.violator)
  return _internal_violator();
}
inline void GameEvent_BotCrashUnique::set_violator(::uint32_t value) {
  _internal_set_violator(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.violator)
}
inline ::uint32_t GameEvent_BotCrashUnique::_internal_violator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violator_;
}
inline void GameEvent_BotCrashUnique::_internal_set_violator(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violator_ = value;
}

// optional uint32 victim = 3;
inline bool GameEvent_BotCrashUnique::has_victim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_victim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_BotCrashUnique::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.victim)
  return _internal_victim();
}
inline void GameEvent_BotCrashUnique::set_victim(::uint32_t value) {
  _internal_set_victim(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.victim)
}
inline ::uint32_t GameEvent_BotCrashUnique::_internal_victim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.victim_;
}
inline void GameEvent_BotCrashUnique::_internal_set_victim(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = value;
}

// optional .Vector2 location = 4;
inline bool GameEvent_BotCrashUnique::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotCrashUnique::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotCrashUnique::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.location)
  return _internal_location();
}
inline void GameEvent_BotCrashUnique::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotCrashUnique.location)
}
inline ::Vector2* GameEvent_BotCrashUnique::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotCrashUnique::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotCrashUnique.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotCrashUnique::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotCrashUnique::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotCrashUnique.location)
  return _msg;
}
inline void GameEvent_BotCrashUnique::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotCrashUnique.location)
}

// optional float crash_speed = 5;
inline bool GameEvent_BotCrashUnique::has_crash_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_crash_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_BotCrashUnique::crash_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.crash_speed)
  return _internal_crash_speed();
}
inline void GameEvent_BotCrashUnique::set_crash_speed(float value) {
  _internal_set_crash_speed(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.crash_speed)
}
inline float GameEvent_BotCrashUnique::_internal_crash_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_speed_;
}
inline void GameEvent_BotCrashUnique::_internal_set_crash_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_speed_ = value;
}

// optional float speed_diff = 6;
inline bool GameEvent_BotCrashUnique::has_speed_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_speed_diff() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float GameEvent_BotCrashUnique::speed_diff() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.speed_diff)
  return _internal_speed_diff();
}
inline void GameEvent_BotCrashUnique::set_speed_diff(float value) {
  _internal_set_speed_diff(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.speed_diff)
}
inline float GameEvent_BotCrashUnique::_internal_speed_diff() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speed_diff_;
}
inline void GameEvent_BotCrashUnique::_internal_set_speed_diff(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speed_diff_ = value;
}

// optional float crash_angle = 7;
inline bool GameEvent_BotCrashUnique::has_crash_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GameEvent_BotCrashUnique::clear_crash_angle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float GameEvent_BotCrashUnique::crash_angle() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotCrashUnique.crash_angle)
  return _internal_crash_angle();
}
inline void GameEvent_BotCrashUnique::set_crash_angle(float value) {
  _internal_set_crash_angle(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:GameEvent.BotCrashUnique.crash_angle)
}
inline float GameEvent_BotCrashUnique::_internal_crash_angle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crash_angle_;
}
inline void GameEvent_BotCrashUnique::_internal_set_crash_angle(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crash_angle_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotPushedBot

// required .Team by_team = 1;
inline bool GameEvent_BotPushedBot::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotPushedBot::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotPushedBot::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotPushedBot::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.by_team)
}
inline ::Team GameEvent_BotPushedBot::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotPushedBot::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 violator = 2;
inline bool GameEvent_BotPushedBot::has_violator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotPushedBot::clear_violator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violator_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotPushedBot::violator() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.violator)
  return _internal_violator();
}
inline void GameEvent_BotPushedBot::set_violator(::uint32_t value) {
  _internal_set_violator(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.violator)
}
inline ::uint32_t GameEvent_BotPushedBot::_internal_violator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violator_;
}
inline void GameEvent_BotPushedBot::_internal_set_violator(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violator_ = value;
}

// optional uint32 victim = 3;
inline bool GameEvent_BotPushedBot::has_victim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotPushedBot::clear_victim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_BotPushedBot::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.victim)
  return _internal_victim();
}
inline void GameEvent_BotPushedBot::set_victim(::uint32_t value) {
  _internal_set_victim(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.victim)
}
inline ::uint32_t GameEvent_BotPushedBot::_internal_victim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.victim_;
}
inline void GameEvent_BotPushedBot::_internal_set_victim(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = value;
}

// optional .Vector2 location = 4;
inline bool GameEvent_BotPushedBot::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotPushedBot::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotPushedBot::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.location)
  return _internal_location();
}
inline void GameEvent_BotPushedBot::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotPushedBot.location)
}
inline ::Vector2* GameEvent_BotPushedBot::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotPushedBot::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotPushedBot.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotPushedBot::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotPushedBot::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotPushedBot.location)
  return _msg;
}
inline void GameEvent_BotPushedBot::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotPushedBot.location)
}

// optional float pushed_distance = 5;
inline bool GameEvent_BotPushedBot::has_pushed_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_BotPushedBot::clear_pushed_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pushed_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_BotPushedBot::pushed_distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotPushedBot.pushed_distance)
  return _internal_pushed_distance();
}
inline void GameEvent_BotPushedBot::set_pushed_distance(float value) {
  _internal_set_pushed_distance(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.BotPushedBot.pushed_distance)
}
inline float GameEvent_BotPushedBot::_internal_pushed_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pushed_distance_;
}
inline void GameEvent_BotPushedBot::_internal_set_pushed_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pushed_distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotTippedOver

// required .Team by_team = 1;
inline bool GameEvent_BotTippedOver::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotTippedOver::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_BotTippedOver::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotTippedOver::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotTippedOver.by_team)
}
inline ::Team GameEvent_BotTippedOver::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotTippedOver::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotTippedOver::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotTippedOver::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_BotTippedOver::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotTippedOver::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotTippedOver.by_bot)
}
inline ::uint32_t GameEvent_BotTippedOver::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotTippedOver::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotTippedOver::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotTippedOver::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotTippedOver::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.location)
  return _internal_location();
}
inline void GameEvent_BotTippedOver::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotTippedOver.location)
}
inline ::Vector2* GameEvent_BotTippedOver::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotTippedOver::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotTippedOver.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotTippedOver::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotTippedOver::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotTippedOver.location)
  return _msg;
}
inline void GameEvent_BotTippedOver::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotTippedOver.location)
}

// optional .Vector2 ball_location = 4;
inline bool GameEvent_BotTippedOver::has_ball_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotTippedOver::_internal_ball_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.ball_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotTippedOver::ball_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotTippedOver.ball_location)
  return _internal_ball_location();
}
inline void GameEvent_BotTippedOver::unsafe_arena_set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }
  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotTippedOver.ball_location)
}
inline ::Vector2* GameEvent_BotTippedOver::release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotTippedOver::unsafe_arena_release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotTippedOver.ball_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotTippedOver::_internal_mutable_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.ball_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.ball_location_;
}
inline ::Vector2* GameEvent_BotTippedOver::mutable_ball_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_ball_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotTippedOver.ball_location)
  return _msg;
}
inline void GameEvent_BotTippedOver::set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotTippedOver.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_BotDroppedParts

// required .Team by_team = 1;
inline bool GameEvent_BotDroppedParts::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotDroppedParts::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_BotDroppedParts::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDroppedParts.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotDroppedParts::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotDroppedParts.by_team)
}
inline ::Team GameEvent_BotDroppedParts::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotDroppedParts::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotDroppedParts::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotDroppedParts::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_BotDroppedParts::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDroppedParts.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotDroppedParts::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotDroppedParts.by_bot)
}
inline ::uint32_t GameEvent_BotDroppedParts::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotDroppedParts::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotDroppedParts::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotDroppedParts::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotDroppedParts::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotDroppedParts.location)
  return _internal_location();
}
inline void GameEvent_BotDroppedParts::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotDroppedParts.location)
}
inline ::Vector2* GameEvent_BotDroppedParts::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotDroppedParts::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotDroppedParts.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotDroppedParts::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotDroppedParts::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDroppedParts.location)
  return _msg;
}
inline void GameEvent_BotDroppedParts::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDroppedParts.location)
}

// optional .Vector2 ball_location = 4;
inline bool GameEvent_BotDroppedParts::has_ball_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotDroppedParts::_internal_ball_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.ball_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotDroppedParts::ball_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotDroppedParts.ball_location)
  return _internal_ball_location();
}
inline void GameEvent_BotDroppedParts::unsafe_arena_set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }
  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotDroppedParts.ball_location)
}
inline ::Vector2* GameEvent_BotDroppedParts::release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotDroppedParts::unsafe_arena_release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotDroppedParts.ball_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotDroppedParts::_internal_mutable_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.ball_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.ball_location_;
}
inline ::Vector2* GameEvent_BotDroppedParts::mutable_ball_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_ball_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDroppedParts.ball_location)
  return _msg;
}
inline void GameEvent_BotDroppedParts::set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDroppedParts.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_DefenderInDefenseArea

// required .Team by_team = 1;
inline bool GameEvent_DefenderInDefenseArea::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseArea::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_DefenderInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.by_team)
  return _internal_by_team();
}
inline void GameEvent_DefenderInDefenseArea::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.by_team)
}
inline ::Team GameEvent_DefenderInDefenseArea::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_DefenderInDefenseArea::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderInDefenseArea::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseArea::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_DefenderInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_DefenderInDefenseArea::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.by_bot)
}
inline ::uint32_t GameEvent_DefenderInDefenseArea::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_DefenderInDefenseArea::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_DefenderInDefenseArea::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_DefenderInDefenseArea::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_DefenderInDefenseArea::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.location)
  return _internal_location();
}
inline void GameEvent_DefenderInDefenseArea::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.DefenderInDefenseArea.location)
}
inline ::Vector2* GameEvent_DefenderInDefenseArea::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_DefenderInDefenseArea::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.DefenderInDefenseArea.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_DefenderInDefenseArea::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_DefenderInDefenseArea::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderInDefenseArea.location)
  return _msg;
}
inline void GameEvent_DefenderInDefenseArea::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderInDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderInDefenseArea::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseArea::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_DefenderInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseArea.distance)
  return _internal_distance();
}
inline void GameEvent_DefenderInDefenseArea::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseArea.distance)
}
inline float GameEvent_DefenderInDefenseArea::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_DefenderInDefenseArea::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_DefenderInDefenseAreaPartially

// required .Team by_team = 1;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_DefenderInDefenseAreaPartially::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.by_team)
  return _internal_by_team();
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.by_team)
}
inline ::Team GameEvent_DefenderInDefenseAreaPartially::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_DefenderInDefenseAreaPartially::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_DefenderInDefenseAreaPartially::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.by_bot)
}
inline ::uint32_t GameEvent_DefenderInDefenseAreaPartially::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_DefenderInDefenseAreaPartially::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_DefenderInDefenseAreaPartially::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.location)
  return _internal_location();
}
inline void GameEvent_DefenderInDefenseAreaPartially::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.DefenderInDefenseAreaPartially.location)
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.DefenderInDefenseAreaPartially.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderInDefenseAreaPartially.location)
  return _msg;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderInDefenseAreaPartially.location)
}

// optional float distance = 4;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_DefenderInDefenseAreaPartially::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_DefenderInDefenseAreaPartially::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.distance)
  return _internal_distance();
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.DefenderInDefenseAreaPartially.distance)
}
inline float GameEvent_DefenderInDefenseAreaPartially::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_DefenderInDefenseAreaPartially::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// optional .Vector2 ball_location = 5;
inline bool GameEvent_DefenderInDefenseAreaPartially::has_ball_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_DefenderInDefenseAreaPartially::_internal_ball_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.ball_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_DefenderInDefenseAreaPartially::ball_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.DefenderInDefenseAreaPartially.ball_location)
  return _internal_ball_location();
}
inline void GameEvent_DefenderInDefenseAreaPartially::unsafe_arena_set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }
  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.DefenderInDefenseAreaPartially.ball_location)
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::unsafe_arena_release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.DefenderInDefenseAreaPartially.ball_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::_internal_mutable_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.ball_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.ball_location_;
}
inline ::Vector2* GameEvent_DefenderInDefenseAreaPartially::mutable_ball_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_ball_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.DefenderInDefenseAreaPartially.ball_location)
  return _msg;
}
inline void GameEvent_DefenderInDefenseAreaPartially::set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.DefenderInDefenseAreaPartially.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTouchedBallInDefenseArea

// required .Team by_team = 1;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_AttackerTouchedBallInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.by_team)
  return _internal_by_team();
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.by_team)
}
inline ::Team GameEvent_AttackerTouchedBallInDefenseArea::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_AttackerTouchedBallInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.by_bot)
}
inline ::uint32_t GameEvent_AttackerTouchedBallInDefenseArea::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AttackerTouchedBallInDefenseArea::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AttackerTouchedBallInDefenseArea::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.location)
  return _internal_location();
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AttackerTouchedBallInDefenseArea.location)
}
inline ::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTouchedBallInDefenseArea.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_AttackerTouchedBallInDefenseArea::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTouchedBallInDefenseArea.location)
  return _msg;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTouchedBallInDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_AttackerTouchedBallInDefenseArea::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_AttackerTouchedBallInDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedBallInDefenseArea.distance)
  return _internal_distance();
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedBallInDefenseArea.distance)
}
inline float GameEvent_AttackerTouchedBallInDefenseArea::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_AttackerTouchedBallInDefenseArea::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotKickedBallTooFast

// required .Team by_team = 1;
inline bool GameEvent_BotKickedBallTooFast::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotKickedBallTooFast::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotKickedBallTooFast::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotKickedBallTooFast::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.by_team)
}
inline ::Team GameEvent_BotKickedBallTooFast::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotKickedBallTooFast::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotKickedBallTooFast::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotKickedBallTooFast::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotKickedBallTooFast::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotKickedBallTooFast::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.by_bot)
}
inline ::uint32_t GameEvent_BotKickedBallTooFast::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotKickedBallTooFast::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotKickedBallTooFast::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotKickedBallTooFast::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotKickedBallTooFast::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.location)
  return _internal_location();
}
inline void GameEvent_BotKickedBallTooFast::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotKickedBallTooFast.location)
}
inline ::Vector2* GameEvent_BotKickedBallTooFast::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotKickedBallTooFast::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotKickedBallTooFast.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotKickedBallTooFast::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotKickedBallTooFast::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotKickedBallTooFast.location)
  return _msg;
}
inline void GameEvent_BotKickedBallTooFast::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotKickedBallTooFast.location)
}

// optional float initial_ball_speed = 4;
inline bool GameEvent_BotKickedBallTooFast::has_initial_ball_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotKickedBallTooFast::clear_initial_ball_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ball_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_BotKickedBallTooFast::initial_ball_speed() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.initial_ball_speed)
  return _internal_initial_ball_speed();
}
inline void GameEvent_BotKickedBallTooFast::set_initial_ball_speed(float value) {
  _internal_set_initial_ball_speed(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.initial_ball_speed)
}
inline float GameEvent_BotKickedBallTooFast::_internal_initial_ball_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.initial_ball_speed_;
}
inline void GameEvent_BotKickedBallTooFast::_internal_set_initial_ball_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.initial_ball_speed_ = value;
}

// optional bool chipped = 5;
inline bool GameEvent_BotKickedBallTooFast::has_chipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_BotKickedBallTooFast::clear_chipped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chipped_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool GameEvent_BotKickedBallTooFast::chipped() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotKickedBallTooFast.chipped)
  return _internal_chipped();
}
inline void GameEvent_BotKickedBallTooFast::set_chipped(bool value) {
  _internal_set_chipped(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.BotKickedBallTooFast.chipped)
}
inline bool GameEvent_BotKickedBallTooFast::_internal_chipped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chipped_;
}
inline void GameEvent_BotKickedBallTooFast::_internal_set_chipped(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chipped_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotDribbledBallTooFar

// required .Team by_team = 1;
inline bool GameEvent_BotDribbledBallTooFar::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotDribbledBallTooFar::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_BotDribbledBallTooFar::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotDribbledBallTooFar::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotDribbledBallTooFar.by_team)
}
inline ::Team GameEvent_BotDribbledBallTooFar::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotDribbledBallTooFar::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotDribbledBallTooFar::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotDribbledBallTooFar::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_BotDribbledBallTooFar::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotDribbledBallTooFar::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotDribbledBallTooFar.by_bot)
}
inline ::uint32_t GameEvent_BotDribbledBallTooFar::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotDribbledBallTooFar::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 start = 3;
inline bool GameEvent_BotDribbledBallTooFar::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotDribbledBallTooFar::_internal_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotDribbledBallTooFar::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.start)
  return _internal_start();
}
inline void GameEvent_BotDribbledBallTooFar::unsafe_arena_set_allocated_start(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotDribbledBallTooFar.start)
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::release_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::unsafe_arena_release_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotDribbledBallTooFar.start)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::_internal_mutable_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.start_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.start_;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDribbledBallTooFar.start)
  return _msg;
}
inline void GameEvent_BotDribbledBallTooFar::set_allocated_start(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDribbledBallTooFar.start)
}

// optional .Vector2 end = 4;
inline bool GameEvent_BotDribbledBallTooFar::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotDribbledBallTooFar::_internal_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotDribbledBallTooFar::end() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotDribbledBallTooFar.end)
  return _internal_end();
}
inline void GameEvent_BotDribbledBallTooFar::unsafe_arena_set_allocated_end(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotDribbledBallTooFar.end)
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::release_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::unsafe_arena_release_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotDribbledBallTooFar.end)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::_internal_mutable_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.end_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.end_;
}
inline ::Vector2* GameEvent_BotDribbledBallTooFar::mutable_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotDribbledBallTooFar.end)
  return _msg;
}
inline void GameEvent_BotDribbledBallTooFar::set_allocated_end(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotDribbledBallTooFar.end)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTouchedOpponentInDefenseArea

// required .Team by_team = 1;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_AttackerTouchedOpponentInDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
  return _internal_by_team();
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.by_team)
}
inline ::Team GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_AttackerTouchedOpponentInDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.by_bot)
}
inline ::uint32_t GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional uint32 victim = 4;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_victim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_victim() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_AttackerTouchedOpponentInDefenseArea::victim() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
  return _internal_victim();
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_victim(::uint32_t value) {
  _internal_set_victim(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTouchedOpponentInDefenseArea.victim)
}
inline ::uint32_t GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_victim() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.victim_;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_set_victim(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.victim_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_AttackerTouchedOpponentInDefenseArea::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AttackerTouchedOpponentInDefenseArea::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return _internal_location();
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
}
inline ::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTouchedOpponentInDefenseArea.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_AttackerTouchedOpponentInDefenseArea::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
  return _msg;
}
inline void GameEvent_AttackerTouchedOpponentInDefenseArea::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTouchedOpponentInDefenseArea.location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerDoubleTouchedBall

// required .Team by_team = 1;
inline bool GameEvent_AttackerDoubleTouchedBall::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_AttackerDoubleTouchedBall::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.by_team)
  return _internal_by_team();
}
inline void GameEvent_AttackerDoubleTouchedBall::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerDoubleTouchedBall.by_team)
}
inline ::Team GameEvent_AttackerDoubleTouchedBall::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_AttackerDoubleTouchedBall::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerDoubleTouchedBall::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_AttackerDoubleTouchedBall::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_AttackerDoubleTouchedBall::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_AttackerDoubleTouchedBall::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerDoubleTouchedBall.by_bot)
}
inline ::uint32_t GameEvent_AttackerDoubleTouchedBall::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_AttackerDoubleTouchedBall::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_AttackerDoubleTouchedBall::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AttackerDoubleTouchedBall::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AttackerDoubleTouchedBall::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerDoubleTouchedBall.location)
  return _internal_location();
}
inline void GameEvent_AttackerDoubleTouchedBall::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AttackerDoubleTouchedBall.location)
}
inline ::Vector2* GameEvent_AttackerDoubleTouchedBall::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AttackerDoubleTouchedBall::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AttackerDoubleTouchedBall.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AttackerDoubleTouchedBall::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_AttackerDoubleTouchedBall::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerDoubleTouchedBall.location)
  return _msg;
}
inline void GameEvent_AttackerDoubleTouchedBall::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerDoubleTouchedBall.location)
}

// -------------------------------------------------------------------

// GameEvent_AttackerTooCloseToDefenseArea

// required .Team by_team = 1;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_AttackerTooCloseToDefenseArea::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.by_team)
  return _internal_by_team();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.by_team)
}
inline ::Team GameEvent_AttackerTooCloseToDefenseArea::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_AttackerTooCloseToDefenseArea::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameEvent_AttackerTooCloseToDefenseArea::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.by_bot)
}
inline ::uint32_t GameEvent_AttackerTooCloseToDefenseArea::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AttackerTooCloseToDefenseArea::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AttackerTooCloseToDefenseArea::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.location)
  return _internal_location();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AttackerTooCloseToDefenseArea.location)
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTooCloseToDefenseArea.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTooCloseToDefenseArea.location)
  return _msg;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTooCloseToDefenseArea.location)
}

// optional float distance = 4;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GameEvent_AttackerTooCloseToDefenseArea::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.distance)
  return _internal_distance();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameEvent.AttackerTooCloseToDefenseArea.distance)
}
inline float GameEvent_AttackerTooCloseToDefenseArea::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// optional .Vector2 ball_location = 5;
inline bool GameEvent_AttackerTooCloseToDefenseArea::has_ball_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_AttackerTooCloseToDefenseArea::_internal_ball_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.ball_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_AttackerTooCloseToDefenseArea::ball_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.AttackerTooCloseToDefenseArea.ball_location)
  return _internal_ball_location();
}
inline void GameEvent_AttackerTooCloseToDefenseArea::unsafe_arena_set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }
  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.AttackerTooCloseToDefenseArea.ball_location)
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::unsafe_arena_release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.AttackerTooCloseToDefenseArea.ball_location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::_internal_mutable_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.ball_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.ball_location_;
}
inline ::Vector2* GameEvent_AttackerTooCloseToDefenseArea::mutable_ball_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_ball_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.AttackerTooCloseToDefenseArea.ball_location)
  return _msg;
}
inline void GameEvent_AttackerTooCloseToDefenseArea::set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.AttackerTooCloseToDefenseArea.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_BotHeldBallDeliberately

// required .Team by_team = 1;
inline bool GameEvent_BotHeldBallDeliberately::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotHeldBallDeliberately::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotHeldBallDeliberately::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotHeldBallDeliberately::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.by_team)
}
inline ::Team GameEvent_BotHeldBallDeliberately::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotHeldBallDeliberately::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotHeldBallDeliberately::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotHeldBallDeliberately::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotHeldBallDeliberately::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotHeldBallDeliberately::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.by_bot)
}
inline ::uint32_t GameEvent_BotHeldBallDeliberately::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotHeldBallDeliberately::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotHeldBallDeliberately::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotHeldBallDeliberately::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotHeldBallDeliberately::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.location)
  return _internal_location();
}
inline void GameEvent_BotHeldBallDeliberately::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotHeldBallDeliberately.location)
}
inline ::Vector2* GameEvent_BotHeldBallDeliberately::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotHeldBallDeliberately::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotHeldBallDeliberately.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotHeldBallDeliberately::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotHeldBallDeliberately::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotHeldBallDeliberately.location)
  return _msg;
}
inline void GameEvent_BotHeldBallDeliberately::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotHeldBallDeliberately.location)
}

// optional float duration = 4;
inline bool GameEvent_BotHeldBallDeliberately::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_BotHeldBallDeliberately::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_BotHeldBallDeliberately::duration() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotHeldBallDeliberately.duration)
  return _internal_duration();
}
inline void GameEvent_BotHeldBallDeliberately::set_duration(float value) {
  _internal_set_duration(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.BotHeldBallDeliberately.duration)
}
inline float GameEvent_BotHeldBallDeliberately::_internal_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_;
}
inline void GameEvent_BotHeldBallDeliberately::_internal_set_duration(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotInterferedPlacement

// required .Team by_team = 1;
inline bool GameEvent_BotInterferedPlacement::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BotInterferedPlacement::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BotInterferedPlacement::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotInterferedPlacement::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BotInterferedPlacement.by_team)
}
inline ::Team GameEvent_BotInterferedPlacement::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotInterferedPlacement::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional uint32 by_bot = 2;
inline bool GameEvent_BotInterferedPlacement::has_by_bot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_BotInterferedPlacement::clear_by_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GameEvent_BotInterferedPlacement::by_bot() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.by_bot)
  return _internal_by_bot();
}
inline void GameEvent_BotInterferedPlacement::set_by_bot(::uint32_t value) {
  _internal_set_by_bot(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.BotInterferedPlacement.by_bot)
}
inline ::uint32_t GameEvent_BotInterferedPlacement::_internal_by_bot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.by_bot_;
}
inline void GameEvent_BotInterferedPlacement::_internal_set_by_bot(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_bot_ = value;
}

// optional .Vector2 location = 3;
inline bool GameEvent_BotInterferedPlacement::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BotInterferedPlacement::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BotInterferedPlacement::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BotInterferedPlacement.location)
  return _internal_location();
}
inline void GameEvent_BotInterferedPlacement::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BotInterferedPlacement.location)
}
inline ::Vector2* GameEvent_BotInterferedPlacement::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BotInterferedPlacement::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BotInterferedPlacement.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BotInterferedPlacement::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BotInterferedPlacement::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BotInterferedPlacement.location)
  return _msg;
}
inline void GameEvent_BotInterferedPlacement::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BotInterferedPlacement.location)
}

// -------------------------------------------------------------------

// GameEvent_MultipleCards

// required .Team by_team = 1;
inline bool GameEvent_MultipleCards::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_MultipleCards::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_MultipleCards::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultipleCards.by_team)
  return _internal_by_team();
}
inline void GameEvent_MultipleCards::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.MultipleCards.by_team)
}
inline ::Team GameEvent_MultipleCards::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_MultipleCards::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_MultipleFouls

// required .Team by_team = 1;
inline bool GameEvent_MultipleFouls::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_MultipleFouls::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_MultipleFouls::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultipleFouls.by_team)
  return _internal_by_team();
}
inline void GameEvent_MultipleFouls::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.MultipleFouls.by_team)
}
inline ::Team GameEvent_MultipleFouls::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_MultipleFouls::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// repeated .GameEvent caused_game_events = 2;
inline int GameEvent_MultipleFouls::_internal_caused_game_events_size() const {
  return _internal_caused_game_events().size();
}
inline int GameEvent_MultipleFouls::caused_game_events_size() const {
  return _internal_caused_game_events_size();
}
inline void GameEvent_MultipleFouls::clear_caused_game_events() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.caused_game_events_.Clear();
}
inline ::GameEvent* GameEvent_MultipleFouls::mutable_caused_game_events(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:GameEvent.MultipleFouls.caused_game_events)
  return _internal_mutable_caused_game_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>* GameEvent_MultipleFouls::mutable_caused_game_events()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GameEvent.MultipleFouls.caused_game_events)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_caused_game_events();
}
inline const ::GameEvent& GameEvent_MultipleFouls::caused_game_events(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.MultipleFouls.caused_game_events)
  return _internal_caused_game_events().Get(index);
}
inline ::GameEvent* GameEvent_MultipleFouls::add_caused_game_events() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::GameEvent* _add = _internal_mutable_caused_game_events()->Add();
  // @@protoc_insertion_point(field_add:GameEvent.MultipleFouls.caused_game_events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>& GameEvent_MultipleFouls::caused_game_events() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GameEvent.MultipleFouls.caused_game_events)
  return _internal_caused_game_events();
}
inline const ::google::protobuf::RepeatedPtrField<::GameEvent>&
GameEvent_MultipleFouls::_internal_caused_game_events() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.caused_game_events_;
}
inline ::google::protobuf::RepeatedPtrField<::GameEvent>*
GameEvent_MultipleFouls::_internal_mutable_caused_game_events() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.caused_game_events_;
}

// -------------------------------------------------------------------

// GameEvent_MultiplePlacementFailures

// required .Team by_team = 1;
inline bool GameEvent_MultiplePlacementFailures::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_MultiplePlacementFailures::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_MultiplePlacementFailures::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.MultiplePlacementFailures.by_team)
  return _internal_by_team();
}
inline void GameEvent_MultiplePlacementFailures::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.MultiplePlacementFailures.by_team)
}
inline ::Team GameEvent_MultiplePlacementFailures::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_MultiplePlacementFailures::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_KickTimeout

// required .Team by_team = 1;
inline bool GameEvent_KickTimeout::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_KickTimeout::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_KickTimeout::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.by_team)
  return _internal_by_team();
}
inline void GameEvent_KickTimeout::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.KickTimeout.by_team)
}
inline ::Team GameEvent_KickTimeout::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_KickTimeout::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional .Vector2 location = 2;
inline bool GameEvent_KickTimeout::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_KickTimeout::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_KickTimeout::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.location)
  return _internal_location();
}
inline void GameEvent_KickTimeout::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.KickTimeout.location)
}
inline ::Vector2* GameEvent_KickTimeout::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_KickTimeout::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.KickTimeout.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_KickTimeout::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_KickTimeout::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.KickTimeout.location)
  return _msg;
}
inline void GameEvent_KickTimeout::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.KickTimeout.location)
}

// optional float time = 3;
inline bool GameEvent_KickTimeout::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_KickTimeout::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameEvent_KickTimeout::time() const {
  // @@protoc_insertion_point(field_get:GameEvent.KickTimeout.time)
  return _internal_time();
}
inline void GameEvent_KickTimeout::set_time(float value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.KickTimeout.time)
}
inline float GameEvent_KickTimeout::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void GameEvent_KickTimeout::_internal_set_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// GameEvent_NoProgressInGame

// optional .Vector2 location = 1;
inline bool GameEvent_NoProgressInGame::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_NoProgressInGame::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_NoProgressInGame::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.NoProgressInGame.location)
  return _internal_location();
}
inline void GameEvent_NoProgressInGame::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.NoProgressInGame.location)
}
inline ::Vector2* GameEvent_NoProgressInGame::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_NoProgressInGame::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.NoProgressInGame.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_NoProgressInGame::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_NoProgressInGame::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.NoProgressInGame.location)
  return _msg;
}
inline void GameEvent_NoProgressInGame::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.NoProgressInGame.location)
}

// optional float time = 2;
inline bool GameEvent_NoProgressInGame::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_NoProgressInGame::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float GameEvent_NoProgressInGame::time() const {
  // @@protoc_insertion_point(field_get:GameEvent.NoProgressInGame.time)
  return _internal_time();
}
inline void GameEvent_NoProgressInGame::set_time(float value) {
  _internal_set_time(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.NoProgressInGame.time)
}
inline float GameEvent_NoProgressInGame::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_;
}
inline void GameEvent_NoProgressInGame::_internal_set_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// GameEvent_PlacementFailed

// required .Team by_team = 1;
inline bool GameEvent_PlacementFailed::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_PlacementFailed::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_PlacementFailed::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementFailed.by_team)
  return _internal_by_team();
}
inline void GameEvent_PlacementFailed::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementFailed.by_team)
}
inline ::Team GameEvent_PlacementFailed::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_PlacementFailed::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional float remaining_distance = 2;
inline bool GameEvent_PlacementFailed::has_remaining_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_PlacementFailed::clear_remaining_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float GameEvent_PlacementFailed::remaining_distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementFailed.remaining_distance)
  return _internal_remaining_distance();
}
inline void GameEvent_PlacementFailed::set_remaining_distance(float value) {
  _internal_set_remaining_distance(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementFailed.remaining_distance)
}
inline float GameEvent_PlacementFailed::_internal_remaining_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_distance_;
}
inline void GameEvent_PlacementFailed::_internal_set_remaining_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_distance_ = value;
}

// optional float nearest_own_bot_distance = 3;
inline bool GameEvent_PlacementFailed::has_nearest_own_bot_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_PlacementFailed::clear_nearest_own_bot_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nearest_own_bot_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameEvent_PlacementFailed::nearest_own_bot_distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementFailed.nearest_own_bot_distance)
  return _internal_nearest_own_bot_distance();
}
inline void GameEvent_PlacementFailed::set_nearest_own_bot_distance(float value) {
  _internal_set_nearest_own_bot_distance(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementFailed.nearest_own_bot_distance)
}
inline float GameEvent_PlacementFailed::_internal_nearest_own_bot_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nearest_own_bot_distance_;
}
inline void GameEvent_PlacementFailed::_internal_set_nearest_own_bot_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nearest_own_bot_distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_UnsportingBehaviorMinor

// required .Team by_team = 1;
inline bool GameEvent_UnsportingBehaviorMinor::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_UnsportingBehaviorMinor::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMinor.by_team)
  return _internal_by_team();
}
inline void GameEvent_UnsportingBehaviorMinor::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMinor.by_team)
}
inline ::Team GameEvent_UnsportingBehaviorMinor::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_UnsportingBehaviorMinor::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// required string reason = 2;
inline bool GameEvent_UnsportingBehaviorMinor::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_UnsportingBehaviorMinor::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent_UnsportingBehaviorMinor::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMinor.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEvent_UnsportingBehaviorMinor::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMinor.reason)
}
inline std::string* GameEvent_UnsportingBehaviorMinor::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:GameEvent.UnsportingBehaviorMinor.reason)
  return _s;
}
inline const std::string& GameEvent_UnsportingBehaviorMinor::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void GameEvent_UnsportingBehaviorMinor::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* GameEvent_UnsportingBehaviorMinor::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* GameEvent_UnsportingBehaviorMinor::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.UnsportingBehaviorMinor.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEvent_UnsportingBehaviorMinor::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEvent.UnsportingBehaviorMinor.reason)
}

// -------------------------------------------------------------------

// GameEvent_UnsportingBehaviorMajor

// required .Team by_team = 1;
inline bool GameEvent_UnsportingBehaviorMajor::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_UnsportingBehaviorMajor::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMajor.by_team)
  return _internal_by_team();
}
inline void GameEvent_UnsportingBehaviorMajor::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMajor.by_team)
}
inline ::Team GameEvent_UnsportingBehaviorMajor::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_UnsportingBehaviorMajor::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// required string reason = 2;
inline bool GameEvent_UnsportingBehaviorMajor::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_UnsportingBehaviorMajor::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent_UnsportingBehaviorMajor::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.UnsportingBehaviorMajor.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEvent_UnsportingBehaviorMajor::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEvent.UnsportingBehaviorMajor.reason)
}
inline std::string* GameEvent_UnsportingBehaviorMajor::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:GameEvent.UnsportingBehaviorMajor.reason)
  return _s;
}
inline const std::string& GameEvent_UnsportingBehaviorMajor::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void GameEvent_UnsportingBehaviorMajor::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* GameEvent_UnsportingBehaviorMajor::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* GameEvent_UnsportingBehaviorMajor::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.UnsportingBehaviorMajor.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEvent_UnsportingBehaviorMajor::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEvent.UnsportingBehaviorMajor.reason)
}

// -------------------------------------------------------------------

// GameEvent_KeeperHeldBall

// required .Team by_team = 1;
inline bool GameEvent_KeeperHeldBall::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_KeeperHeldBall::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_KeeperHeldBall::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.by_team)
  return _internal_by_team();
}
inline void GameEvent_KeeperHeldBall::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.KeeperHeldBall.by_team)
}
inline ::Team GameEvent_KeeperHeldBall::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_KeeperHeldBall::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional .Vector2 location = 2;
inline bool GameEvent_KeeperHeldBall::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_KeeperHeldBall::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_KeeperHeldBall::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.location)
  return _internal_location();
}
inline void GameEvent_KeeperHeldBall::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.KeeperHeldBall.location)
}
inline ::Vector2* GameEvent_KeeperHeldBall::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_KeeperHeldBall::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.KeeperHeldBall.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_KeeperHeldBall::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_KeeperHeldBall::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.KeeperHeldBall.location)
  return _msg;
}
inline void GameEvent_KeeperHeldBall::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.KeeperHeldBall.location)
}

// optional float duration = 3;
inline bool GameEvent_KeeperHeldBall::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_KeeperHeldBall::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameEvent_KeeperHeldBall::duration() const {
  // @@protoc_insertion_point(field_get:GameEvent.KeeperHeldBall.duration)
  return _internal_duration();
}
inline void GameEvent_KeeperHeldBall::set_duration(float value) {
  _internal_set_duration(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.KeeperHeldBall.duration)
}
inline float GameEvent_KeeperHeldBall::_internal_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_;
}
inline void GameEvent_KeeperHeldBall::_internal_set_duration(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = value;
}

// -------------------------------------------------------------------

// GameEvent_PlacementSucceeded

// required .Team by_team = 1;
inline bool GameEvent_PlacementSucceeded::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_PlacementSucceeded::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_PlacementSucceeded::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.by_team)
  return _internal_by_team();
}
inline void GameEvent_PlacementSucceeded::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.by_team)
}
inline ::Team GameEvent_PlacementSucceeded::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_PlacementSucceeded::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional float time_taken = 2;
inline bool GameEvent_PlacementSucceeded::has_time_taken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_PlacementSucceeded::clear_time_taken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_taken_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float GameEvent_PlacementSucceeded::time_taken() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.time_taken)
  return _internal_time_taken();
}
inline void GameEvent_PlacementSucceeded::set_time_taken(float value) {
  _internal_set_time_taken(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.time_taken)
}
inline float GameEvent_PlacementSucceeded::_internal_time_taken() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_taken_;
}
inline void GameEvent_PlacementSucceeded::_internal_set_time_taken(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_taken_ = value;
}

// optional float precision = 3;
inline bool GameEvent_PlacementSucceeded::has_precision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_PlacementSucceeded::clear_precision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precision_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float GameEvent_PlacementSucceeded::precision() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.precision)
  return _internal_precision();
}
inline void GameEvent_PlacementSucceeded::set_precision(float value) {
  _internal_set_precision(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.precision)
}
inline float GameEvent_PlacementSucceeded::_internal_precision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.precision_;
}
inline void GameEvent_PlacementSucceeded::_internal_set_precision(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.precision_ = value;
}

// optional float distance = 4;
inline bool GameEvent_PlacementSucceeded::has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_PlacementSucceeded::clear_distance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float GameEvent_PlacementSucceeded::distance() const {
  // @@protoc_insertion_point(field_get:GameEvent.PlacementSucceeded.distance)
  return _internal_distance();
}
inline void GameEvent_PlacementSucceeded::set_distance(float value) {
  _internal_set_distance(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.PlacementSucceeded.distance)
}
inline float GameEvent_PlacementSucceeded::_internal_distance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.distance_;
}
inline void GameEvent_PlacementSucceeded::_internal_set_distance(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.distance_ = value;
}

// -------------------------------------------------------------------

// GameEvent_Prepared

// optional float time_taken = 1;
inline bool GameEvent_Prepared::has_time_taken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_Prepared::clear_time_taken() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_taken_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float GameEvent_Prepared::time_taken() const {
  // @@protoc_insertion_point(field_get:GameEvent.Prepared.time_taken)
  return _internal_time_taken();
}
inline void GameEvent_Prepared::set_time_taken(float value) {
  _internal_set_time_taken(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.Prepared.time_taken)
}
inline float GameEvent_Prepared::_internal_time_taken() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_taken_;
}
inline void GameEvent_Prepared::_internal_set_time_taken(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_taken_ = value;
}

// -------------------------------------------------------------------

// GameEvent_BotSubstitution

// required .Team by_team = 1;
inline bool GameEvent_BotSubstitution::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_BotSubstitution::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_BotSubstitution::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BotSubstitution.by_team)
  return _internal_by_team();
}
inline void GameEvent_BotSubstitution::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.BotSubstitution.by_team)
}
inline ::Team GameEvent_BotSubstitution::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BotSubstitution::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_ExcessiveBotSubstitution

// required .Team by_team = 1;
inline bool GameEvent_ExcessiveBotSubstitution::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_ExcessiveBotSubstitution::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_ExcessiveBotSubstitution::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.ExcessiveBotSubstitution.by_team)
  return _internal_by_team();
}
inline void GameEvent_ExcessiveBotSubstitution::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.ExcessiveBotSubstitution.by_team)
}
inline ::Team GameEvent_ExcessiveBotSubstitution::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_ExcessiveBotSubstitution::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_ChallengeFlag

// required .Team by_team = 1;
inline bool GameEvent_ChallengeFlag::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_ChallengeFlag::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_ChallengeFlag::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChallengeFlag.by_team)
  return _internal_by_team();
}
inline void GameEvent_ChallengeFlag::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.ChallengeFlag.by_team)
}
inline ::Team GameEvent_ChallengeFlag::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_ChallengeFlag::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_ChallengeFlagHandled

// required .Team by_team = 1;
inline bool GameEvent_ChallengeFlagHandled::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_ChallengeFlagHandled::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_ChallengeFlagHandled::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChallengeFlagHandled.by_team)
  return _internal_by_team();
}
inline void GameEvent_ChallengeFlagHandled::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.ChallengeFlagHandled.by_team)
}
inline ::Team GameEvent_ChallengeFlagHandled::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_ChallengeFlagHandled::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// required bool accepted = 2;
inline bool GameEvent_ChallengeFlagHandled::has_accepted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_ChallengeFlagHandled::clear_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool GameEvent_ChallengeFlagHandled::accepted() const {
  // @@protoc_insertion_point(field_get:GameEvent.ChallengeFlagHandled.accepted)
  return _internal_accepted();
}
inline void GameEvent_ChallengeFlagHandled::set_accepted(bool value) {
  _internal_set_accepted(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.ChallengeFlagHandled.accepted)
}
inline bool GameEvent_ChallengeFlagHandled::_internal_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.accepted_;
}
inline void GameEvent_ChallengeFlagHandled::_internal_set_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.accepted_ = value;
}

// -------------------------------------------------------------------

// GameEvent_EmergencyStop

// required .Team by_team = 1;
inline bool GameEvent_EmergencyStop::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_EmergencyStop::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Team GameEvent_EmergencyStop::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.EmergencyStop.by_team)
  return _internal_by_team();
}
inline void GameEvent_EmergencyStop::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:GameEvent.EmergencyStop.by_team)
}
inline ::Team GameEvent_EmergencyStop::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_EmergencyStop::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// -------------------------------------------------------------------

// GameEvent_TooManyRobots

// required .Team by_team = 1;
inline bool GameEvent_TooManyRobots::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_TooManyRobots::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_TooManyRobots::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.TooManyRobots.by_team)
  return _internal_by_team();
}
inline void GameEvent_TooManyRobots::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.TooManyRobots.by_team)
}
inline ::Team GameEvent_TooManyRobots::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_TooManyRobots::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional int32 num_robots_allowed = 2;
inline bool GameEvent_TooManyRobots::has_num_robots_allowed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_TooManyRobots::clear_num_robots_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_allowed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t GameEvent_TooManyRobots::num_robots_allowed() const {
  // @@protoc_insertion_point(field_get:GameEvent.TooManyRobots.num_robots_allowed)
  return _internal_num_robots_allowed();
}
inline void GameEvent_TooManyRobots::set_num_robots_allowed(::int32_t value) {
  _internal_set_num_robots_allowed(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.TooManyRobots.num_robots_allowed)
}
inline ::int32_t GameEvent_TooManyRobots::_internal_num_robots_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_robots_allowed_;
}
inline void GameEvent_TooManyRobots::_internal_set_num_robots_allowed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_allowed_ = value;
}

// optional int32 num_robots_on_field = 3;
inline bool GameEvent_TooManyRobots::has_num_robots_on_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameEvent_TooManyRobots::clear_num_robots_on_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_on_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t GameEvent_TooManyRobots::num_robots_on_field() const {
  // @@protoc_insertion_point(field_get:GameEvent.TooManyRobots.num_robots_on_field)
  return _internal_num_robots_on_field();
}
inline void GameEvent_TooManyRobots::set_num_robots_on_field(::int32_t value) {
  _internal_set_num_robots_on_field(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameEvent.TooManyRobots.num_robots_on_field)
}
inline ::int32_t GameEvent_TooManyRobots::_internal_num_robots_on_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_robots_on_field_;
}
inline void GameEvent_TooManyRobots::_internal_set_num_robots_on_field(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_robots_on_field_ = value;
}

// optional .Vector2 ball_location = 4;
inline bool GameEvent_TooManyRobots::has_ball_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ball_location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_TooManyRobots::_internal_ball_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.ball_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_TooManyRobots::ball_location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.TooManyRobots.ball_location)
  return _internal_ball_location();
}
inline void GameEvent_TooManyRobots::unsafe_arena_set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }
  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.TooManyRobots.ball_location)
}
inline ::Vector2* GameEvent_TooManyRobots::release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_TooManyRobots::unsafe_arena_release_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.TooManyRobots.ball_location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.ball_location_;
  _impl_.ball_location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_TooManyRobots::_internal_mutable_ball_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ball_location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.ball_location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.ball_location_;
}
inline ::Vector2* GameEvent_TooManyRobots::mutable_ball_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_ball_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.TooManyRobots.ball_location)
  return _msg;
}
inline void GameEvent_TooManyRobots::set_allocated_ball_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ball_location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ball_location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.TooManyRobots.ball_location)
}

// -------------------------------------------------------------------

// GameEvent_BoundaryCrossing

// required .Team by_team = 1;
inline bool GameEvent_BoundaryCrossing::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent_BoundaryCrossing::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameEvent_BoundaryCrossing::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.BoundaryCrossing.by_team)
  return _internal_by_team();
}
inline void GameEvent_BoundaryCrossing::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.BoundaryCrossing.by_team)
}
inline ::Team GameEvent_BoundaryCrossing::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_BoundaryCrossing::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional .Vector2 location = 2;
inline bool GameEvent_BoundaryCrossing::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_BoundaryCrossing::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_BoundaryCrossing::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.BoundaryCrossing.location)
  return _internal_location();
}
inline void GameEvent_BoundaryCrossing::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.BoundaryCrossing.location)
}
inline ::Vector2* GameEvent_BoundaryCrossing::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_BoundaryCrossing::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.BoundaryCrossing.location)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_BoundaryCrossing::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_BoundaryCrossing::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.BoundaryCrossing.location)
  return _msg;
}
inline void GameEvent_BoundaryCrossing::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.BoundaryCrossing.location)
}

// -------------------------------------------------------------------

// GameEvent_PenaltyKickFailed

// required .Team by_team = 1;
inline bool GameEvent_PenaltyKickFailed::has_by_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent_PenaltyKickFailed::clear_by_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.by_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Team GameEvent_PenaltyKickFailed::by_team() const {
  // @@protoc_insertion_point(field_get:GameEvent.PenaltyKickFailed.by_team)
  return _internal_by_team();
}
inline void GameEvent_PenaltyKickFailed::set_by_team(::Team value) {
  _internal_set_by_team(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.PenaltyKickFailed.by_team)
}
inline ::Team GameEvent_PenaltyKickFailed::_internal_by_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.by_team_);
}
inline void GameEvent_PenaltyKickFailed::_internal_set_by_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.by_team_ = value;
}

// optional .Vector2 location = 2;
inline bool GameEvent_PenaltyKickFailed::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::Vector2& GameEvent_PenaltyKickFailed::_internal_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Vector2* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(::_Vector2_default_instance_);
}
inline const ::Vector2& GameEvent_PenaltyKickFailed::location() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.PenaltyKickFailed.location)
  return _internal_location();
}
inline void GameEvent_PenaltyKickFailed::unsafe_arena_set_allocated_location(::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.PenaltyKickFailed.location)
}
inline ::Vector2* GameEvent_PenaltyKickFailed::release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* released = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Vector2* GameEvent_PenaltyKickFailed::unsafe_arena_release_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.PenaltyKickFailed.location)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Vector2* GameEvent_PenaltyKickFailed::_internal_mutable_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.location_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Vector2>(GetArena());
    _impl_.location_ = reinterpret_cast<::Vector2*>(p);
  }
  return _impl_.location_;
}
inline ::Vector2* GameEvent_PenaltyKickFailed::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::Vector2* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:GameEvent.PenaltyKickFailed.location)
  return _msg;
}
inline void GameEvent_PenaltyKickFailed::set_allocated_location(::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.location_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.location_ = reinterpret_cast<::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:GameEvent.PenaltyKickFailed.location)
}

// optional string reason = 3;
inline bool GameEvent_PenaltyKickFailed::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent_PenaltyKickFailed::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent_PenaltyKickFailed::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.PenaltyKickFailed.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEvent_PenaltyKickFailed::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEvent.PenaltyKickFailed.reason)
}
inline std::string* GameEvent_PenaltyKickFailed::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:GameEvent.PenaltyKickFailed.reason)
  return _s;
}
inline const std::string& GameEvent_PenaltyKickFailed::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void GameEvent_PenaltyKickFailed::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* GameEvent_PenaltyKickFailed::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* GameEvent_PenaltyKickFailed::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.PenaltyKickFailed.reason)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reason_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEvent_PenaltyKickFailed::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEvent.PenaltyKickFailed.reason)
}

// -------------------------------------------------------------------

// GameEvent

// optional string id = 50;
inline bool GameEvent::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GameEvent::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEvent::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEvent::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameEvent.id)
}
inline std::string* GameEvent::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:GameEvent.id)
  return _s;
}
inline const std::string& GameEvent::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void GameEvent::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GameEvent::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GameEvent::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameEvent.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GameEvent::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameEvent.id)
}

// optional .GameEvent.Type type = 40;
inline bool GameEvent::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameEvent::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::GameEvent_Type GameEvent::type() const {
  // @@protoc_insertion_point(field_get:GameEvent.type)
  return _internal_type();
}
inline void GameEvent::set_type(::GameEvent_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:GameEvent.type)
}
inline ::GameEvent_Type GameEvent::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::GameEvent_Type>(_impl_.type_);
}
inline void GameEvent::_internal_set_type(::GameEvent_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::GameEvent_Type_IsValid(value));
  _impl_.type_ = value;
}

// repeated string origin = 41;
inline int GameEvent::_internal_origin_size() const {
  return _internal_origin().size();
}
inline int GameEvent::origin_size() const {
  return _internal_origin_size();
}
inline void GameEvent::clear_origin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_.Clear();
}
inline std::string* GameEvent::add_origin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_origin()->Add();
  // @@protoc_insertion_point(field_add_mutable:GameEvent.origin)
  return _s;
}
inline const std::string& GameEvent::origin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.origin)
  return _internal_origin().Get(index);
}
inline std::string* GameEvent::mutable_origin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:GameEvent.origin)
  return _internal_mutable_origin()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GameEvent::set_origin(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_origin()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:GameEvent.origin)
}
template <typename Arg_, typename... Args_>
inline void GameEvent::add_origin(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_origin(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:GameEvent.origin)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GameEvent::origin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GameEvent.origin)
  return _internal_origin();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GameEvent::mutable_origin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GameEvent.origin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_origin();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GameEvent::_internal_origin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GameEvent::_internal_mutable_origin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.origin_;
}

// optional uint64 created_timestamp = 49;
inline bool GameEvent::has_created_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GameEvent::clear_created_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t GameEvent::created_timestamp() const {
  // @@protoc_insertion_point(field_get:GameEvent.created_timestamp)
  return _internal_created_timestamp();
}
inline void GameEvent::set_created_timestamp(::uint64_t value) {
  _internal_set_created_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:GameEvent.created_timestamp)
}
inline ::uint64_t GameEvent::_internal_created_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_timestamp_;
}
inline void GameEvent::_internal_set_created_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_timestamp_ = value;
}

// .GameEvent.BallLeftField ball_left_field_touch_line = 6;
inline bool GameEvent::has_ball_left_field_touch_line() const {
  return event_case() == kBallLeftFieldTouchLine;
}
inline bool GameEvent::_internal_has_ball_left_field_touch_line() const {
  return event_case() == kBallLeftFieldTouchLine;
}
inline void GameEvent::set_has_ball_left_field_touch_line() {
  _impl_._oneof_case_[0] = kBallLeftFieldTouchLine;
}
inline void GameEvent::clear_ball_left_field_touch_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBallLeftFieldTouchLine) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.ball_left_field_touch_line_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.ball_left_field_touch_line_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BallLeftField* GameEvent::release_ball_left_field_touch_line() {
  // @@protoc_insertion_point(field_release:GameEvent.ball_left_field_touch_line)
  if (event_case() == kBallLeftFieldTouchLine) {
    clear_has_event();
    auto* temp = _impl_.event_.ball_left_field_touch_line_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ball_left_field_touch_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BallLeftField& GameEvent::_internal_ball_left_field_touch_line() const {
  return event_case() == kBallLeftFieldTouchLine ? *_impl_.event_.ball_left_field_touch_line_ : reinterpret_cast<::GameEvent_BallLeftField&>(::_GameEvent_BallLeftField_default_instance_);
}
inline const ::GameEvent_BallLeftField& GameEvent::ball_left_field_touch_line() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.ball_left_field_touch_line)
  return _internal_ball_left_field_touch_line();
}
inline ::GameEvent_BallLeftField* GameEvent::unsafe_arena_release_ball_left_field_touch_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.ball_left_field_touch_line)
  if (event_case() == kBallLeftFieldTouchLine) {
    clear_has_event();
    auto* temp = _impl_.event_.ball_left_field_touch_line_;
    _impl_.event_.ball_left_field_touch_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_ball_left_field_touch_line();
    _impl_.event_.ball_left_field_touch_line_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.ball_left_field_touch_line)
}
inline ::GameEvent_BallLeftField* GameEvent::_internal_mutable_ball_left_field_touch_line() {
  if (event_case() != kBallLeftFieldTouchLine) {
    clear_event();
    set_has_ball_left_field_touch_line();
    _impl_.event_.ball_left_field_touch_line_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BallLeftField>(GetArena());
  }
  return _impl_.event_.ball_left_field_touch_line_;
}
inline ::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_touch_line() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BallLeftField* _msg = _internal_mutable_ball_left_field_touch_line();
  // @@protoc_insertion_point(field_mutable:GameEvent.ball_left_field_touch_line)
  return _msg;
}

// .GameEvent.BallLeftField ball_left_field_goal_line = 7;
inline bool GameEvent::has_ball_left_field_goal_line() const {
  return event_case() == kBallLeftFieldGoalLine;
}
inline bool GameEvent::_internal_has_ball_left_field_goal_line() const {
  return event_case() == kBallLeftFieldGoalLine;
}
inline void GameEvent::set_has_ball_left_field_goal_line() {
  _impl_._oneof_case_[0] = kBallLeftFieldGoalLine;
}
inline void GameEvent::clear_ball_left_field_goal_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBallLeftFieldGoalLine) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.ball_left_field_goal_line_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.ball_left_field_goal_line_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BallLeftField* GameEvent::release_ball_left_field_goal_line() {
  // @@protoc_insertion_point(field_release:GameEvent.ball_left_field_goal_line)
  if (event_case() == kBallLeftFieldGoalLine) {
    clear_has_event();
    auto* temp = _impl_.event_.ball_left_field_goal_line_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.ball_left_field_goal_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BallLeftField& GameEvent::_internal_ball_left_field_goal_line() const {
  return event_case() == kBallLeftFieldGoalLine ? *_impl_.event_.ball_left_field_goal_line_ : reinterpret_cast<::GameEvent_BallLeftField&>(::_GameEvent_BallLeftField_default_instance_);
}
inline const ::GameEvent_BallLeftField& GameEvent::ball_left_field_goal_line() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.ball_left_field_goal_line)
  return _internal_ball_left_field_goal_line();
}
inline ::GameEvent_BallLeftField* GameEvent::unsafe_arena_release_ball_left_field_goal_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.ball_left_field_goal_line)
  if (event_case() == kBallLeftFieldGoalLine) {
    clear_has_event();
    auto* temp = _impl_.event_.ball_left_field_goal_line_;
    _impl_.event_.ball_left_field_goal_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_ball_left_field_goal_line();
    _impl_.event_.ball_left_field_goal_line_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.ball_left_field_goal_line)
}
inline ::GameEvent_BallLeftField* GameEvent::_internal_mutable_ball_left_field_goal_line() {
  if (event_case() != kBallLeftFieldGoalLine) {
    clear_event();
    set_has_ball_left_field_goal_line();
    _impl_.event_.ball_left_field_goal_line_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BallLeftField>(GetArena());
  }
  return _impl_.event_.ball_left_field_goal_line_;
}
inline ::GameEvent_BallLeftField* GameEvent::mutable_ball_left_field_goal_line() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BallLeftField* _msg = _internal_mutable_ball_left_field_goal_line();
  // @@protoc_insertion_point(field_mutable:GameEvent.ball_left_field_goal_line)
  return _msg;
}

// .GameEvent.AimlessKick aimless_kick = 11;
inline bool GameEvent::has_aimless_kick() const {
  return event_case() == kAimlessKick;
}
inline bool GameEvent::_internal_has_aimless_kick() const {
  return event_case() == kAimlessKick;
}
inline void GameEvent::set_has_aimless_kick() {
  _impl_._oneof_case_[0] = kAimlessKick;
}
inline void GameEvent::clear_aimless_kick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAimlessKick) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.aimless_kick_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.aimless_kick_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AimlessKick* GameEvent::release_aimless_kick() {
  // @@protoc_insertion_point(field_release:GameEvent.aimless_kick)
  if (event_case() == kAimlessKick) {
    clear_has_event();
    auto* temp = _impl_.event_.aimless_kick_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.aimless_kick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AimlessKick& GameEvent::_internal_aimless_kick() const {
  return event_case() == kAimlessKick ? *_impl_.event_.aimless_kick_ : reinterpret_cast<::GameEvent_AimlessKick&>(::_GameEvent_AimlessKick_default_instance_);
}
inline const ::GameEvent_AimlessKick& GameEvent::aimless_kick() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.aimless_kick)
  return _internal_aimless_kick();
}
inline ::GameEvent_AimlessKick* GameEvent::unsafe_arena_release_aimless_kick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.aimless_kick)
  if (event_case() == kAimlessKick) {
    clear_has_event();
    auto* temp = _impl_.event_.aimless_kick_;
    _impl_.event_.aimless_kick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_aimless_kick(::GameEvent_AimlessKick* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_aimless_kick();
    _impl_.event_.aimless_kick_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.aimless_kick)
}
inline ::GameEvent_AimlessKick* GameEvent::_internal_mutable_aimless_kick() {
  if (event_case() != kAimlessKick) {
    clear_event();
    set_has_aimless_kick();
    _impl_.event_.aimless_kick_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AimlessKick>(GetArena());
  }
  return _impl_.event_.aimless_kick_;
}
inline ::GameEvent_AimlessKick* GameEvent::mutable_aimless_kick() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AimlessKick* _msg = _internal_mutable_aimless_kick();
  // @@protoc_insertion_point(field_mutable:GameEvent.aimless_kick)
  return _msg;
}

// .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
inline bool GameEvent::has_attacker_too_close_to_defense_area() const {
  return event_case() == kAttackerTooCloseToDefenseArea;
}
inline bool GameEvent::_internal_has_attacker_too_close_to_defense_area() const {
  return event_case() == kAttackerTooCloseToDefenseArea;
}
inline void GameEvent::set_has_attacker_too_close_to_defense_area() {
  _impl_._oneof_case_[0] = kAttackerTooCloseToDefenseArea;
}
inline void GameEvent::clear_attacker_too_close_to_defense_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAttackerTooCloseToDefenseArea) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.attacker_too_close_to_defense_area_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_too_close_to_defense_area_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::release_attacker_too_close_to_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_too_close_to_defense_area)
  if (event_case() == kAttackerTooCloseToDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_too_close_to_defense_area_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.attacker_too_close_to_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AttackerTooCloseToDefenseArea& GameEvent::_internal_attacker_too_close_to_defense_area() const {
  return event_case() == kAttackerTooCloseToDefenseArea ? *_impl_.event_.attacker_too_close_to_defense_area_ : reinterpret_cast<::GameEvent_AttackerTooCloseToDefenseArea&>(::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_);
}
inline const ::GameEvent_AttackerTooCloseToDefenseArea& GameEvent::attacker_too_close_to_defense_area() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_too_close_to_defense_area)
  return _internal_attacker_too_close_to_defense_area();
}
inline ::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::unsafe_arena_release_attacker_too_close_to_defense_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.attacker_too_close_to_defense_area)
  if (event_case() == kAttackerTooCloseToDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_too_close_to_defense_area_;
    _impl_.event_.attacker_too_close_to_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_attacker_too_close_to_defense_area();
    _impl_.event_.attacker_too_close_to_defense_area_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}
inline ::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::_internal_mutable_attacker_too_close_to_defense_area() {
  if (event_case() != kAttackerTooCloseToDefenseArea) {
    clear_event();
    set_has_attacker_too_close_to_defense_area();
    _impl_.event_.attacker_too_close_to_defense_area_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AttackerTooCloseToDefenseArea>(GetArena());
  }
  return _impl_.event_.attacker_too_close_to_defense_area_;
}
inline ::GameEvent_AttackerTooCloseToDefenseArea* GameEvent::mutable_attacker_too_close_to_defense_area() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AttackerTooCloseToDefenseArea* _msg = _internal_mutable_attacker_too_close_to_defense_area();
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_too_close_to_defense_area)
  return _msg;
}

// .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
inline bool GameEvent::has_defender_in_defense_area() const {
  return event_case() == kDefenderInDefenseArea;
}
inline bool GameEvent::_internal_has_defender_in_defense_area() const {
  return event_case() == kDefenderInDefenseArea;
}
inline void GameEvent::set_has_defender_in_defense_area() {
  _impl_._oneof_case_[0] = kDefenderInDefenseArea;
}
inline void GameEvent::clear_defender_in_defense_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDefenderInDefenseArea) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.defender_in_defense_area_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_in_defense_area_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_DefenderInDefenseArea* GameEvent::release_defender_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_in_defense_area)
  if (event_case() == kDefenderInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_in_defense_area_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.defender_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_DefenderInDefenseArea& GameEvent::_internal_defender_in_defense_area() const {
  return event_case() == kDefenderInDefenseArea ? *_impl_.event_.defender_in_defense_area_ : reinterpret_cast<::GameEvent_DefenderInDefenseArea&>(::_GameEvent_DefenderInDefenseArea_default_instance_);
}
inline const ::GameEvent_DefenderInDefenseArea& GameEvent::defender_in_defense_area() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.defender_in_defense_area)
  return _internal_defender_in_defense_area();
}
inline ::GameEvent_DefenderInDefenseArea* GameEvent::unsafe_arena_release_defender_in_defense_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.defender_in_defense_area)
  if (event_case() == kDefenderInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_in_defense_area_;
    _impl_.event_.defender_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_defender_in_defense_area();
    _impl_.event_.defender_in_defense_area_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.defender_in_defense_area)
}
inline ::GameEvent_DefenderInDefenseArea* GameEvent::_internal_mutable_defender_in_defense_area() {
  if (event_case() != kDefenderInDefenseArea) {
    clear_event();
    set_has_defender_in_defense_area();
    _impl_.event_.defender_in_defense_area_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_DefenderInDefenseArea>(GetArena());
  }
  return _impl_.event_.defender_in_defense_area_;
}
inline ::GameEvent_DefenderInDefenseArea* GameEvent::mutable_defender_in_defense_area() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_DefenderInDefenseArea* _msg = _internal_mutable_defender_in_defense_area();
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_in_defense_area)
  return _msg;
}

// .GameEvent.BoundaryCrossing boundary_crossing = 43;
inline bool GameEvent::has_boundary_crossing() const {
  return event_case() == kBoundaryCrossing;
}
inline bool GameEvent::_internal_has_boundary_crossing() const {
  return event_case() == kBoundaryCrossing;
}
inline void GameEvent::set_has_boundary_crossing() {
  _impl_._oneof_case_[0] = kBoundaryCrossing;
}
inline void GameEvent::clear_boundary_crossing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBoundaryCrossing) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.boundary_crossing_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.boundary_crossing_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BoundaryCrossing* GameEvent::release_boundary_crossing() {
  // @@protoc_insertion_point(field_release:GameEvent.boundary_crossing)
  if (event_case() == kBoundaryCrossing) {
    clear_has_event();
    auto* temp = _impl_.event_.boundary_crossing_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.boundary_crossing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BoundaryCrossing& GameEvent::_internal_boundary_crossing() const {
  return event_case() == kBoundaryCrossing ? *_impl_.event_.boundary_crossing_ : reinterpret_cast<::GameEvent_BoundaryCrossing&>(::_GameEvent_BoundaryCrossing_default_instance_);
}
inline const ::GameEvent_BoundaryCrossing& GameEvent::boundary_crossing() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.boundary_crossing)
  return _internal_boundary_crossing();
}
inline ::GameEvent_BoundaryCrossing* GameEvent::unsafe_arena_release_boundary_crossing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.boundary_crossing)
  if (event_case() == kBoundaryCrossing) {
    clear_has_event();
    auto* temp = _impl_.event_.boundary_crossing_;
    _impl_.event_.boundary_crossing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_boundary_crossing();
    _impl_.event_.boundary_crossing_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.boundary_crossing)
}
inline ::GameEvent_BoundaryCrossing* GameEvent::_internal_mutable_boundary_crossing() {
  if (event_case() != kBoundaryCrossing) {
    clear_event();
    set_has_boundary_crossing();
    _impl_.event_.boundary_crossing_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BoundaryCrossing>(GetArena());
  }
  return _impl_.event_.boundary_crossing_;
}
inline ::GameEvent_BoundaryCrossing* GameEvent::mutable_boundary_crossing() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BoundaryCrossing* _msg = _internal_mutable_boundary_crossing();
  // @@protoc_insertion_point(field_mutable:GameEvent.boundary_crossing)
  return _msg;
}

// .GameEvent.KeeperHeldBall keeper_held_ball = 13;
inline bool GameEvent::has_keeper_held_ball() const {
  return event_case() == kKeeperHeldBall;
}
inline bool GameEvent::_internal_has_keeper_held_ball() const {
  return event_case() == kKeeperHeldBall;
}
inline void GameEvent::set_has_keeper_held_ball() {
  _impl_._oneof_case_[0] = kKeeperHeldBall;
}
inline void GameEvent::clear_keeper_held_ball() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kKeeperHeldBall) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.keeper_held_ball_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.keeper_held_ball_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_KeeperHeldBall* GameEvent::release_keeper_held_ball() {
  // @@protoc_insertion_point(field_release:GameEvent.keeper_held_ball)
  if (event_case() == kKeeperHeldBall) {
    clear_has_event();
    auto* temp = _impl_.event_.keeper_held_ball_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.keeper_held_ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_KeeperHeldBall& GameEvent::_internal_keeper_held_ball() const {
  return event_case() == kKeeperHeldBall ? *_impl_.event_.keeper_held_ball_ : reinterpret_cast<::GameEvent_KeeperHeldBall&>(::_GameEvent_KeeperHeldBall_default_instance_);
}
inline const ::GameEvent_KeeperHeldBall& GameEvent::keeper_held_ball() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.keeper_held_ball)
  return _internal_keeper_held_ball();
}
inline ::GameEvent_KeeperHeldBall* GameEvent::unsafe_arena_release_keeper_held_ball() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.keeper_held_ball)
  if (event_case() == kKeeperHeldBall) {
    clear_has_event();
    auto* temp = _impl_.event_.keeper_held_ball_;
    _impl_.event_.keeper_held_ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_keeper_held_ball();
    _impl_.event_.keeper_held_ball_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.keeper_held_ball)
}
inline ::GameEvent_KeeperHeldBall* GameEvent::_internal_mutable_keeper_held_ball() {
  if (event_case() != kKeeperHeldBall) {
    clear_event();
    set_has_keeper_held_ball();
    _impl_.event_.keeper_held_ball_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_KeeperHeldBall>(GetArena());
  }
  return _impl_.event_.keeper_held_ball_;
}
inline ::GameEvent_KeeperHeldBall* GameEvent::mutable_keeper_held_ball() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_KeeperHeldBall* _msg = _internal_mutable_keeper_held_ball();
  // @@protoc_insertion_point(field_mutable:GameEvent.keeper_held_ball)
  return _msg;
}

// .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
inline bool GameEvent::has_bot_dribbled_ball_too_far() const {
  return event_case() == kBotDribbledBallTooFar;
}
inline bool GameEvent::_internal_has_bot_dribbled_ball_too_far() const {
  return event_case() == kBotDribbledBallTooFar;
}
inline void GameEvent::set_has_bot_dribbled_ball_too_far() {
  _impl_._oneof_case_[0] = kBotDribbledBallTooFar;
}
inline void GameEvent::clear_bot_dribbled_ball_too_far() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotDribbledBallTooFar) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_dribbled_ball_too_far_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_dribbled_ball_too_far_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotDribbledBallTooFar* GameEvent::release_bot_dribbled_ball_too_far() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_dribbled_ball_too_far)
  if (event_case() == kBotDribbledBallTooFar) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_dribbled_ball_too_far_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_dribbled_ball_too_far_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotDribbledBallTooFar& GameEvent::_internal_bot_dribbled_ball_too_far() const {
  return event_case() == kBotDribbledBallTooFar ? *_impl_.event_.bot_dribbled_ball_too_far_ : reinterpret_cast<::GameEvent_BotDribbledBallTooFar&>(::_GameEvent_BotDribbledBallTooFar_default_instance_);
}
inline const ::GameEvent_BotDribbledBallTooFar& GameEvent::bot_dribbled_ball_too_far() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_dribbled_ball_too_far)
  return _internal_bot_dribbled_ball_too_far();
}
inline ::GameEvent_BotDribbledBallTooFar* GameEvent::unsafe_arena_release_bot_dribbled_ball_too_far() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_dribbled_ball_too_far)
  if (event_case() == kBotDribbledBallTooFar) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_dribbled_ball_too_far_;
    _impl_.event_.bot_dribbled_ball_too_far_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_dribbled_ball_too_far();
    _impl_.event_.bot_dribbled_ball_too_far_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}
inline ::GameEvent_BotDribbledBallTooFar* GameEvent::_internal_mutable_bot_dribbled_ball_too_far() {
  if (event_case() != kBotDribbledBallTooFar) {
    clear_event();
    set_has_bot_dribbled_ball_too_far();
    _impl_.event_.bot_dribbled_ball_too_far_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotDribbledBallTooFar>(GetArena());
  }
  return _impl_.event_.bot_dribbled_ball_too_far_;
}
inline ::GameEvent_BotDribbledBallTooFar* GameEvent::mutable_bot_dribbled_ball_too_far() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotDribbledBallTooFar* _msg = _internal_mutable_bot_dribbled_ball_too_far();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_dribbled_ball_too_far)
  return _msg;
}

// .GameEvent.BotPushedBot bot_pushed_bot = 24;
inline bool GameEvent::has_bot_pushed_bot() const {
  return event_case() == kBotPushedBot;
}
inline bool GameEvent::_internal_has_bot_pushed_bot() const {
  return event_case() == kBotPushedBot;
}
inline void GameEvent::set_has_bot_pushed_bot() {
  _impl_._oneof_case_[0] = kBotPushedBot;
}
inline void GameEvent::clear_bot_pushed_bot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotPushedBot) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_pushed_bot_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_pushed_bot_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_pushed_bot)
  if (event_case() == kBotPushedBot) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_pushed_bot_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_pushed_bot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotPushedBot& GameEvent::_internal_bot_pushed_bot() const {
  return event_case() == kBotPushedBot ? *_impl_.event_.bot_pushed_bot_ : reinterpret_cast<::GameEvent_BotPushedBot&>(::_GameEvent_BotPushedBot_default_instance_);
}
inline const ::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_pushed_bot)
  return _internal_bot_pushed_bot();
}
inline ::GameEvent_BotPushedBot* GameEvent::unsafe_arena_release_bot_pushed_bot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_pushed_bot)
  if (event_case() == kBotPushedBot) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_pushed_bot_;
    _impl_.event_.bot_pushed_bot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_pushed_bot();
    _impl_.event_.bot_pushed_bot_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_pushed_bot)
}
inline ::GameEvent_BotPushedBot* GameEvent::_internal_mutable_bot_pushed_bot() {
  if (event_case() != kBotPushedBot) {
    clear_event();
    set_has_bot_pushed_bot();
    _impl_.event_.bot_pushed_bot_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotPushedBot>(GetArena());
  }
  return _impl_.event_.bot_pushed_bot_;
}
inline ::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotPushedBot* _msg = _internal_mutable_bot_pushed_bot();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_pushed_bot)
  return _msg;
}

// .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
inline bool GameEvent::has_bot_held_ball_deliberately() const {
  return event_case() == kBotHeldBallDeliberately;
}
inline bool GameEvent::_internal_has_bot_held_ball_deliberately() const {
  return event_case() == kBotHeldBallDeliberately;
}
inline void GameEvent::set_has_bot_held_ball_deliberately() {
  _impl_._oneof_case_[0] = kBotHeldBallDeliberately;
}
inline void GameEvent::clear_bot_held_ball_deliberately() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotHeldBallDeliberately) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_held_ball_deliberately_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_held_ball_deliberately_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotHeldBallDeliberately* GameEvent::release_bot_held_ball_deliberately() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_held_ball_deliberately)
  if (event_case() == kBotHeldBallDeliberately) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_held_ball_deliberately_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_held_ball_deliberately_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotHeldBallDeliberately& GameEvent::_internal_bot_held_ball_deliberately() const {
  return event_case() == kBotHeldBallDeliberately ? *_impl_.event_.bot_held_ball_deliberately_ : reinterpret_cast<::GameEvent_BotHeldBallDeliberately&>(::_GameEvent_BotHeldBallDeliberately_default_instance_);
}
inline const ::GameEvent_BotHeldBallDeliberately& GameEvent::bot_held_ball_deliberately() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_held_ball_deliberately)
  return _internal_bot_held_ball_deliberately();
}
inline ::GameEvent_BotHeldBallDeliberately* GameEvent::unsafe_arena_release_bot_held_ball_deliberately() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_held_ball_deliberately)
  if (event_case() == kBotHeldBallDeliberately) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_held_ball_deliberately_;
    _impl_.event_.bot_held_ball_deliberately_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_held_ball_deliberately();
    _impl_.event_.bot_held_ball_deliberately_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_held_ball_deliberately)
}
inline ::GameEvent_BotHeldBallDeliberately* GameEvent::_internal_mutable_bot_held_ball_deliberately() {
  if (event_case() != kBotHeldBallDeliberately) {
    clear_event();
    set_has_bot_held_ball_deliberately();
    _impl_.event_.bot_held_ball_deliberately_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotHeldBallDeliberately>(GetArena());
  }
  return _impl_.event_.bot_held_ball_deliberately_;
}
inline ::GameEvent_BotHeldBallDeliberately* GameEvent::mutable_bot_held_ball_deliberately() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotHeldBallDeliberately* _msg = _internal_mutable_bot_held_ball_deliberately();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_held_ball_deliberately)
  return _msg;
}

// .GameEvent.BotTippedOver bot_tipped_over = 27;
inline bool GameEvent::has_bot_tipped_over() const {
  return event_case() == kBotTippedOver;
}
inline bool GameEvent::_internal_has_bot_tipped_over() const {
  return event_case() == kBotTippedOver;
}
inline void GameEvent::set_has_bot_tipped_over() {
  _impl_._oneof_case_[0] = kBotTippedOver;
}
inline void GameEvent::clear_bot_tipped_over() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotTippedOver) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_tipped_over_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_tipped_over_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotTippedOver* GameEvent::release_bot_tipped_over() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_tipped_over)
  if (event_case() == kBotTippedOver) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_tipped_over_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_tipped_over_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotTippedOver& GameEvent::_internal_bot_tipped_over() const {
  return event_case() == kBotTippedOver ? *_impl_.event_.bot_tipped_over_ : reinterpret_cast<::GameEvent_BotTippedOver&>(::_GameEvent_BotTippedOver_default_instance_);
}
inline const ::GameEvent_BotTippedOver& GameEvent::bot_tipped_over() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_tipped_over)
  return _internal_bot_tipped_over();
}
inline ::GameEvent_BotTippedOver* GameEvent::unsafe_arena_release_bot_tipped_over() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_tipped_over)
  if (event_case() == kBotTippedOver) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_tipped_over_;
    _impl_.event_.bot_tipped_over_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_tipped_over();
    _impl_.event_.bot_tipped_over_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_tipped_over)
}
inline ::GameEvent_BotTippedOver* GameEvent::_internal_mutable_bot_tipped_over() {
  if (event_case() != kBotTippedOver) {
    clear_event();
    set_has_bot_tipped_over();
    _impl_.event_.bot_tipped_over_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotTippedOver>(GetArena());
  }
  return _impl_.event_.bot_tipped_over_;
}
inline ::GameEvent_BotTippedOver* GameEvent::mutable_bot_tipped_over() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotTippedOver* _msg = _internal_mutable_bot_tipped_over();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_tipped_over)
  return _msg;
}

// .GameEvent.BotDroppedParts bot_dropped_parts = 51;
inline bool GameEvent::has_bot_dropped_parts() const {
  return event_case() == kBotDroppedParts;
}
inline bool GameEvent::_internal_has_bot_dropped_parts() const {
  return event_case() == kBotDroppedParts;
}
inline void GameEvent::set_has_bot_dropped_parts() {
  _impl_._oneof_case_[0] = kBotDroppedParts;
}
inline void GameEvent::clear_bot_dropped_parts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotDroppedParts) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_dropped_parts_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_dropped_parts_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotDroppedParts* GameEvent::release_bot_dropped_parts() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_dropped_parts)
  if (event_case() == kBotDroppedParts) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_dropped_parts_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_dropped_parts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotDroppedParts& GameEvent::_internal_bot_dropped_parts() const {
  return event_case() == kBotDroppedParts ? *_impl_.event_.bot_dropped_parts_ : reinterpret_cast<::GameEvent_BotDroppedParts&>(::_GameEvent_BotDroppedParts_default_instance_);
}
inline const ::GameEvent_BotDroppedParts& GameEvent::bot_dropped_parts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_dropped_parts)
  return _internal_bot_dropped_parts();
}
inline ::GameEvent_BotDroppedParts* GameEvent::unsafe_arena_release_bot_dropped_parts() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_dropped_parts)
  if (event_case() == kBotDroppedParts) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_dropped_parts_;
    _impl_.event_.bot_dropped_parts_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_dropped_parts(::GameEvent_BotDroppedParts* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_dropped_parts();
    _impl_.event_.bot_dropped_parts_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_dropped_parts)
}
inline ::GameEvent_BotDroppedParts* GameEvent::_internal_mutable_bot_dropped_parts() {
  if (event_case() != kBotDroppedParts) {
    clear_event();
    set_has_bot_dropped_parts();
    _impl_.event_.bot_dropped_parts_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotDroppedParts>(GetArena());
  }
  return _impl_.event_.bot_dropped_parts_;
}
inline ::GameEvent_BotDroppedParts* GameEvent::mutable_bot_dropped_parts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotDroppedParts* _msg = _internal_mutable_bot_dropped_parts();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_dropped_parts)
  return _msg;
}

// .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
inline bool GameEvent::has_attacker_touched_ball_in_defense_area() const {
  return event_case() == kAttackerTouchedBallInDefenseArea;
}
inline bool GameEvent::_internal_has_attacker_touched_ball_in_defense_area() const {
  return event_case() == kAttackerTouchedBallInDefenseArea;
}
inline void GameEvent::set_has_attacker_touched_ball_in_defense_area() {
  _impl_._oneof_case_[0] = kAttackerTouchedBallInDefenseArea;
}
inline void GameEvent::clear_attacker_touched_ball_in_defense_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAttackerTouchedBallInDefenseArea) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.attacker_touched_ball_in_defense_area_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_ball_in_defense_area_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::release_attacker_touched_ball_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_ball_in_defense_area)
  if (event_case() == kAttackerTouchedBallInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_ball_in_defense_area_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.attacker_touched_ball_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AttackerTouchedBallInDefenseArea& GameEvent::_internal_attacker_touched_ball_in_defense_area() const {
  return event_case() == kAttackerTouchedBallInDefenseArea ? *_impl_.event_.attacker_touched_ball_in_defense_area_ : reinterpret_cast<::GameEvent_AttackerTouchedBallInDefenseArea&>(::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_);
}
inline const ::GameEvent_AttackerTouchedBallInDefenseArea& GameEvent::attacker_touched_ball_in_defense_area() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_ball_in_defense_area)
  return _internal_attacker_touched_ball_in_defense_area();
}
inline ::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::unsafe_arena_release_attacker_touched_ball_in_defense_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.attacker_touched_ball_in_defense_area)
  if (event_case() == kAttackerTouchedBallInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_ball_in_defense_area_;
    _impl_.event_.attacker_touched_ball_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_attacker_touched_ball_in_defense_area();
    _impl_.event_.attacker_touched_ball_in_defense_area_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}
inline ::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::_internal_mutable_attacker_touched_ball_in_defense_area() {
  if (event_case() != kAttackerTouchedBallInDefenseArea) {
    clear_event();
    set_has_attacker_touched_ball_in_defense_area();
    _impl_.event_.attacker_touched_ball_in_defense_area_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AttackerTouchedBallInDefenseArea>(GetArena());
  }
  return _impl_.event_.attacker_touched_ball_in_defense_area_;
}
inline ::GameEvent_AttackerTouchedBallInDefenseArea* GameEvent::mutable_attacker_touched_ball_in_defense_area() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AttackerTouchedBallInDefenseArea* _msg = _internal_mutable_attacker_touched_ball_in_defense_area();
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_ball_in_defense_area)
  return _msg;
}

// .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
inline bool GameEvent::has_bot_kicked_ball_too_fast() const {
  return event_case() == kBotKickedBallTooFast;
}
inline bool GameEvent::_internal_has_bot_kicked_ball_too_fast() const {
  return event_case() == kBotKickedBallTooFast;
}
inline void GameEvent::set_has_bot_kicked_ball_too_fast() {
  _impl_._oneof_case_[0] = kBotKickedBallTooFast;
}
inline void GameEvent::clear_bot_kicked_ball_too_fast() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotKickedBallTooFast) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_kicked_ball_too_fast_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_kicked_ball_too_fast_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotKickedBallTooFast* GameEvent::release_bot_kicked_ball_too_fast() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_kicked_ball_too_fast)
  if (event_case() == kBotKickedBallTooFast) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_kicked_ball_too_fast_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_kicked_ball_too_fast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotKickedBallTooFast& GameEvent::_internal_bot_kicked_ball_too_fast() const {
  return event_case() == kBotKickedBallTooFast ? *_impl_.event_.bot_kicked_ball_too_fast_ : reinterpret_cast<::GameEvent_BotKickedBallTooFast&>(::_GameEvent_BotKickedBallTooFast_default_instance_);
}
inline const ::GameEvent_BotKickedBallTooFast& GameEvent::bot_kicked_ball_too_fast() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_kicked_ball_too_fast)
  return _internal_bot_kicked_ball_too_fast();
}
inline ::GameEvent_BotKickedBallTooFast* GameEvent::unsafe_arena_release_bot_kicked_ball_too_fast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_kicked_ball_too_fast)
  if (event_case() == kBotKickedBallTooFast) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_kicked_ball_too_fast_;
    _impl_.event_.bot_kicked_ball_too_fast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_kicked_ball_too_fast();
    _impl_.event_.bot_kicked_ball_too_fast_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}
inline ::GameEvent_BotKickedBallTooFast* GameEvent::_internal_mutable_bot_kicked_ball_too_fast() {
  if (event_case() != kBotKickedBallTooFast) {
    clear_event();
    set_has_bot_kicked_ball_too_fast();
    _impl_.event_.bot_kicked_ball_too_fast_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotKickedBallTooFast>(GetArena());
  }
  return _impl_.event_.bot_kicked_ball_too_fast_;
}
inline ::GameEvent_BotKickedBallTooFast* GameEvent::mutable_bot_kicked_ball_too_fast() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotKickedBallTooFast* _msg = _internal_mutable_bot_kicked_ball_too_fast();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_kicked_ball_too_fast)
  return _msg;
}

// .GameEvent.BotCrashUnique bot_crash_unique = 22;
inline bool GameEvent::has_bot_crash_unique() const {
  return event_case() == kBotCrashUnique;
}
inline bool GameEvent::_internal_has_bot_crash_unique() const {
  return event_case() == kBotCrashUnique;
}
inline void GameEvent::set_has_bot_crash_unique() {
  _impl_._oneof_case_[0] = kBotCrashUnique;
}
inline void GameEvent::clear_bot_crash_unique() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotCrashUnique) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_crash_unique_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_unique_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_unique)
  if (event_case() == kBotCrashUnique) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_unique_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_crash_unique_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotCrashUnique& GameEvent::_internal_bot_crash_unique() const {
  return event_case() == kBotCrashUnique ? *_impl_.event_.bot_crash_unique_ : reinterpret_cast<::GameEvent_BotCrashUnique&>(::_GameEvent_BotCrashUnique_default_instance_);
}
inline const ::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_unique)
  return _internal_bot_crash_unique();
}
inline ::GameEvent_BotCrashUnique* GameEvent::unsafe_arena_release_bot_crash_unique() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_crash_unique)
  if (event_case() == kBotCrashUnique) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_unique_;
    _impl_.event_.bot_crash_unique_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_crash_unique();
    _impl_.event_.bot_crash_unique_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_crash_unique)
}
inline ::GameEvent_BotCrashUnique* GameEvent::_internal_mutable_bot_crash_unique() {
  if (event_case() != kBotCrashUnique) {
    clear_event();
    set_has_bot_crash_unique();
    _impl_.event_.bot_crash_unique_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotCrashUnique>(GetArena());
  }
  return _impl_.event_.bot_crash_unique_;
}
inline ::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotCrashUnique* _msg = _internal_mutable_bot_crash_unique();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_unique)
  return _msg;
}

// .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
inline bool GameEvent::has_bot_crash_drawn() const {
  return event_case() == kBotCrashDrawn;
}
inline bool GameEvent::_internal_has_bot_crash_drawn() const {
  return event_case() == kBotCrashDrawn;
}
inline void GameEvent::set_has_bot_crash_drawn() {
  _impl_._oneof_case_[0] = kBotCrashDrawn;
}
inline void GameEvent::clear_bot_crash_drawn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotCrashDrawn) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_crash_drawn_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_drawn_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotCrashDrawn* GameEvent::release_bot_crash_drawn() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_drawn)
  if (event_case() == kBotCrashDrawn) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_drawn_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_crash_drawn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotCrashDrawn& GameEvent::_internal_bot_crash_drawn() const {
  return event_case() == kBotCrashDrawn ? *_impl_.event_.bot_crash_drawn_ : reinterpret_cast<::GameEvent_BotCrashDrawn&>(::_GameEvent_BotCrashDrawn_default_instance_);
}
inline const ::GameEvent_BotCrashDrawn& GameEvent::bot_crash_drawn() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_drawn)
  return _internal_bot_crash_drawn();
}
inline ::GameEvent_BotCrashDrawn* GameEvent::unsafe_arena_release_bot_crash_drawn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_crash_drawn)
  if (event_case() == kBotCrashDrawn) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_drawn_;
    _impl_.event_.bot_crash_drawn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_crash_drawn();
    _impl_.event_.bot_crash_drawn_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_crash_drawn)
}
inline ::GameEvent_BotCrashDrawn* GameEvent::_internal_mutable_bot_crash_drawn() {
  if (event_case() != kBotCrashDrawn) {
    clear_event();
    set_has_bot_crash_drawn();
    _impl_.event_.bot_crash_drawn_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotCrashDrawn>(GetArena());
  }
  return _impl_.event_.bot_crash_drawn_;
}
inline ::GameEvent_BotCrashDrawn* GameEvent::mutable_bot_crash_drawn() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotCrashDrawn* _msg = _internal_mutable_bot_crash_drawn();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_drawn)
  return _msg;
}

// .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
inline bool GameEvent::has_defender_too_close_to_kick_point() const {
  return event_case() == kDefenderTooCloseToKickPoint;
}
inline bool GameEvent::_internal_has_defender_too_close_to_kick_point() const {
  return event_case() == kDefenderTooCloseToKickPoint;
}
inline void GameEvent::set_has_defender_too_close_to_kick_point() {
  _impl_._oneof_case_[0] = kDefenderTooCloseToKickPoint;
}
inline void GameEvent::clear_defender_too_close_to_kick_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDefenderTooCloseToKickPoint) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.defender_too_close_to_kick_point_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_too_close_to_kick_point_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_DefenderTooCloseToKickPoint* GameEvent::release_defender_too_close_to_kick_point() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_too_close_to_kick_point)
  if (event_case() == kDefenderTooCloseToKickPoint) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_too_close_to_kick_point_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.defender_too_close_to_kick_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_DefenderTooCloseToKickPoint& GameEvent::_internal_defender_too_close_to_kick_point() const {
  return event_case() == kDefenderTooCloseToKickPoint ? *_impl_.event_.defender_too_close_to_kick_point_ : reinterpret_cast<::GameEvent_DefenderTooCloseToKickPoint&>(::_GameEvent_DefenderTooCloseToKickPoint_default_instance_);
}
inline const ::GameEvent_DefenderTooCloseToKickPoint& GameEvent::defender_too_close_to_kick_point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.defender_too_close_to_kick_point)
  return _internal_defender_too_close_to_kick_point();
}
inline ::GameEvent_DefenderTooCloseToKickPoint* GameEvent::unsafe_arena_release_defender_too_close_to_kick_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.defender_too_close_to_kick_point)
  if (event_case() == kDefenderTooCloseToKickPoint) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_too_close_to_kick_point_;
    _impl_.event_.defender_too_close_to_kick_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_defender_too_close_to_kick_point();
    _impl_.event_.defender_too_close_to_kick_point_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.defender_too_close_to_kick_point)
}
inline ::GameEvent_DefenderTooCloseToKickPoint* GameEvent::_internal_mutable_defender_too_close_to_kick_point() {
  if (event_case() != kDefenderTooCloseToKickPoint) {
    clear_event();
    set_has_defender_too_close_to_kick_point();
    _impl_.event_.defender_too_close_to_kick_point_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_DefenderTooCloseToKickPoint>(GetArena());
  }
  return _impl_.event_.defender_too_close_to_kick_point_;
}
inline ::GameEvent_DefenderTooCloseToKickPoint* GameEvent::mutable_defender_too_close_to_kick_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_DefenderTooCloseToKickPoint* _msg = _internal_mutable_defender_too_close_to_kick_point();
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_too_close_to_kick_point)
  return _msg;
}

// .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
inline bool GameEvent::has_bot_too_fast_in_stop() const {
  return event_case() == kBotTooFastInStop;
}
inline bool GameEvent::_internal_has_bot_too_fast_in_stop() const {
  return event_case() == kBotTooFastInStop;
}
inline void GameEvent::set_has_bot_too_fast_in_stop() {
  _impl_._oneof_case_[0] = kBotTooFastInStop;
}
inline void GameEvent::clear_bot_too_fast_in_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotTooFastInStop) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_too_fast_in_stop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_too_fast_in_stop_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotTooFastInStop* GameEvent::release_bot_too_fast_in_stop() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_too_fast_in_stop)
  if (event_case() == kBotTooFastInStop) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_too_fast_in_stop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_too_fast_in_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotTooFastInStop& GameEvent::_internal_bot_too_fast_in_stop() const {
  return event_case() == kBotTooFastInStop ? *_impl_.event_.bot_too_fast_in_stop_ : reinterpret_cast<::GameEvent_BotTooFastInStop&>(::_GameEvent_BotTooFastInStop_default_instance_);
}
inline const ::GameEvent_BotTooFastInStop& GameEvent::bot_too_fast_in_stop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_too_fast_in_stop)
  return _internal_bot_too_fast_in_stop();
}
inline ::GameEvent_BotTooFastInStop* GameEvent::unsafe_arena_release_bot_too_fast_in_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_too_fast_in_stop)
  if (event_case() == kBotTooFastInStop) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_too_fast_in_stop_;
    _impl_.event_.bot_too_fast_in_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_too_fast_in_stop();
    _impl_.event_.bot_too_fast_in_stop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_too_fast_in_stop)
}
inline ::GameEvent_BotTooFastInStop* GameEvent::_internal_mutable_bot_too_fast_in_stop() {
  if (event_case() != kBotTooFastInStop) {
    clear_event();
    set_has_bot_too_fast_in_stop();
    _impl_.event_.bot_too_fast_in_stop_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotTooFastInStop>(GetArena());
  }
  return _impl_.event_.bot_too_fast_in_stop_;
}
inline ::GameEvent_BotTooFastInStop* GameEvent::mutable_bot_too_fast_in_stop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotTooFastInStop* _msg = _internal_mutable_bot_too_fast_in_stop();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_too_fast_in_stop)
  return _msg;
}

// .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
inline bool GameEvent::has_bot_interfered_placement() const {
  return event_case() == kBotInterferedPlacement;
}
inline bool GameEvent::_internal_has_bot_interfered_placement() const {
  return event_case() == kBotInterferedPlacement;
}
inline void GameEvent::set_has_bot_interfered_placement() {
  _impl_._oneof_case_[0] = kBotInterferedPlacement;
}
inline void GameEvent::clear_bot_interfered_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotInterferedPlacement) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_interfered_placement_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_interfered_placement_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotInterferedPlacement* GameEvent::release_bot_interfered_placement() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_interfered_placement)
  if (event_case() == kBotInterferedPlacement) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_interfered_placement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_interfered_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotInterferedPlacement& GameEvent::_internal_bot_interfered_placement() const {
  return event_case() == kBotInterferedPlacement ? *_impl_.event_.bot_interfered_placement_ : reinterpret_cast<::GameEvent_BotInterferedPlacement&>(::_GameEvent_BotInterferedPlacement_default_instance_);
}
inline const ::GameEvent_BotInterferedPlacement& GameEvent::bot_interfered_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_interfered_placement)
  return _internal_bot_interfered_placement();
}
inline ::GameEvent_BotInterferedPlacement* GameEvent::unsafe_arena_release_bot_interfered_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_interfered_placement)
  if (event_case() == kBotInterferedPlacement) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_interfered_placement_;
    _impl_.event_.bot_interfered_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_interfered_placement();
    _impl_.event_.bot_interfered_placement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_interfered_placement)
}
inline ::GameEvent_BotInterferedPlacement* GameEvent::_internal_mutable_bot_interfered_placement() {
  if (event_case() != kBotInterferedPlacement) {
    clear_event();
    set_has_bot_interfered_placement();
    _impl_.event_.bot_interfered_placement_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotInterferedPlacement>(GetArena());
  }
  return _impl_.event_.bot_interfered_placement_;
}
inline ::GameEvent_BotInterferedPlacement* GameEvent::mutable_bot_interfered_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotInterferedPlacement* _msg = _internal_mutable_bot_interfered_placement();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_interfered_placement)
  return _msg;
}

// .GameEvent.Goal possible_goal = 39;
inline bool GameEvent::has_possible_goal() const {
  return event_case() == kPossibleGoal;
}
inline bool GameEvent::_internal_has_possible_goal() const {
  return event_case() == kPossibleGoal;
}
inline void GameEvent::set_has_possible_goal() {
  _impl_._oneof_case_[0] = kPossibleGoal;
}
inline void GameEvent::clear_possible_goal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPossibleGoal) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.possible_goal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.possible_goal_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_Goal* GameEvent::release_possible_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.possible_goal)
  if (event_case() == kPossibleGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.possible_goal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.possible_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_Goal& GameEvent::_internal_possible_goal() const {
  return event_case() == kPossibleGoal ? *_impl_.event_.possible_goal_ : reinterpret_cast<::GameEvent_Goal&>(::_GameEvent_Goal_default_instance_);
}
inline const ::GameEvent_Goal& GameEvent::possible_goal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.possible_goal)
  return _internal_possible_goal();
}
inline ::GameEvent_Goal* GameEvent::unsafe_arena_release_possible_goal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.possible_goal)
  if (event_case() == kPossibleGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.possible_goal_;
    _impl_.event_.possible_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_possible_goal(::GameEvent_Goal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_possible_goal();
    _impl_.event_.possible_goal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.possible_goal)
}
inline ::GameEvent_Goal* GameEvent::_internal_mutable_possible_goal() {
  if (event_case() != kPossibleGoal) {
    clear_event();
    set_has_possible_goal();
    _impl_.event_.possible_goal_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_Goal>(GetArena());
  }
  return _impl_.event_.possible_goal_;
}
inline ::GameEvent_Goal* GameEvent::mutable_possible_goal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_Goal* _msg = _internal_mutable_possible_goal();
  // @@protoc_insertion_point(field_mutable:GameEvent.possible_goal)
  return _msg;
}

// .GameEvent.Goal goal = 8;
inline bool GameEvent::has_goal() const {
  return event_case() == kGoal;
}
inline bool GameEvent::_internal_has_goal() const {
  return event_case() == kGoal;
}
inline void GameEvent::set_has_goal() {
  _impl_._oneof_case_[0] = kGoal;
}
inline void GameEvent::clear_goal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kGoal) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.goal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.goal_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_Goal* GameEvent::release_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.goal)
  if (event_case() == kGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.goal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_Goal& GameEvent::_internal_goal() const {
  return event_case() == kGoal ? *_impl_.event_.goal_ : reinterpret_cast<::GameEvent_Goal&>(::_GameEvent_Goal_default_instance_);
}
inline const ::GameEvent_Goal& GameEvent::goal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.goal)
  return _internal_goal();
}
inline ::GameEvent_Goal* GameEvent::unsafe_arena_release_goal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.goal)
  if (event_case() == kGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.goal_;
    _impl_.event_.goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_goal(::GameEvent_Goal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_goal();
    _impl_.event_.goal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.goal)
}
inline ::GameEvent_Goal* GameEvent::_internal_mutable_goal() {
  if (event_case() != kGoal) {
    clear_event();
    set_has_goal();
    _impl_.event_.goal_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_Goal>(GetArena());
  }
  return _impl_.event_.goal_;
}
inline ::GameEvent_Goal* GameEvent::mutable_goal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_Goal* _msg = _internal_mutable_goal();
  // @@protoc_insertion_point(field_mutable:GameEvent.goal)
  return _msg;
}

// .GameEvent.Goal invalid_goal = 44;
inline bool GameEvent::has_invalid_goal() const {
  return event_case() == kInvalidGoal;
}
inline bool GameEvent::_internal_has_invalid_goal() const {
  return event_case() == kInvalidGoal;
}
inline void GameEvent::set_has_invalid_goal() {
  _impl_._oneof_case_[0] = kInvalidGoal;
}
inline void GameEvent::clear_invalid_goal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kInvalidGoal) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.invalid_goal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.invalid_goal_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_Goal* GameEvent::release_invalid_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.invalid_goal)
  if (event_case() == kInvalidGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.invalid_goal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.invalid_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_Goal& GameEvent::_internal_invalid_goal() const {
  return event_case() == kInvalidGoal ? *_impl_.event_.invalid_goal_ : reinterpret_cast<::GameEvent_Goal&>(::_GameEvent_Goal_default_instance_);
}
inline const ::GameEvent_Goal& GameEvent::invalid_goal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.invalid_goal)
  return _internal_invalid_goal();
}
inline ::GameEvent_Goal* GameEvent::unsafe_arena_release_invalid_goal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.invalid_goal)
  if (event_case() == kInvalidGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.invalid_goal_;
    _impl_.event_.invalid_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_invalid_goal(::GameEvent_Goal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_invalid_goal();
    _impl_.event_.invalid_goal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.invalid_goal)
}
inline ::GameEvent_Goal* GameEvent::_internal_mutable_invalid_goal() {
  if (event_case() != kInvalidGoal) {
    clear_event();
    set_has_invalid_goal();
    _impl_.event_.invalid_goal_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_Goal>(GetArena());
  }
  return _impl_.event_.invalid_goal_;
}
inline ::GameEvent_Goal* GameEvent::mutable_invalid_goal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_Goal* _msg = _internal_mutable_invalid_goal();
  // @@protoc_insertion_point(field_mutable:GameEvent.invalid_goal)
  return _msg;
}

// .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
inline bool GameEvent::has_attacker_double_touched_ball() const {
  return event_case() == kAttackerDoubleTouchedBall;
}
inline bool GameEvent::_internal_has_attacker_double_touched_ball() const {
  return event_case() == kAttackerDoubleTouchedBall;
}
inline void GameEvent::set_has_attacker_double_touched_ball() {
  _impl_._oneof_case_[0] = kAttackerDoubleTouchedBall;
}
inline void GameEvent::clear_attacker_double_touched_ball() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAttackerDoubleTouchedBall) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.attacker_double_touched_ball_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_double_touched_ball_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AttackerDoubleTouchedBall* GameEvent::release_attacker_double_touched_ball() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_double_touched_ball)
  if (event_case() == kAttackerDoubleTouchedBall) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_double_touched_ball_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.attacker_double_touched_ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AttackerDoubleTouchedBall& GameEvent::_internal_attacker_double_touched_ball() const {
  return event_case() == kAttackerDoubleTouchedBall ? *_impl_.event_.attacker_double_touched_ball_ : reinterpret_cast<::GameEvent_AttackerDoubleTouchedBall&>(::_GameEvent_AttackerDoubleTouchedBall_default_instance_);
}
inline const ::GameEvent_AttackerDoubleTouchedBall& GameEvent::attacker_double_touched_ball() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_double_touched_ball)
  return _internal_attacker_double_touched_ball();
}
inline ::GameEvent_AttackerDoubleTouchedBall* GameEvent::unsafe_arena_release_attacker_double_touched_ball() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.attacker_double_touched_ball)
  if (event_case() == kAttackerDoubleTouchedBall) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_double_touched_ball_;
    _impl_.event_.attacker_double_touched_ball_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_attacker_double_touched_ball();
    _impl_.event_.attacker_double_touched_ball_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.attacker_double_touched_ball)
}
inline ::GameEvent_AttackerDoubleTouchedBall* GameEvent::_internal_mutable_attacker_double_touched_ball() {
  if (event_case() != kAttackerDoubleTouchedBall) {
    clear_event();
    set_has_attacker_double_touched_ball();
    _impl_.event_.attacker_double_touched_ball_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AttackerDoubleTouchedBall>(GetArena());
  }
  return _impl_.event_.attacker_double_touched_ball_;
}
inline ::GameEvent_AttackerDoubleTouchedBall* GameEvent::mutable_attacker_double_touched_ball() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AttackerDoubleTouchedBall* _msg = _internal_mutable_attacker_double_touched_ball();
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_double_touched_ball)
  return _msg;
}

// .GameEvent.PlacementSucceeded placement_succeeded = 5;
inline bool GameEvent::has_placement_succeeded() const {
  return event_case() == kPlacementSucceeded;
}
inline bool GameEvent::_internal_has_placement_succeeded() const {
  return event_case() == kPlacementSucceeded;
}
inline void GameEvent::set_has_placement_succeeded() {
  _impl_._oneof_case_[0] = kPlacementSucceeded;
}
inline void GameEvent::clear_placement_succeeded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPlacementSucceeded) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.placement_succeeded_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.placement_succeeded_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_PlacementSucceeded* GameEvent::release_placement_succeeded() {
  // @@protoc_insertion_point(field_release:GameEvent.placement_succeeded)
  if (event_case() == kPlacementSucceeded) {
    clear_has_event();
    auto* temp = _impl_.event_.placement_succeeded_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.placement_succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_PlacementSucceeded& GameEvent::_internal_placement_succeeded() const {
  return event_case() == kPlacementSucceeded ? *_impl_.event_.placement_succeeded_ : reinterpret_cast<::GameEvent_PlacementSucceeded&>(::_GameEvent_PlacementSucceeded_default_instance_);
}
inline const ::GameEvent_PlacementSucceeded& GameEvent::placement_succeeded() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.placement_succeeded)
  return _internal_placement_succeeded();
}
inline ::GameEvent_PlacementSucceeded* GameEvent::unsafe_arena_release_placement_succeeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.placement_succeeded)
  if (event_case() == kPlacementSucceeded) {
    clear_has_event();
    auto* temp = _impl_.event_.placement_succeeded_;
    _impl_.event_.placement_succeeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_placement_succeeded();
    _impl_.event_.placement_succeeded_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.placement_succeeded)
}
inline ::GameEvent_PlacementSucceeded* GameEvent::_internal_mutable_placement_succeeded() {
  if (event_case() != kPlacementSucceeded) {
    clear_event();
    set_has_placement_succeeded();
    _impl_.event_.placement_succeeded_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_PlacementSucceeded>(GetArena());
  }
  return _impl_.event_.placement_succeeded_;
}
inline ::GameEvent_PlacementSucceeded* GameEvent::mutable_placement_succeeded() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_PlacementSucceeded* _msg = _internal_mutable_placement_succeeded();
  // @@protoc_insertion_point(field_mutable:GameEvent.placement_succeeded)
  return _msg;
}

// .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
inline bool GameEvent::has_penalty_kick_failed() const {
  return event_case() == kPenaltyKickFailed;
}
inline bool GameEvent::_internal_has_penalty_kick_failed() const {
  return event_case() == kPenaltyKickFailed;
}
inline void GameEvent::set_has_penalty_kick_failed() {
  _impl_._oneof_case_[0] = kPenaltyKickFailed;
}
inline void GameEvent::clear_penalty_kick_failed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPenaltyKickFailed) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.penalty_kick_failed_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.penalty_kick_failed_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_PenaltyKickFailed* GameEvent::release_penalty_kick_failed() {
  // @@protoc_insertion_point(field_release:GameEvent.penalty_kick_failed)
  if (event_case() == kPenaltyKickFailed) {
    clear_has_event();
    auto* temp = _impl_.event_.penalty_kick_failed_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.penalty_kick_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_PenaltyKickFailed& GameEvent::_internal_penalty_kick_failed() const {
  return event_case() == kPenaltyKickFailed ? *_impl_.event_.penalty_kick_failed_ : reinterpret_cast<::GameEvent_PenaltyKickFailed&>(::_GameEvent_PenaltyKickFailed_default_instance_);
}
inline const ::GameEvent_PenaltyKickFailed& GameEvent::penalty_kick_failed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.penalty_kick_failed)
  return _internal_penalty_kick_failed();
}
inline ::GameEvent_PenaltyKickFailed* GameEvent::unsafe_arena_release_penalty_kick_failed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.penalty_kick_failed)
  if (event_case() == kPenaltyKickFailed) {
    clear_has_event();
    auto* temp = _impl_.event_.penalty_kick_failed_;
    _impl_.event_.penalty_kick_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_penalty_kick_failed();
    _impl_.event_.penalty_kick_failed_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.penalty_kick_failed)
}
inline ::GameEvent_PenaltyKickFailed* GameEvent::_internal_mutable_penalty_kick_failed() {
  if (event_case() != kPenaltyKickFailed) {
    clear_event();
    set_has_penalty_kick_failed();
    _impl_.event_.penalty_kick_failed_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_PenaltyKickFailed>(GetArena());
  }
  return _impl_.event_.penalty_kick_failed_;
}
inline ::GameEvent_PenaltyKickFailed* GameEvent::mutable_penalty_kick_failed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_PenaltyKickFailed* _msg = _internal_mutable_penalty_kick_failed();
  // @@protoc_insertion_point(field_mutable:GameEvent.penalty_kick_failed)
  return _msg;
}

// .GameEvent.NoProgressInGame no_progress_in_game = 2;
inline bool GameEvent::has_no_progress_in_game() const {
  return event_case() == kNoProgressInGame;
}
inline bool GameEvent::_internal_has_no_progress_in_game() const {
  return event_case() == kNoProgressInGame;
}
inline void GameEvent::set_has_no_progress_in_game() {
  _impl_._oneof_case_[0] = kNoProgressInGame;
}
inline void GameEvent::clear_no_progress_in_game() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kNoProgressInGame) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.no_progress_in_game_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.no_progress_in_game_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_NoProgressInGame* GameEvent::release_no_progress_in_game() {
  // @@protoc_insertion_point(field_release:GameEvent.no_progress_in_game)
  if (event_case() == kNoProgressInGame) {
    clear_has_event();
    auto* temp = _impl_.event_.no_progress_in_game_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.no_progress_in_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_NoProgressInGame& GameEvent::_internal_no_progress_in_game() const {
  return event_case() == kNoProgressInGame ? *_impl_.event_.no_progress_in_game_ : reinterpret_cast<::GameEvent_NoProgressInGame&>(::_GameEvent_NoProgressInGame_default_instance_);
}
inline const ::GameEvent_NoProgressInGame& GameEvent::no_progress_in_game() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.no_progress_in_game)
  return _internal_no_progress_in_game();
}
inline ::GameEvent_NoProgressInGame* GameEvent::unsafe_arena_release_no_progress_in_game() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.no_progress_in_game)
  if (event_case() == kNoProgressInGame) {
    clear_has_event();
    auto* temp = _impl_.event_.no_progress_in_game_;
    _impl_.event_.no_progress_in_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_no_progress_in_game();
    _impl_.event_.no_progress_in_game_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.no_progress_in_game)
}
inline ::GameEvent_NoProgressInGame* GameEvent::_internal_mutable_no_progress_in_game() {
  if (event_case() != kNoProgressInGame) {
    clear_event();
    set_has_no_progress_in_game();
    _impl_.event_.no_progress_in_game_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_NoProgressInGame>(GetArena());
  }
  return _impl_.event_.no_progress_in_game_;
}
inline ::GameEvent_NoProgressInGame* GameEvent::mutable_no_progress_in_game() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_NoProgressInGame* _msg = _internal_mutable_no_progress_in_game();
  // @@protoc_insertion_point(field_mutable:GameEvent.no_progress_in_game)
  return _msg;
}

// .GameEvent.PlacementFailed placement_failed = 3;
inline bool GameEvent::has_placement_failed() const {
  return event_case() == kPlacementFailed;
}
inline bool GameEvent::_internal_has_placement_failed() const {
  return event_case() == kPlacementFailed;
}
inline void GameEvent::set_has_placement_failed() {
  _impl_._oneof_case_[0] = kPlacementFailed;
}
inline void GameEvent::clear_placement_failed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPlacementFailed) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.placement_failed_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.placement_failed_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_PlacementFailed* GameEvent::release_placement_failed() {
  // @@protoc_insertion_point(field_release:GameEvent.placement_failed)
  if (event_case() == kPlacementFailed) {
    clear_has_event();
    auto* temp = _impl_.event_.placement_failed_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.placement_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_PlacementFailed& GameEvent::_internal_placement_failed() const {
  return event_case() == kPlacementFailed ? *_impl_.event_.placement_failed_ : reinterpret_cast<::GameEvent_PlacementFailed&>(::_GameEvent_PlacementFailed_default_instance_);
}
inline const ::GameEvent_PlacementFailed& GameEvent::placement_failed() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.placement_failed)
  return _internal_placement_failed();
}
inline ::GameEvent_PlacementFailed* GameEvent::unsafe_arena_release_placement_failed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.placement_failed)
  if (event_case() == kPlacementFailed) {
    clear_has_event();
    auto* temp = _impl_.event_.placement_failed_;
    _impl_.event_.placement_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_placement_failed(::GameEvent_PlacementFailed* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_placement_failed();
    _impl_.event_.placement_failed_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.placement_failed)
}
inline ::GameEvent_PlacementFailed* GameEvent::_internal_mutable_placement_failed() {
  if (event_case() != kPlacementFailed) {
    clear_event();
    set_has_placement_failed();
    _impl_.event_.placement_failed_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_PlacementFailed>(GetArena());
  }
  return _impl_.event_.placement_failed_;
}
inline ::GameEvent_PlacementFailed* GameEvent::mutable_placement_failed() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_PlacementFailed* _msg = _internal_mutable_placement_failed();
  // @@protoc_insertion_point(field_mutable:GameEvent.placement_failed)
  return _msg;
}

// .GameEvent.MultipleCards multiple_cards = 32;
inline bool GameEvent::has_multiple_cards() const {
  return event_case() == kMultipleCards;
}
inline bool GameEvent::_internal_has_multiple_cards() const {
  return event_case() == kMultipleCards;
}
inline void GameEvent::set_has_multiple_cards() {
  _impl_._oneof_case_[0] = kMultipleCards;
}
inline void GameEvent::clear_multiple_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kMultipleCards) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.multiple_cards_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_cards_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_MultipleCards* GameEvent::release_multiple_cards() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_cards)
  if (event_case() == kMultipleCards) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_cards_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.multiple_cards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_MultipleCards& GameEvent::_internal_multiple_cards() const {
  return event_case() == kMultipleCards ? *_impl_.event_.multiple_cards_ : reinterpret_cast<::GameEvent_MultipleCards&>(::_GameEvent_MultipleCards_default_instance_);
}
inline const ::GameEvent_MultipleCards& GameEvent::multiple_cards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_cards)
  return _internal_multiple_cards();
}
inline ::GameEvent_MultipleCards* GameEvent::unsafe_arena_release_multiple_cards() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.multiple_cards)
  if (event_case() == kMultipleCards) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_cards_;
    _impl_.event_.multiple_cards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_multiple_cards(::GameEvent_MultipleCards* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_multiple_cards();
    _impl_.event_.multiple_cards_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.multiple_cards)
}
inline ::GameEvent_MultipleCards* GameEvent::_internal_mutable_multiple_cards() {
  if (event_case() != kMultipleCards) {
    clear_event();
    set_has_multiple_cards();
    _impl_.event_.multiple_cards_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_MultipleCards>(GetArena());
  }
  return _impl_.event_.multiple_cards_;
}
inline ::GameEvent_MultipleCards* GameEvent::mutable_multiple_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_MultipleCards* _msg = _internal_mutable_multiple_cards();
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_cards)
  return _msg;
}

// .GameEvent.MultipleFouls multiple_fouls = 34;
inline bool GameEvent::has_multiple_fouls() const {
  return event_case() == kMultipleFouls;
}
inline bool GameEvent::_internal_has_multiple_fouls() const {
  return event_case() == kMultipleFouls;
}
inline void GameEvent::set_has_multiple_fouls() {
  _impl_._oneof_case_[0] = kMultipleFouls;
}
inline void GameEvent::clear_multiple_fouls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kMultipleFouls) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.multiple_fouls_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_fouls_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_MultipleFouls* GameEvent::release_multiple_fouls() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_fouls)
  if (event_case() == kMultipleFouls) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_fouls_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.multiple_fouls_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_MultipleFouls& GameEvent::_internal_multiple_fouls() const {
  return event_case() == kMultipleFouls ? *_impl_.event_.multiple_fouls_ : reinterpret_cast<::GameEvent_MultipleFouls&>(::_GameEvent_MultipleFouls_default_instance_);
}
inline const ::GameEvent_MultipleFouls& GameEvent::multiple_fouls() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_fouls)
  return _internal_multiple_fouls();
}
inline ::GameEvent_MultipleFouls* GameEvent::unsafe_arena_release_multiple_fouls() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.multiple_fouls)
  if (event_case() == kMultipleFouls) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_fouls_;
    _impl_.event_.multiple_fouls_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_multiple_fouls(::GameEvent_MultipleFouls* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_multiple_fouls();
    _impl_.event_.multiple_fouls_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.multiple_fouls)
}
inline ::GameEvent_MultipleFouls* GameEvent::_internal_mutable_multiple_fouls() {
  if (event_case() != kMultipleFouls) {
    clear_event();
    set_has_multiple_fouls();
    _impl_.event_.multiple_fouls_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_MultipleFouls>(GetArena());
  }
  return _impl_.event_.multiple_fouls_;
}
inline ::GameEvent_MultipleFouls* GameEvent::mutable_multiple_fouls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_MultipleFouls* _msg = _internal_mutable_multiple_fouls();
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_fouls)
  return _msg;
}

// .GameEvent.BotSubstitution bot_substitution = 37;
inline bool GameEvent::has_bot_substitution() const {
  return event_case() == kBotSubstitution;
}
inline bool GameEvent::_internal_has_bot_substitution() const {
  return event_case() == kBotSubstitution;
}
inline void GameEvent::set_has_bot_substitution() {
  _impl_._oneof_case_[0] = kBotSubstitution;
}
inline void GameEvent::clear_bot_substitution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotSubstitution) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_substitution_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_substitution_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotSubstitution* GameEvent::release_bot_substitution() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_substitution)
  if (event_case() == kBotSubstitution) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_substitution_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_substitution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotSubstitution& GameEvent::_internal_bot_substitution() const {
  return event_case() == kBotSubstitution ? *_impl_.event_.bot_substitution_ : reinterpret_cast<::GameEvent_BotSubstitution&>(::_GameEvent_BotSubstitution_default_instance_);
}
inline const ::GameEvent_BotSubstitution& GameEvent::bot_substitution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_substitution)
  return _internal_bot_substitution();
}
inline ::GameEvent_BotSubstitution* GameEvent::unsafe_arena_release_bot_substitution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_substitution)
  if (event_case() == kBotSubstitution) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_substitution_;
    _impl_.event_.bot_substitution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_substitution(::GameEvent_BotSubstitution* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_substitution();
    _impl_.event_.bot_substitution_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_substitution)
}
inline ::GameEvent_BotSubstitution* GameEvent::_internal_mutable_bot_substitution() {
  if (event_case() != kBotSubstitution) {
    clear_event();
    set_has_bot_substitution();
    _impl_.event_.bot_substitution_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotSubstitution>(GetArena());
  }
  return _impl_.event_.bot_substitution_;
}
inline ::GameEvent_BotSubstitution* GameEvent::mutable_bot_substitution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotSubstitution* _msg = _internal_mutable_bot_substitution();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_substitution)
  return _msg;
}

// .GameEvent.ExcessiveBotSubstitution excessive_bot_substitution = 52;
inline bool GameEvent::has_excessive_bot_substitution() const {
  return event_case() == kExcessiveBotSubstitution;
}
inline bool GameEvent::_internal_has_excessive_bot_substitution() const {
  return event_case() == kExcessiveBotSubstitution;
}
inline void GameEvent::set_has_excessive_bot_substitution() {
  _impl_._oneof_case_[0] = kExcessiveBotSubstitution;
}
inline void GameEvent::clear_excessive_bot_substitution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kExcessiveBotSubstitution) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.excessive_bot_substitution_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.excessive_bot_substitution_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_ExcessiveBotSubstitution* GameEvent::release_excessive_bot_substitution() {
  // @@protoc_insertion_point(field_release:GameEvent.excessive_bot_substitution)
  if (event_case() == kExcessiveBotSubstitution) {
    clear_has_event();
    auto* temp = _impl_.event_.excessive_bot_substitution_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.excessive_bot_substitution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_ExcessiveBotSubstitution& GameEvent::_internal_excessive_bot_substitution() const {
  return event_case() == kExcessiveBotSubstitution ? *_impl_.event_.excessive_bot_substitution_ : reinterpret_cast<::GameEvent_ExcessiveBotSubstitution&>(::_GameEvent_ExcessiveBotSubstitution_default_instance_);
}
inline const ::GameEvent_ExcessiveBotSubstitution& GameEvent::excessive_bot_substitution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.excessive_bot_substitution)
  return _internal_excessive_bot_substitution();
}
inline ::GameEvent_ExcessiveBotSubstitution* GameEvent::unsafe_arena_release_excessive_bot_substitution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.excessive_bot_substitution)
  if (event_case() == kExcessiveBotSubstitution) {
    clear_has_event();
    auto* temp = _impl_.event_.excessive_bot_substitution_;
    _impl_.event_.excessive_bot_substitution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_excessive_bot_substitution(::GameEvent_ExcessiveBotSubstitution* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_excessive_bot_substitution();
    _impl_.event_.excessive_bot_substitution_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.excessive_bot_substitution)
}
inline ::GameEvent_ExcessiveBotSubstitution* GameEvent::_internal_mutable_excessive_bot_substitution() {
  if (event_case() != kExcessiveBotSubstitution) {
    clear_event();
    set_has_excessive_bot_substitution();
    _impl_.event_.excessive_bot_substitution_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_ExcessiveBotSubstitution>(GetArena());
  }
  return _impl_.event_.excessive_bot_substitution_;
}
inline ::GameEvent_ExcessiveBotSubstitution* GameEvent::mutable_excessive_bot_substitution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_ExcessiveBotSubstitution* _msg = _internal_mutable_excessive_bot_substitution();
  // @@protoc_insertion_point(field_mutable:GameEvent.excessive_bot_substitution)
  return _msg;
}

// .GameEvent.TooManyRobots too_many_robots = 38;
inline bool GameEvent::has_too_many_robots() const {
  return event_case() == kTooManyRobots;
}
inline bool GameEvent::_internal_has_too_many_robots() const {
  return event_case() == kTooManyRobots;
}
inline void GameEvent::set_has_too_many_robots() {
  _impl_._oneof_case_[0] = kTooManyRobots;
}
inline void GameEvent::clear_too_many_robots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kTooManyRobots) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.too_many_robots_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.too_many_robots_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_TooManyRobots* GameEvent::release_too_many_robots() {
  // @@protoc_insertion_point(field_release:GameEvent.too_many_robots)
  if (event_case() == kTooManyRobots) {
    clear_has_event();
    auto* temp = _impl_.event_.too_many_robots_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.too_many_robots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_TooManyRobots& GameEvent::_internal_too_many_robots() const {
  return event_case() == kTooManyRobots ? *_impl_.event_.too_many_robots_ : reinterpret_cast<::GameEvent_TooManyRobots&>(::_GameEvent_TooManyRobots_default_instance_);
}
inline const ::GameEvent_TooManyRobots& GameEvent::too_many_robots() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.too_many_robots)
  return _internal_too_many_robots();
}
inline ::GameEvent_TooManyRobots* GameEvent::unsafe_arena_release_too_many_robots() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.too_many_robots)
  if (event_case() == kTooManyRobots) {
    clear_has_event();
    auto* temp = _impl_.event_.too_many_robots_;
    _impl_.event_.too_many_robots_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_too_many_robots(::GameEvent_TooManyRobots* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_too_many_robots();
    _impl_.event_.too_many_robots_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.too_many_robots)
}
inline ::GameEvent_TooManyRobots* GameEvent::_internal_mutable_too_many_robots() {
  if (event_case() != kTooManyRobots) {
    clear_event();
    set_has_too_many_robots();
    _impl_.event_.too_many_robots_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_TooManyRobots>(GetArena());
  }
  return _impl_.event_.too_many_robots_;
}
inline ::GameEvent_TooManyRobots* GameEvent::mutable_too_many_robots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_TooManyRobots* _msg = _internal_mutable_too_many_robots();
  // @@protoc_insertion_point(field_mutable:GameEvent.too_many_robots)
  return _msg;
}

// .GameEvent.ChallengeFlag challenge_flag = 46;
inline bool GameEvent::has_challenge_flag() const {
  return event_case() == kChallengeFlag;
}
inline bool GameEvent::_internal_has_challenge_flag() const {
  return event_case() == kChallengeFlag;
}
inline void GameEvent::set_has_challenge_flag() {
  _impl_._oneof_case_[0] = kChallengeFlag;
}
inline void GameEvent::clear_challenge_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kChallengeFlag) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.challenge_flag_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.challenge_flag_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_ChallengeFlag* GameEvent::release_challenge_flag() {
  // @@protoc_insertion_point(field_release:GameEvent.challenge_flag)
  if (event_case() == kChallengeFlag) {
    clear_has_event();
    auto* temp = _impl_.event_.challenge_flag_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.challenge_flag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_ChallengeFlag& GameEvent::_internal_challenge_flag() const {
  return event_case() == kChallengeFlag ? *_impl_.event_.challenge_flag_ : reinterpret_cast<::GameEvent_ChallengeFlag&>(::_GameEvent_ChallengeFlag_default_instance_);
}
inline const ::GameEvent_ChallengeFlag& GameEvent::challenge_flag() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.challenge_flag)
  return _internal_challenge_flag();
}
inline ::GameEvent_ChallengeFlag* GameEvent::unsafe_arena_release_challenge_flag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.challenge_flag)
  if (event_case() == kChallengeFlag) {
    clear_has_event();
    auto* temp = _impl_.event_.challenge_flag_;
    _impl_.event_.challenge_flag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_challenge_flag(::GameEvent_ChallengeFlag* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_challenge_flag();
    _impl_.event_.challenge_flag_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.challenge_flag)
}
inline ::GameEvent_ChallengeFlag* GameEvent::_internal_mutable_challenge_flag() {
  if (event_case() != kChallengeFlag) {
    clear_event();
    set_has_challenge_flag();
    _impl_.event_.challenge_flag_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_ChallengeFlag>(GetArena());
  }
  return _impl_.event_.challenge_flag_;
}
inline ::GameEvent_ChallengeFlag* GameEvent::mutable_challenge_flag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_ChallengeFlag* _msg = _internal_mutable_challenge_flag();
  // @@protoc_insertion_point(field_mutable:GameEvent.challenge_flag)
  return _msg;
}

// .GameEvent.ChallengeFlagHandled challenge_flag_handled = 48;
inline bool GameEvent::has_challenge_flag_handled() const {
  return event_case() == kChallengeFlagHandled;
}
inline bool GameEvent::_internal_has_challenge_flag_handled() const {
  return event_case() == kChallengeFlagHandled;
}
inline void GameEvent::set_has_challenge_flag_handled() {
  _impl_._oneof_case_[0] = kChallengeFlagHandled;
}
inline void GameEvent::clear_challenge_flag_handled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kChallengeFlagHandled) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.challenge_flag_handled_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.challenge_flag_handled_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_ChallengeFlagHandled* GameEvent::release_challenge_flag_handled() {
  // @@protoc_insertion_point(field_release:GameEvent.challenge_flag_handled)
  if (event_case() == kChallengeFlagHandled) {
    clear_has_event();
    auto* temp = _impl_.event_.challenge_flag_handled_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.challenge_flag_handled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_ChallengeFlagHandled& GameEvent::_internal_challenge_flag_handled() const {
  return event_case() == kChallengeFlagHandled ? *_impl_.event_.challenge_flag_handled_ : reinterpret_cast<::GameEvent_ChallengeFlagHandled&>(::_GameEvent_ChallengeFlagHandled_default_instance_);
}
inline const ::GameEvent_ChallengeFlagHandled& GameEvent::challenge_flag_handled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.challenge_flag_handled)
  return _internal_challenge_flag_handled();
}
inline ::GameEvent_ChallengeFlagHandled* GameEvent::unsafe_arena_release_challenge_flag_handled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.challenge_flag_handled)
  if (event_case() == kChallengeFlagHandled) {
    clear_has_event();
    auto* temp = _impl_.event_.challenge_flag_handled_;
    _impl_.event_.challenge_flag_handled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_challenge_flag_handled(::GameEvent_ChallengeFlagHandled* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_challenge_flag_handled();
    _impl_.event_.challenge_flag_handled_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.challenge_flag_handled)
}
inline ::GameEvent_ChallengeFlagHandled* GameEvent::_internal_mutable_challenge_flag_handled() {
  if (event_case() != kChallengeFlagHandled) {
    clear_event();
    set_has_challenge_flag_handled();
    _impl_.event_.challenge_flag_handled_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_ChallengeFlagHandled>(GetArena());
  }
  return _impl_.event_.challenge_flag_handled_;
}
inline ::GameEvent_ChallengeFlagHandled* GameEvent::mutable_challenge_flag_handled() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_ChallengeFlagHandled* _msg = _internal_mutable_challenge_flag_handled();
  // @@protoc_insertion_point(field_mutable:GameEvent.challenge_flag_handled)
  return _msg;
}

// .GameEvent.EmergencyStop emergency_stop = 47;
inline bool GameEvent::has_emergency_stop() const {
  return event_case() == kEmergencyStop;
}
inline bool GameEvent::_internal_has_emergency_stop() const {
  return event_case() == kEmergencyStop;
}
inline void GameEvent::set_has_emergency_stop() {
  _impl_._oneof_case_[0] = kEmergencyStop;
}
inline void GameEvent::clear_emergency_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kEmergencyStop) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.emergency_stop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.emergency_stop_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_EmergencyStop* GameEvent::release_emergency_stop() {
  // @@protoc_insertion_point(field_release:GameEvent.emergency_stop)
  if (event_case() == kEmergencyStop) {
    clear_has_event();
    auto* temp = _impl_.event_.emergency_stop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.emergency_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_EmergencyStop& GameEvent::_internal_emergency_stop() const {
  return event_case() == kEmergencyStop ? *_impl_.event_.emergency_stop_ : reinterpret_cast<::GameEvent_EmergencyStop&>(::_GameEvent_EmergencyStop_default_instance_);
}
inline const ::GameEvent_EmergencyStop& GameEvent::emergency_stop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.emergency_stop)
  return _internal_emergency_stop();
}
inline ::GameEvent_EmergencyStop* GameEvent::unsafe_arena_release_emergency_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.emergency_stop)
  if (event_case() == kEmergencyStop) {
    clear_has_event();
    auto* temp = _impl_.event_.emergency_stop_;
    _impl_.event_.emergency_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_emergency_stop(::GameEvent_EmergencyStop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_emergency_stop();
    _impl_.event_.emergency_stop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.emergency_stop)
}
inline ::GameEvent_EmergencyStop* GameEvent::_internal_mutable_emergency_stop() {
  if (event_case() != kEmergencyStop) {
    clear_event();
    set_has_emergency_stop();
    _impl_.event_.emergency_stop_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_EmergencyStop>(GetArena());
  }
  return _impl_.event_.emergency_stop_;
}
inline ::GameEvent_EmergencyStop* GameEvent::mutable_emergency_stop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_EmergencyStop* _msg = _internal_mutable_emergency_stop();
  // @@protoc_insertion_point(field_mutable:GameEvent.emergency_stop)
  return _msg;
}

// .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
inline bool GameEvent::has_unsporting_behavior_minor() const {
  return event_case() == kUnsportingBehaviorMinor;
}
inline bool GameEvent::_internal_has_unsporting_behavior_minor() const {
  return event_case() == kUnsportingBehaviorMinor;
}
inline void GameEvent::set_has_unsporting_behavior_minor() {
  _impl_._oneof_case_[0] = kUnsportingBehaviorMinor;
}
inline void GameEvent::clear_unsporting_behavior_minor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kUnsportingBehaviorMinor) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.unsporting_behavior_minor_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.unsporting_behavior_minor_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_UnsportingBehaviorMinor* GameEvent::release_unsporting_behavior_minor() {
  // @@protoc_insertion_point(field_release:GameEvent.unsporting_behavior_minor)
  if (event_case() == kUnsportingBehaviorMinor) {
    clear_has_event();
    auto* temp = _impl_.event_.unsporting_behavior_minor_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.unsporting_behavior_minor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_UnsportingBehaviorMinor& GameEvent::_internal_unsporting_behavior_minor() const {
  return event_case() == kUnsportingBehaviorMinor ? *_impl_.event_.unsporting_behavior_minor_ : reinterpret_cast<::GameEvent_UnsportingBehaviorMinor&>(::_GameEvent_UnsportingBehaviorMinor_default_instance_);
}
inline const ::GameEvent_UnsportingBehaviorMinor& GameEvent::unsporting_behavior_minor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.unsporting_behavior_minor)
  return _internal_unsporting_behavior_minor();
}
inline ::GameEvent_UnsportingBehaviorMinor* GameEvent::unsafe_arena_release_unsporting_behavior_minor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.unsporting_behavior_minor)
  if (event_case() == kUnsportingBehaviorMinor) {
    clear_has_event();
    auto* temp = _impl_.event_.unsporting_behavior_minor_;
    _impl_.event_.unsporting_behavior_minor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_unsporting_behavior_minor();
    _impl_.event_.unsporting_behavior_minor_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.unsporting_behavior_minor)
}
inline ::GameEvent_UnsportingBehaviorMinor* GameEvent::_internal_mutable_unsporting_behavior_minor() {
  if (event_case() != kUnsportingBehaviorMinor) {
    clear_event();
    set_has_unsporting_behavior_minor();
    _impl_.event_.unsporting_behavior_minor_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_UnsportingBehaviorMinor>(GetArena());
  }
  return _impl_.event_.unsporting_behavior_minor_;
}
inline ::GameEvent_UnsportingBehaviorMinor* GameEvent::mutable_unsporting_behavior_minor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_UnsportingBehaviorMinor* _msg = _internal_mutable_unsporting_behavior_minor();
  // @@protoc_insertion_point(field_mutable:GameEvent.unsporting_behavior_minor)
  return _msg;
}

// .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
inline bool GameEvent::has_unsporting_behavior_major() const {
  return event_case() == kUnsportingBehaviorMajor;
}
inline bool GameEvent::_internal_has_unsporting_behavior_major() const {
  return event_case() == kUnsportingBehaviorMajor;
}
inline void GameEvent::set_has_unsporting_behavior_major() {
  _impl_._oneof_case_[0] = kUnsportingBehaviorMajor;
}
inline void GameEvent::clear_unsporting_behavior_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kUnsportingBehaviorMajor) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.unsporting_behavior_major_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.unsporting_behavior_major_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_UnsportingBehaviorMajor* GameEvent::release_unsporting_behavior_major() {
  // @@protoc_insertion_point(field_release:GameEvent.unsporting_behavior_major)
  if (event_case() == kUnsportingBehaviorMajor) {
    clear_has_event();
    auto* temp = _impl_.event_.unsporting_behavior_major_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.unsporting_behavior_major_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_UnsportingBehaviorMajor& GameEvent::_internal_unsporting_behavior_major() const {
  return event_case() == kUnsportingBehaviorMajor ? *_impl_.event_.unsporting_behavior_major_ : reinterpret_cast<::GameEvent_UnsportingBehaviorMajor&>(::_GameEvent_UnsportingBehaviorMajor_default_instance_);
}
inline const ::GameEvent_UnsportingBehaviorMajor& GameEvent::unsporting_behavior_major() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.unsporting_behavior_major)
  return _internal_unsporting_behavior_major();
}
inline ::GameEvent_UnsportingBehaviorMajor* GameEvent::unsafe_arena_release_unsporting_behavior_major() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.unsporting_behavior_major)
  if (event_case() == kUnsportingBehaviorMajor) {
    clear_has_event();
    auto* temp = _impl_.event_.unsporting_behavior_major_;
    _impl_.event_.unsporting_behavior_major_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_unsporting_behavior_major();
    _impl_.event_.unsporting_behavior_major_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.unsporting_behavior_major)
}
inline ::GameEvent_UnsportingBehaviorMajor* GameEvent::_internal_mutable_unsporting_behavior_major() {
  if (event_case() != kUnsportingBehaviorMajor) {
    clear_event();
    set_has_unsporting_behavior_major();
    _impl_.event_.unsporting_behavior_major_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_UnsportingBehaviorMajor>(GetArena());
  }
  return _impl_.event_.unsporting_behavior_major_;
}
inline ::GameEvent_UnsportingBehaviorMajor* GameEvent::mutable_unsporting_behavior_major() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_UnsportingBehaviorMajor* _msg = _internal_mutable_unsporting_behavior_major();
  // @@protoc_insertion_point(field_mutable:GameEvent.unsporting_behavior_major)
  return _msg;
}

// .GameEvent.Prepared prepared = 1 [deprecated = true];
inline bool GameEvent::has_prepared() const {
  return event_case() == kPrepared;
}
inline bool GameEvent::_internal_has_prepared() const {
  return event_case() == kPrepared;
}
inline void GameEvent::set_has_prepared() {
  _impl_._oneof_case_[0] = kPrepared;
}
inline void GameEvent::clear_prepared() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kPrepared) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.prepared_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.prepared_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_Prepared* GameEvent::release_prepared() {
  // @@protoc_insertion_point(field_release:GameEvent.prepared)
  if (event_case() == kPrepared) {
    clear_has_event();
    auto* temp = _impl_.event_.prepared_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.prepared_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_Prepared& GameEvent::_internal_prepared() const {
  return event_case() == kPrepared ? *_impl_.event_.prepared_ : reinterpret_cast<::GameEvent_Prepared&>(::_GameEvent_Prepared_default_instance_);
}
inline const ::GameEvent_Prepared& GameEvent::prepared() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.prepared)
  return _internal_prepared();
}
inline ::GameEvent_Prepared* GameEvent::unsafe_arena_release_prepared() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.prepared)
  if (event_case() == kPrepared) {
    clear_has_event();
    auto* temp = _impl_.event_.prepared_;
    _impl_.event_.prepared_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_prepared(::GameEvent_Prepared* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_prepared();
    _impl_.event_.prepared_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.prepared)
}
inline ::GameEvent_Prepared* GameEvent::_internal_mutable_prepared() {
  if (event_case() != kPrepared) {
    clear_event();
    set_has_prepared();
    _impl_.event_.prepared_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_Prepared>(GetArena());
  }
  return _impl_.event_.prepared_;
}
inline ::GameEvent_Prepared* GameEvent::mutable_prepared() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_Prepared* _msg = _internal_mutable_prepared();
  // @@protoc_insertion_point(field_mutable:GameEvent.prepared)
  return _msg;
}

// .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
inline bool GameEvent::has_indirect_goal() const {
  return event_case() == kIndirectGoal;
}
inline bool GameEvent::_internal_has_indirect_goal() const {
  return event_case() == kIndirectGoal;
}
inline void GameEvent::set_has_indirect_goal() {
  _impl_._oneof_case_[0] = kIndirectGoal;
}
inline void GameEvent::clear_indirect_goal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kIndirectGoal) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.indirect_goal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.indirect_goal_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_IndirectGoal* GameEvent::release_indirect_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.indirect_goal)
  if (event_case() == kIndirectGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.indirect_goal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.indirect_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_IndirectGoal& GameEvent::_internal_indirect_goal() const {
  return event_case() == kIndirectGoal ? *_impl_.event_.indirect_goal_ : reinterpret_cast<::GameEvent_IndirectGoal&>(::_GameEvent_IndirectGoal_default_instance_);
}
inline const ::GameEvent_IndirectGoal& GameEvent::indirect_goal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.indirect_goal)
  return _internal_indirect_goal();
}
inline ::GameEvent_IndirectGoal* GameEvent::unsafe_arena_release_indirect_goal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.indirect_goal)
  if (event_case() == kIndirectGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.indirect_goal_;
    _impl_.event_.indirect_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_indirect_goal(::GameEvent_IndirectGoal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_indirect_goal();
    _impl_.event_.indirect_goal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.indirect_goal)
}
inline ::GameEvent_IndirectGoal* GameEvent::_internal_mutable_indirect_goal() {
  if (event_case() != kIndirectGoal) {
    clear_event();
    set_has_indirect_goal();
    _impl_.event_.indirect_goal_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_IndirectGoal>(GetArena());
  }
  return _impl_.event_.indirect_goal_;
}
inline ::GameEvent_IndirectGoal* GameEvent::mutable_indirect_goal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_IndirectGoal* _msg = _internal_mutable_indirect_goal();
  // @@protoc_insertion_point(field_mutable:GameEvent.indirect_goal)
  return _msg;
}

// .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
inline bool GameEvent::has_chipped_goal() const {
  return event_case() == kChippedGoal;
}
inline bool GameEvent::_internal_has_chipped_goal() const {
  return event_case() == kChippedGoal;
}
inline void GameEvent::set_has_chipped_goal() {
  _impl_._oneof_case_[0] = kChippedGoal;
}
inline void GameEvent::clear_chipped_goal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kChippedGoal) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.chipped_goal_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.chipped_goal_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_ChippedGoal* GameEvent::release_chipped_goal() {
  // @@protoc_insertion_point(field_release:GameEvent.chipped_goal)
  if (event_case() == kChippedGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.chipped_goal_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.chipped_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_ChippedGoal& GameEvent::_internal_chipped_goal() const {
  return event_case() == kChippedGoal ? *_impl_.event_.chipped_goal_ : reinterpret_cast<::GameEvent_ChippedGoal&>(::_GameEvent_ChippedGoal_default_instance_);
}
inline const ::GameEvent_ChippedGoal& GameEvent::chipped_goal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.chipped_goal)
  return _internal_chipped_goal();
}
inline ::GameEvent_ChippedGoal* GameEvent::unsafe_arena_release_chipped_goal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.chipped_goal)
  if (event_case() == kChippedGoal) {
    clear_has_event();
    auto* temp = _impl_.event_.chipped_goal_;
    _impl_.event_.chipped_goal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_chipped_goal(::GameEvent_ChippedGoal* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_chipped_goal();
    _impl_.event_.chipped_goal_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.chipped_goal)
}
inline ::GameEvent_ChippedGoal* GameEvent::_internal_mutable_chipped_goal() {
  if (event_case() != kChippedGoal) {
    clear_event();
    set_has_chipped_goal();
    _impl_.event_.chipped_goal_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_ChippedGoal>(GetArena());
  }
  return _impl_.event_.chipped_goal_;
}
inline ::GameEvent_ChippedGoal* GameEvent::mutable_chipped_goal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_ChippedGoal* _msg = _internal_mutable_chipped_goal();
  // @@protoc_insertion_point(field_mutable:GameEvent.chipped_goal)
  return _msg;
}

// .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
inline bool GameEvent::has_kick_timeout() const {
  return event_case() == kKickTimeout;
}
inline bool GameEvent::_internal_has_kick_timeout() const {
  return event_case() == kKickTimeout;
}
inline void GameEvent::set_has_kick_timeout() {
  _impl_._oneof_case_[0] = kKickTimeout;
}
inline void GameEvent::clear_kick_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kKickTimeout) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.kick_timeout_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.kick_timeout_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_KickTimeout* GameEvent::release_kick_timeout() {
  // @@protoc_insertion_point(field_release:GameEvent.kick_timeout)
  if (event_case() == kKickTimeout) {
    clear_has_event();
    auto* temp = _impl_.event_.kick_timeout_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.kick_timeout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_KickTimeout& GameEvent::_internal_kick_timeout() const {
  return event_case() == kKickTimeout ? *_impl_.event_.kick_timeout_ : reinterpret_cast<::GameEvent_KickTimeout&>(::_GameEvent_KickTimeout_default_instance_);
}
inline const ::GameEvent_KickTimeout& GameEvent::kick_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.kick_timeout)
  return _internal_kick_timeout();
}
inline ::GameEvent_KickTimeout* GameEvent::unsafe_arena_release_kick_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.kick_timeout)
  if (event_case() == kKickTimeout) {
    clear_has_event();
    auto* temp = _impl_.event_.kick_timeout_;
    _impl_.event_.kick_timeout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_kick_timeout(::GameEvent_KickTimeout* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_kick_timeout();
    _impl_.event_.kick_timeout_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.kick_timeout)
}
inline ::GameEvent_KickTimeout* GameEvent::_internal_mutable_kick_timeout() {
  if (event_case() != kKickTimeout) {
    clear_event();
    set_has_kick_timeout();
    _impl_.event_.kick_timeout_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_KickTimeout>(GetArena());
  }
  return _impl_.event_.kick_timeout_;
}
inline ::GameEvent_KickTimeout* GameEvent::mutable_kick_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_KickTimeout* _msg = _internal_mutable_kick_timeout();
  // @@protoc_insertion_point(field_mutable:GameEvent.kick_timeout)
  return _msg;
}

// .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
inline bool GameEvent::has_attacker_touched_opponent_in_defense_area() const {
  return event_case() == kAttackerTouchedOpponentInDefenseArea;
}
inline bool GameEvent::_internal_has_attacker_touched_opponent_in_defense_area() const {
  return event_case() == kAttackerTouchedOpponentInDefenseArea;
}
inline void GameEvent::set_has_attacker_touched_opponent_in_defense_area() {
  _impl_._oneof_case_[0] = kAttackerTouchedOpponentInDefenseArea;
}
inline void GameEvent::clear_attacker_touched_opponent_in_defense_area() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAttackerTouchedOpponentInDefenseArea) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.attacker_touched_opponent_in_defense_area_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_opponent_in_defense_area_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_opponent_in_defense_area)
  if (event_case() == kAttackerTouchedOpponentInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_opponent_in_defense_area_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.attacker_touched_opponent_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::_internal_attacker_touched_opponent_in_defense_area() const {
  return event_case() == kAttackerTouchedOpponentInDefenseArea ? *_impl_.event_.attacker_touched_opponent_in_defense_area_ : reinterpret_cast<::GameEvent_AttackerTouchedOpponentInDefenseArea&>(::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_opponent_in_defense_area)
  return _internal_attacker_touched_opponent_in_defense_area();
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::unsafe_arena_release_attacker_touched_opponent_in_defense_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.attacker_touched_opponent_in_defense_area)
  if (event_case() == kAttackerTouchedOpponentInDefenseArea) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_opponent_in_defense_area_;
    _impl_.event_.attacker_touched_opponent_in_defense_area_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_attacker_touched_opponent_in_defense_area();
    _impl_.event_.attacker_touched_opponent_in_defense_area_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::_internal_mutable_attacker_touched_opponent_in_defense_area() {
  if (event_case() != kAttackerTouchedOpponentInDefenseArea) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area();
    _impl_.event_.attacker_touched_opponent_in_defense_area_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(GetArena());
  }
  return _impl_.event_.attacker_touched_opponent_in_defense_area_;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* _msg = _internal_mutable_attacker_touched_opponent_in_defense_area();
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_opponent_in_defense_area)
  return _msg;
}

// .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
inline bool GameEvent::has_attacker_touched_opponent_in_defense_area_skipped() const {
  return event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped;
}
inline bool GameEvent::_internal_has_attacker_touched_opponent_in_defense_area_skipped() const {
  return event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped;
}
inline void GameEvent::set_has_attacker_touched_opponent_in_defense_area_skipped() {
  _impl_._oneof_case_[0] = kAttackerTouchedOpponentInDefenseAreaSkipped;
}
inline void GameEvent::clear_attacker_touched_opponent_in_defense_area_skipped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::release_attacker_touched_opponent_in_defense_area_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  if (event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::_internal_attacker_touched_opponent_in_defense_area_skipped() const {
  return event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped ? *_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ : reinterpret_cast<::GameEvent_AttackerTouchedOpponentInDefenseArea&>(::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_);
}
inline const ::GameEvent_AttackerTouchedOpponentInDefenseArea& GameEvent::attacker_touched_opponent_in_defense_area_skipped() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return _internal_attacker_touched_opponent_in_defense_area_skipped();
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::unsafe_arena_release_attacker_touched_opponent_in_defense_area_skipped() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  if (event_case() == kAttackerTouchedOpponentInDefenseAreaSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::_internal_mutable_attacker_touched_opponent_in_defense_area_skipped() {
  if (event_case() != kAttackerTouchedOpponentInDefenseAreaSkipped) {
    clear_event();
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_AttackerTouchedOpponentInDefenseArea>(GetArena());
  }
  return _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
}
inline ::GameEvent_AttackerTouchedOpponentInDefenseArea* GameEvent::mutable_attacker_touched_opponent_in_defense_area_skipped() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_AttackerTouchedOpponentInDefenseArea* _msg = _internal_mutable_attacker_touched_opponent_in_defense_area_skipped();
  // @@protoc_insertion_point(field_mutable:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
  return _msg;
}

// .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
inline bool GameEvent::has_bot_crash_unique_skipped() const {
  return event_case() == kBotCrashUniqueSkipped;
}
inline bool GameEvent::_internal_has_bot_crash_unique_skipped() const {
  return event_case() == kBotCrashUniqueSkipped;
}
inline void GameEvent::set_has_bot_crash_unique_skipped() {
  _impl_._oneof_case_[0] = kBotCrashUniqueSkipped;
}
inline void GameEvent::clear_bot_crash_unique_skipped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotCrashUniqueSkipped) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_crash_unique_skipped_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_crash_unique_skipped_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotCrashUnique* GameEvent::release_bot_crash_unique_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_crash_unique_skipped)
  if (event_case() == kBotCrashUniqueSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_unique_skipped_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_crash_unique_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotCrashUnique& GameEvent::_internal_bot_crash_unique_skipped() const {
  return event_case() == kBotCrashUniqueSkipped ? *_impl_.event_.bot_crash_unique_skipped_ : reinterpret_cast<::GameEvent_BotCrashUnique&>(::_GameEvent_BotCrashUnique_default_instance_);
}
inline const ::GameEvent_BotCrashUnique& GameEvent::bot_crash_unique_skipped() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_crash_unique_skipped)
  return _internal_bot_crash_unique_skipped();
}
inline ::GameEvent_BotCrashUnique* GameEvent::unsafe_arena_release_bot_crash_unique_skipped() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_crash_unique_skipped)
  if (event_case() == kBotCrashUniqueSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_crash_unique_skipped_;
    _impl_.event_.bot_crash_unique_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_crash_unique_skipped();
    _impl_.event_.bot_crash_unique_skipped_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_crash_unique_skipped)
}
inline ::GameEvent_BotCrashUnique* GameEvent::_internal_mutable_bot_crash_unique_skipped() {
  if (event_case() != kBotCrashUniqueSkipped) {
    clear_event();
    set_has_bot_crash_unique_skipped();
    _impl_.event_.bot_crash_unique_skipped_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotCrashUnique>(GetArena());
  }
  return _impl_.event_.bot_crash_unique_skipped_;
}
inline ::GameEvent_BotCrashUnique* GameEvent::mutable_bot_crash_unique_skipped() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotCrashUnique* _msg = _internal_mutable_bot_crash_unique_skipped();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_crash_unique_skipped)
  return _msg;
}

// .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
inline bool GameEvent::has_bot_pushed_bot_skipped() const {
  return event_case() == kBotPushedBotSkipped;
}
inline bool GameEvent::_internal_has_bot_pushed_bot_skipped() const {
  return event_case() == kBotPushedBotSkipped;
}
inline void GameEvent::set_has_bot_pushed_bot_skipped() {
  _impl_._oneof_case_[0] = kBotPushedBotSkipped;
}
inline void GameEvent::clear_bot_pushed_bot_skipped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kBotPushedBotSkipped) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.bot_pushed_bot_skipped_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.bot_pushed_bot_skipped_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_BotPushedBot* GameEvent::release_bot_pushed_bot_skipped() {
  // @@protoc_insertion_point(field_release:GameEvent.bot_pushed_bot_skipped)
  if (event_case() == kBotPushedBotSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_pushed_bot_skipped_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.bot_pushed_bot_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_BotPushedBot& GameEvent::_internal_bot_pushed_bot_skipped() const {
  return event_case() == kBotPushedBotSkipped ? *_impl_.event_.bot_pushed_bot_skipped_ : reinterpret_cast<::GameEvent_BotPushedBot&>(::_GameEvent_BotPushedBot_default_instance_);
}
inline const ::GameEvent_BotPushedBot& GameEvent::bot_pushed_bot_skipped() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.bot_pushed_bot_skipped)
  return _internal_bot_pushed_bot_skipped();
}
inline ::GameEvent_BotPushedBot* GameEvent::unsafe_arena_release_bot_pushed_bot_skipped() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.bot_pushed_bot_skipped)
  if (event_case() == kBotPushedBotSkipped) {
    clear_has_event();
    auto* temp = _impl_.event_.bot_pushed_bot_skipped_;
    _impl_.event_.bot_pushed_bot_skipped_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_bot_pushed_bot_skipped();
    _impl_.event_.bot_pushed_bot_skipped_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.bot_pushed_bot_skipped)
}
inline ::GameEvent_BotPushedBot* GameEvent::_internal_mutable_bot_pushed_bot_skipped() {
  if (event_case() != kBotPushedBotSkipped) {
    clear_event();
    set_has_bot_pushed_bot_skipped();
    _impl_.event_.bot_pushed_bot_skipped_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_BotPushedBot>(GetArena());
  }
  return _impl_.event_.bot_pushed_bot_skipped_;
}
inline ::GameEvent_BotPushedBot* GameEvent::mutable_bot_pushed_bot_skipped() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_BotPushedBot* _msg = _internal_mutable_bot_pushed_bot_skipped();
  // @@protoc_insertion_point(field_mutable:GameEvent.bot_pushed_bot_skipped)
  return _msg;
}

// .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
inline bool GameEvent::has_defender_in_defense_area_partially() const {
  return event_case() == kDefenderInDefenseAreaPartially;
}
inline bool GameEvent::_internal_has_defender_in_defense_area_partially() const {
  return event_case() == kDefenderInDefenseAreaPartially;
}
inline void GameEvent::set_has_defender_in_defense_area_partially() {
  _impl_._oneof_case_[0] = kDefenderInDefenseAreaPartially;
}
inline void GameEvent::clear_defender_in_defense_area_partially() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDefenderInDefenseAreaPartially) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.defender_in_defense_area_partially_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.defender_in_defense_area_partially_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_DefenderInDefenseAreaPartially* GameEvent::release_defender_in_defense_area_partially() {
  // @@protoc_insertion_point(field_release:GameEvent.defender_in_defense_area_partially)
  if (event_case() == kDefenderInDefenseAreaPartially) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_in_defense_area_partially_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.defender_in_defense_area_partially_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_DefenderInDefenseAreaPartially& GameEvent::_internal_defender_in_defense_area_partially() const {
  return event_case() == kDefenderInDefenseAreaPartially ? *_impl_.event_.defender_in_defense_area_partially_ : reinterpret_cast<::GameEvent_DefenderInDefenseAreaPartially&>(::_GameEvent_DefenderInDefenseAreaPartially_default_instance_);
}
inline const ::GameEvent_DefenderInDefenseAreaPartially& GameEvent::defender_in_defense_area_partially() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.defender_in_defense_area_partially)
  return _internal_defender_in_defense_area_partially();
}
inline ::GameEvent_DefenderInDefenseAreaPartially* GameEvent::unsafe_arena_release_defender_in_defense_area_partially() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.defender_in_defense_area_partially)
  if (event_case() == kDefenderInDefenseAreaPartially) {
    clear_has_event();
    auto* temp = _impl_.event_.defender_in_defense_area_partially_;
    _impl_.event_.defender_in_defense_area_partially_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_defender_in_defense_area_partially();
    _impl_.event_.defender_in_defense_area_partially_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.defender_in_defense_area_partially)
}
inline ::GameEvent_DefenderInDefenseAreaPartially* GameEvent::_internal_mutable_defender_in_defense_area_partially() {
  if (event_case() != kDefenderInDefenseAreaPartially) {
    clear_event();
    set_has_defender_in_defense_area_partially();
    _impl_.event_.defender_in_defense_area_partially_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_DefenderInDefenseAreaPartially>(GetArena());
  }
  return _impl_.event_.defender_in_defense_area_partially_;
}
inline ::GameEvent_DefenderInDefenseAreaPartially* GameEvent::mutable_defender_in_defense_area_partially() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_DefenderInDefenseAreaPartially* _msg = _internal_mutable_defender_in_defense_area_partially();
  // @@protoc_insertion_point(field_mutable:GameEvent.defender_in_defense_area_partially)
  return _msg;
}

// .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
inline bool GameEvent::has_multiple_placement_failures() const {
  return event_case() == kMultiplePlacementFailures;
}
inline bool GameEvent::_internal_has_multiple_placement_failures() const {
  return event_case() == kMultiplePlacementFailures;
}
inline void GameEvent::set_has_multiple_placement_failures() {
  _impl_._oneof_case_[0] = kMultiplePlacementFailures;
}
inline void GameEvent::clear_multiple_placement_failures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kMultiplePlacementFailures) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.multiple_placement_failures_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.multiple_placement_failures_);
    }
    clear_has_event();
  }
}
inline ::GameEvent_MultiplePlacementFailures* GameEvent::release_multiple_placement_failures() {
  // @@protoc_insertion_point(field_release:GameEvent.multiple_placement_failures)
  if (event_case() == kMultiplePlacementFailures) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_placement_failures_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.multiple_placement_failures_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameEvent_MultiplePlacementFailures& GameEvent::_internal_multiple_placement_failures() const {
  return event_case() == kMultiplePlacementFailures ? *_impl_.event_.multiple_placement_failures_ : reinterpret_cast<::GameEvent_MultiplePlacementFailures&>(::_GameEvent_MultiplePlacementFailures_default_instance_);
}
inline const ::GameEvent_MultiplePlacementFailures& GameEvent::multiple_placement_failures() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameEvent.multiple_placement_failures)
  return _internal_multiple_placement_failures();
}
inline ::GameEvent_MultiplePlacementFailures* GameEvent::unsafe_arena_release_multiple_placement_failures() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameEvent.multiple_placement_failures)
  if (event_case() == kMultiplePlacementFailures) {
    clear_has_event();
    auto* temp = _impl_.event_.multiple_placement_failures_;
    _impl_.event_.multiple_placement_failures_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameEvent::unsafe_arena_set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_multiple_placement_failures();
    _impl_.event_.multiple_placement_failures_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameEvent.multiple_placement_failures)
}
inline ::GameEvent_MultiplePlacementFailures* GameEvent::_internal_mutable_multiple_placement_failures() {
  if (event_case() != kMultiplePlacementFailures) {
    clear_event();
    set_has_multiple_placement_failures();
    _impl_.event_.multiple_placement_failures_ =
        ::google::protobuf::Message::DefaultConstruct<::GameEvent_MultiplePlacementFailures>(GetArena());
  }
  return _impl_.event_.multiple_placement_failures_;
}
inline ::GameEvent_MultiplePlacementFailures* GameEvent::mutable_multiple_placement_failures() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::GameEvent_MultiplePlacementFailures* _msg = _internal_mutable_multiple_placement_failures();
  // @@protoc_insertion_point(field_mutable:GameEvent.multiple_placement_failures)
  return _msg;
}

inline bool GameEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void GameEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline GameEvent::EventCase GameEvent::event_case() const {
  return GameEvent::EventCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::GameEvent_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GameEvent_Type>() {
  return ::GameEvent_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fgame_5fevent_2eproto_2epb_2eh
