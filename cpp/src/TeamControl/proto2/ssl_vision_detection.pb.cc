// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_vision_detection.proto
// Protobuf C++ Version: 5.27.1

#include "ssl_vision_detection.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr SSL_DetectionRobot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{0},
        robot_id_{0u},
        x_{0},
        y_{0},
        orientation_{0},
        pixel_x_{0},
        pixel_y_{0},
        height_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_DetectionRobot::SSL_DetectionRobot(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SSL_DetectionRobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionRobotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionRobotDefaultTypeInternal() {}
  union {
    SSL_DetectionRobot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionRobotDefaultTypeInternal _SSL_DetectionRobot_default_instance_;

inline constexpr SSL_DetectionBall::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        confidence_{0},
        area_{0u},
        x_{0},
        y_{0},
        z_{0},
        pixel_x_{0},
        pixel_y_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_DetectionBall::SSL_DetectionBall(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SSL_DetectionBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionBallDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionBallDefaultTypeInternal() {}
  union {
    SSL_DetectionBall _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionBallDefaultTypeInternal _SSL_DetectionBall_default_instance_;

inline constexpr SSL_DetectionFrame::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        balls_{},
        robots_yellow_{},
        robots_blue_{},
        t_capture_{0},
        frame_number_{0u},
        camera_id_{0u},
        t_sent_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SSL_DetectionFrame::SSL_DetectionFrame(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SSL_DetectionFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionFrameDefaultTypeInternal() {}
  union {
    SSL_DetectionFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionFrameDefaultTypeInternal _SSL_DetectionFrame_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ssl_5fvision_5fdetection_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ssl_5fvision_5fdetection_2eproto = nullptr;
const ::uint32_t
    TableStruct_ssl_5fvision_5fdetection_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.confidence_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.area_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.pixel_x_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.pixel_y_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.confidence_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.robot_id_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.orientation_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.pixel_x_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.pixel_y_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.height_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.frame_number_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.t_capture_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.t_sent_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.camera_id_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.balls_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.robots_yellow_),
        PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.robots_blue_),
        1,
        0,
        3,
        2,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::SSL_DetectionBall)},
        {22, 38, -1, sizeof(::SSL_DetectionRobot)},
        {46, 61, -1, sizeof(::SSL_DetectionFrame)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_SSL_DetectionBall_default_instance_._instance,
    &::_SSL_DetectionRobot_default_instance_._instance,
    &::_SSL_DetectionFrame_default_instance_._instance,
};
const char descriptor_table_protodef_ssl_5fvision_5fdetection_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\032ssl_vision_detection.proto\"x\n\021SSL_Dete"
    "ctionBall\022\022\n\nconfidence\030\001 \002(\002\022\014\n\004area\030\002 "
    "\001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z\030\005 \001(\002\022\017\n\007"
    "pixel_x\030\006 \002(\002\022\017\n\007pixel_y\030\007 \002(\002\"\227\001\n\022SSL_D"
    "etectionRobot\022\022\n\nconfidence\030\001 \002(\002\022\020\n\010rob"
    "ot_id\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013ori"
    "entation\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002(\002\022\017\n\007pixel"
    "_y\030\007 \002(\002\022\016\n\006height\030\010 \001(\002\"\331\001\n\022SSL_Detecti"
    "onFrame\022\024\n\014frame_number\030\001 \002(\r\022\021\n\tt_captu"
    "re\030\002 \002(\001\022\016\n\006t_sent\030\003 \002(\001\022\021\n\tcamera_id\030\004 "
    "\002(\r\022!\n\005balls\030\005 \003(\0132\022.SSL_DetectionBall\022*"
    "\n\rrobots_yellow\030\006 \003(\0132\023.SSL_DetectionRob"
    "ot\022(\n\013robots_blue\030\007 \003(\0132\023.SSL_DetectionR"
    "obotB8Z6github.com/RoboCup-SSL/ssl-simul"
    "ation-protocol/pkg/sim"
};
static ::absl::once_flag descriptor_table_ssl_5fvision_5fdetection_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_2eproto = {
    false,
    false,
    582,
    descriptor_table_protodef_ssl_5fvision_5fdetection_2eproto,
    "ssl_vision_detection.proto",
    &descriptor_table_ssl_5fvision_5fdetection_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_ssl_5fvision_5fdetection_2eproto::offsets,
    file_level_enum_descriptors_ssl_5fvision_5fdetection_2eproto,
    file_level_service_descriptors_ssl_5fvision_5fdetection_2eproto,
};
// ===================================================================

class SSL_DetectionBall::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_DetectionBall>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionBall::SSL_DetectionBall(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionBall)
}
SSL_DetectionBall::SSL_DetectionBall(
    ::google::protobuf::Arena* arena, const SSL_DetectionBall& from)
    : SSL_DetectionBall(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_DetectionBall::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_DetectionBall::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, pixel_y_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::pixel_y_));
}
SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_DetectionBall::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SSL_DetectionBall::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              SSL_DetectionBall::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_._cached_size_),
              false,
          },
          &SSL_DetectionBall::MergeImpl,
          &SSL_DetectionBall::kDescriptorMethods,
          &descriptor_table_ssl_5fvision_5fdetection_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> SSL_DetectionBall::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SSL_DetectionBall_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_DetectionBall>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required float confidence = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.confidence_)}},
    // optional uint32 area = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_DetectionBall, _impl_.area_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.area_)}},
    // required float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.x_)}},
    // required float y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.y_)}},
    // optional float z = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.z_)}},
    // required float pixel_x = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_x_)}},
    // required float pixel_y = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float confidence = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 area = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.area_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required float x = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.x_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.y_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float z = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.z_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float pixel_x = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_x_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float pixel_y = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_y_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.confidence_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pixel_y_) -
        reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.pixel_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SSL_DetectionBall::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_confidence(), target);
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_area(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_z(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_pixel_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

::size_t SSL_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // required float confidence = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_area());
  }

  if (cached_has_bits & 0x0000000cu) {
    // required float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // required float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 5;
  }

  if (cached_has_bits & 0x00000060u) {
    // required float pixel_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // required float pixel_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SSL_DetectionBall::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_DetectionBall*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.area_ = from._impl_.area_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pixel_x_ = from._impl_.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pixel_y_ = from._impl_.pixel_y_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_DetectionBall::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_DetectionBall&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_y_)
      + sizeof(SSL_DetectionBall::_impl_.pixel_y_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SSL_DetectionBall::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_DetectionRobot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_DetectionRobot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionRobot::SSL_DetectionRobot(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionRobot)
}
SSL_DetectionRobot::SSL_DetectionRobot(
    ::google::protobuf::Arena* arena, const SSL_DetectionRobot& from)
    : SSL_DetectionRobot(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SSL_DetectionRobot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SSL_DetectionRobot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::height_));
}
SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_DetectionRobot::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SSL_DetectionRobot::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              SSL_DetectionRobot::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_._cached_size_),
              false,
          },
          &SSL_DetectionRobot::MergeImpl,
          &SSL_DetectionRobot::kDescriptorMethods,
          &descriptor_table_ssl_5fvision_5fdetection_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> SSL_DetectionRobot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SSL_DetectionRobot_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_DetectionRobot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float height = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.height_)}},
    // required float confidence = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.confidence_)}},
    // optional uint32 robot_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_DetectionRobot, _impl_.robot_id_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.robot_id_)}},
    // required float x = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.x_)}},
    // required float y = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.y_)}},
    // optional float orientation = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.orientation_)}},
    // required float pixel_x = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.pixel_x_)}},
    // required float pixel_y = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.pixel_y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required float confidence = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.confidence_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 robot_id = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.robot_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required float x = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.x_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float y = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.y_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float orientation = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.orientation_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float pixel_x = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.pixel_x_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // required float pixel_y = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.pixel_y_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float height = 8;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.height_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.confidence_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SSL_DetectionRobot::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_orientation(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_pixel_y(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

::size_t SSL_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // required float confidence = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 5;
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_robot_id());
  }

  if (cached_has_bits & 0x0000000cu) {
    // required float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // required float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

  }
  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 5;
  }

  if (cached_has_bits & 0x00000060u) {
    // required float pixel_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // required float pixel_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SSL_DetectionRobot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_DetectionRobot*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionRobot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.robot_id_ = from._impl_.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.orientation_ = from._impl_.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pixel_x_ = from._impl_.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pixel_y_ = from._impl_.pixel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_DetectionRobot::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_DetectionRobot&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.height_)
      + sizeof(SSL_DetectionRobot::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata SSL_DetectionRobot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SSL_DetectionFrame::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SSL_DetectionFrame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SSL_DetectionFrame::SSL_DetectionFrame(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionFrame)
}
inline PROTOBUF_NDEBUG_INLINE SSL_DetectionFrame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SSL_DetectionFrame& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        balls_{visibility, arena, from.balls_},
        robots_yellow_{visibility, arena, from.robots_yellow_},
        robots_blue_{visibility, arena, from.robots_blue_} {}

SSL_DetectionFrame::SSL_DetectionFrame(
    ::google::protobuf::Arena* arena,
    const SSL_DetectionFrame& from)
    : ::google::protobuf::Message(arena) {
  SSL_DetectionFrame* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, t_capture_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, t_capture_),
           offsetof(Impl_, t_sent_) -
               offsetof(Impl_, t_capture_) +
               sizeof(Impl_::t_sent_));

  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}
inline PROTOBUF_NDEBUG_INLINE SSL_DetectionFrame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        balls_{visibility, arena},
        robots_yellow_{visibility, arena},
        robots_blue_{visibility, arena} {}

inline void SSL_DetectionFrame::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, t_capture_),
           0,
           offsetof(Impl_, t_sent_) -
               offsetof(Impl_, t_capture_) +
               sizeof(Impl_::t_sent_));
}
SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SSL_DetectionFrame::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SSL_DetectionFrame::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              SSL_DetectionFrame::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_._cached_size_),
              false,
          },
          &SSL_DetectionFrame::MergeImpl,
          &SSL_DetectionFrame::kDescriptorMethods,
          &descriptor_table_ssl_5fvision_5fdetection_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 0, 2> SSL_DetectionFrame::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SSL_DetectionFrame_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SSL_DetectionFrame>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required uint32 frame_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_DetectionFrame, _impl_.frame_number_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.frame_number_)}},
    // required double t_capture = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_capture_)}},
    // required double t_sent = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_sent_)}},
    // required uint32 camera_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SSL_DetectionFrame, _impl_.camera_id_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.camera_id_)}},
    // repeated .SSL_DetectionBall balls = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.balls_)}},
    // repeated .SSL_DetectionRobot robots_yellow = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.robots_yellow_)}},
    // repeated .SSL_DetectionRobot robots_blue = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 2, PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.robots_blue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // required uint32 frame_number = 1;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.frame_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required double t_capture = 2;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_capture_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required double t_sent = 3;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_sent_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // required uint32 camera_id = 4;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.camera_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .SSL_DetectionBall balls = 5;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.balls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .SSL_DetectionRobot robots_yellow = 6;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.robots_yellow_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .SSL_DetectionRobot robots_blue = 7;
    {PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.robots_blue_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SSL_DetectionBall>()},
    {::_pbi::TcParser::GetTable<::SSL_DetectionRobot>()},
    {::_pbi::TcParser::GetTable<::SSL_DetectionRobot>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balls_.Clear();
  _impl_.robots_yellow_.Clear();
  _impl_.robots_blue_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.t_capture_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.t_sent_) -
        reinterpret_cast<char*>(&_impl_.t_capture_)) + sizeof(_impl_.t_sent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SSL_DetectionFrame::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_frame_number(), target);
  }

  // required double t_capture = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_t_capture(), target);
  }

  // required double t_sent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_t_sent(), target);
  }

  // required uint32 camera_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_balls_size());
       i < n; i++) {
    const auto& repfield = this->_internal_balls().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_robots_yellow_size());
       i < n; i++) {
    const auto& repfield = this->_internal_robots_yellow().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_robots_blue_size());
       i < n; i++) {
    const auto& repfield = this->_internal_robots_blue().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

::size_t SSL_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .SSL_DetectionBall balls = 5;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->_internal_balls()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .SSL_DetectionRobot robots_yellow = 6;
  total_size += 1UL * this->_internal_robots_yellow_size();
  for (const auto& msg : this->_internal_robots_yellow()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .SSL_DetectionRobot robots_blue = 7;
  total_size += 1UL * this->_internal_robots_blue_size();
  for (const auto& msg : this->_internal_robots_blue()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // required double t_capture = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // required uint32 frame_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_frame_number());
    }

    // required uint32 camera_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_camera_id());
    }

    // required double t_sent = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SSL_DetectionFrame::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SSL_DetectionFrame*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balls()->MergeFrom(
      from._internal_balls());
  _this->_internal_mutable_robots_yellow()->MergeFrom(
      from._internal_robots_yellow());
  _this->_internal_mutable_robots_blue()->MergeFrom(
      from._internal_robots_blue());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.t_capture_ = from._impl_.t_capture_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.t_sent_ = from._impl_.t_sent_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SSL_DetectionFrame::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const SSL_DetectionFrame&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_balls()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_robots_yellow()))
    return false;
  if (!::google::protobuf::internal::AllAreInitialized(this_._internal_robots_blue()))
    return false;
  return true;
}

void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.balls_.InternalSwap(&other->_impl_.balls_);
  _impl_.robots_yellow_.InternalSwap(&other->_impl_.robots_yellow_);
  _impl_.robots_blue_.InternalSwap(&other->_impl_.robots_blue_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_sent_)
      + sizeof(SSL_DetectionFrame::_impl_.t_sent_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_capture_)>(
          reinterpret_cast<char*>(&_impl_.t_capture_),
          reinterpret_cast<char*>(&other->_impl_.t_capture_));
}

::google::protobuf::Metadata SSL_DetectionFrame::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_ssl_5fvision_5fdetection_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
