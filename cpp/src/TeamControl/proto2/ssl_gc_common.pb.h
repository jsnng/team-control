// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssl_gc_common.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgc_5fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ssl_5fgc_5fcommon_2eproto;
class RobotId;
struct RobotIdDefaultTypeInternal;
extern RobotIdDefaultTypeInternal _RobotId_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Team : int {
  UNKNOWN = 0,
  YELLOW = 1,
  BLUE = 2,
};

bool Team_IsValid(int value);
extern const uint32_t Team_internal_data_[];
constexpr Team Team_MIN = static_cast<Team>(0);
constexpr Team Team_MAX = static_cast<Team>(2);
constexpr int Team_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Team_descriptor();
template <typename T>
const std::string& Team_Name(T value) {
  static_assert(std::is_same<T, Team>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Team_Name().");
  return Team_Name(static_cast<Team>(value));
}
template <>
inline const std::string& Team_Name(Team value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Team_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Team_Parse(absl::string_view name, Team* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Team>(
      Team_descriptor(), name, value);
}
enum Division : int {
  DIV_UNKNOWN = 0,
  DIV_A = 1,
  DIV_B = 2,
};

bool Division_IsValid(int value);
extern const uint32_t Division_internal_data_[];
constexpr Division Division_MIN = static_cast<Division>(0);
constexpr Division Division_MAX = static_cast<Division>(2);
constexpr int Division_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Division_descriptor();
template <typename T>
const std::string& Division_Name(T value) {
  static_assert(std::is_same<T, Division>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Division_Name().");
  return Division_Name(static_cast<Division>(value));
}
template <>
inline const std::string& Division_Name(Division value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Division_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Division_Parse(absl::string_view name, Division* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Division>(
      Division_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RobotId final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RobotId) */ {
 public:
  inline RobotId() : RobotId(nullptr) {}
  ~RobotId() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RobotId(
      ::google::protobuf::internal::ConstantInitialized);

  inline RobotId(const RobotId& from) : RobotId(nullptr, from) {}
  inline RobotId(RobotId&& from) noexcept
      : RobotId(nullptr, std::move(from)) {}
  inline RobotId& operator=(const RobotId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotId& operator=(RobotId&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotId& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotId* internal_default_instance() {
    return reinterpret_cast<const RobotId*>(
        &_RobotId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RobotId& a, RobotId& b) { a.Swap(&b); }
  inline void Swap(RobotId* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotId* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RobotId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RobotId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RobotId& from) { RobotId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RobotId* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RobotId"; }

 protected:
  explicit RobotId(::google::protobuf::Arena* arena);
  RobotId(::google::protobuf::Arena* arena, const RobotId& from);
  RobotId(::google::protobuf::Arena* arena, RobotId&& from) noexcept
      : RobotId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional .Team team = 2;
  bool has_team() const;
  void clear_team() ;
  ::Team team() const;
  void set_team(::Team value);

  private:
  ::Team _internal_team() const;
  void _internal_set_team(::Team value);

  public:
  // @@protoc_insertion_point(class_scope:RobotId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RobotId_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RobotId& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    int team_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RobotId

// optional uint32 id = 1;
inline bool RobotId::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RobotId::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RobotId::id() const {
  // @@protoc_insertion_point(field_get:RobotId.id)
  return _internal_id();
}
inline void RobotId::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:RobotId.id)
}
inline ::uint32_t RobotId::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void RobotId::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional .Team team = 2;
inline bool RobotId::has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RobotId::clear_team() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team RobotId::team() const {
  // @@protoc_insertion_point(field_get:RobotId.team)
  return _internal_team();
}
inline void RobotId::set_team(::Team value) {
  _internal_set_team(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:RobotId.team)
}
inline ::Team RobotId::_internal_team() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Team>(_impl_.team_);
}
inline void RobotId::_internal_set_team(::Team value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::Team_IsValid(value));
  _impl_.team_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Team> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Team>() {
  return ::Team_descriptor();
}
template <>
struct is_proto_enum<::Division> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Division>() {
  return ::Division_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fcommon_2eproto_2epb_2eh
